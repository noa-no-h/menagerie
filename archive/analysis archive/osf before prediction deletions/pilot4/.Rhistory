# for use in pilot 4
all_data_introspection_experience_pilot2 = all_data_introspection_experience %>%
select(!effect_size_std, !effect_size_std_within)
# Save image --------------------------------------------------------------
# for use in pilot 4
all_data_introspection_experience_pilot2 = all_data_introspection_experience %>%
select(!c(effect_size_std, effect_size_std_within))
all_data_introspection_both_pilot2 = all_data_introspection_both
save(all_data_introspection_experience_pilot2, all_data_introspection_both_pilot2, file = 'pilot2_alltasks.rdata')
# save all analyses
save.image('pilot2_output.rdata')
rm(list=ls())
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'RColorBrewer', 'afex', 'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf/pilot4/pilot4_output.rdata")
load('../pilot1/pilot1_alltasks.rdata')
load('../pilot2/pilot2_alltasks.rdata')
all_data_introspection_experience = all_data_introspection_experience_pilot1 %>%
rbind(all_data_introspection_experience_pilot2)
all_data_introspection_both = all_data_introspection_both_pilot1 %>%
rbind(all_data_introspection_both_pilot2)
all_bytask_introspection_experience = all_data_introspection_experience %>%
group_by(task) %>%
summarize(task_cor = cor(introspect_rating, effect_size_range))
all_bytask_introspection_experience = all_data_introspection_experience %>%
group_by(task_name) %>%
summarize(task_cor = cor(introspect_rating, effect_size_range))
View(all_bytask_introspection_experience)
all_bytask_introspection_both = all_data_introspection_both %>%
group_by(task_name, condition) %>%
summarize(mean_introspect_rating = mean(introspect_rating))
all_bytask_introspection_both = all_data_introspection_both %>%
group_by(task_name, factor) %>%
summarize(mean_introspect_rating = mean(introspect_rating))
View(all_bytask_introspection_both)
all_bytask_introspection_both = all_data_introspection_both %>%
group_by(task_name, factor) %>%
summarize(mean_introspect_rating = mean(introspect_rating)) %>%
group_by(task_name) %>%
mutate(task_diff = introspect_rating - lead(introspect_rating))
all_bytask_introspection_both = all_data_introspection_both %>%
group_by(task_name, factor) %>%
summarize(mean_introspect_rating = mean(introspect_rating)) %>%
group_by(task_name) %>%
mutate(task_diff = mean_introspect_rating - lead(mean_introspect_rating))
View(all_bytask_introspection_both)
all_bytask_introspection_both = all_data_introspection_both %>%
group_by(task_name, factor) %>%
summarize(mean_introspect_rating = mean(introspect_rating)) %>%
group_by(task_name) %>%
mutate(task_diff = mean_introspect_rating - lead(mean_introspect_rating)) %>%
filter(!is.na(task_diff))
View(df.long)
View(df.byheuristic)
df.byheuristic %>% filter(!(heuristic_name %in% c('DRM effect')))
df.byheuristic %>% filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias')))
View(all_bytask_introspection_both)
View(all_bytask_introspection_experience)
df.byheuristic.filt = df.byheuristic %>%
filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias')))
View(df.byheuristic.filt)
df.byheuristic.filt$actual_cor = all_bytask_introspection_experience$task_cor
df.byheuristic.filt$actual_diff = all_bytask_introspection_experience$task_diff
df.byheuristic.filt$actual_diff = all_bytask_introspection_both$task_diff
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(df.byheuristic.filt, aes(x = actual_diff, y = mean_prediction)) +
geom_point() +
geom_smooth(method = 'lm')
analysis.byheuristic.1 = brm(mean_prediction ~ actual_cor,
df.byheuristic.filt)
hdi(analysis.byheuristic.1)
getwd()
save.image('pilot4_analysis.rdata')
rm(list=ls())
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf/pilot2/pilot2_output.rdata")
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
effect_no_prediction <- c("#e74c3c", "#D3D3D3", "#4793AF")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
omission_data_introspection = omission_data %>%
filter(stimulus == "")
## in experience condition
omission_data_introspection_experience <- omission_data_introspection %>%
filter(factor == 'experience') %>%
mutate(effect_size = choice,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice < 4, c(T,F), c('Effect', 'No effect')))
# dichotomized
omission_summary_introspection_experience <- omission_data_introspection_experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(omission_summary_introspection_experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Omission introspection ratings", x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+
scale_y_continuous(limits = c(-50, 50))
omission_analysis_introspection_experience_midpoint = brm(introspect_rating ~ 1,
omission_data_introspection_experience %>% filter(showed_effect == 'Effect'),
save_pars = save_pars(group = F))
# continuous
ggplot(omission_data_introspection_experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_custom() +
labs(x = 'Choice', y = 'Influence rating')
omission_summary_introspection_both <- omission_data_introspection %>%
group_by(factor) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(omission_summary_introspection_both, aes(x = factor, y = mean_introspect_rating, fill = factor)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Omission introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+
scale_y_continuous(limits = c(-50, 50))
ggplot(omission_summary_introspection_experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Omission introspection ratings", x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+
scale_y_continuous(limits = c(-50, 50))
# continuous
ggplot(omission_data_introspection_experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_custom() +
labs(x = 'Choice', y = 'Influence rating')
## in experience condition
omission_data_introspection_experience <- omission_data_introspection %>%
filter(factor == 'experience') %>%
mutate(effect_size = -choice,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice < 4, c(T,F), c('Effect', 'No effect')))
# dichotomized
omission_summary_introspection_experience <- omission_data_introspection_experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(omission_summary_introspection_experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Omission introspection ratings", x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+
scale_y_continuous(limits = c(-50, 50))
# continuous
ggplot(omission_data_introspection_experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_custom() +
labs(x = 'Choice', y = 'Influence rating')
## in experience condition
all_list_introspection_experience = list(halo_data_introspection_experience,
illusory_data_introspection_experience,
omission_data_introspection_experience,
recognition_data_introspection_experience,
reference_data_introspection_experience,
representativeness_data_introspection_experience)
all_data_introspection_experience = all_list_introspection_experience[[1]] %>%
select(subject, task_name, introspect_rating, effect_size, effect_size_std, effect_size_range, showed_effect)
for (i in 2:length(all_list_introspection_experience)) {
all_data_introspection_experience = all_data_introspection_experience %>%
rbind(all_list_introspection_experience[[i]] %>%
select(subject, task_name, introspect_rating, effect_size, effect_size_std, effect_size_range, showed_effect))
}
# dichotomous
all_summary_introspection_experience = all_data_introspection_experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating))
ggplot(all_summary_introspection_experience,
aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "", x = "Influenced by heuristic?", y = "Influence rating") +
theme_custom() +
scale_fill_manual(values = effect_no) +
scale_x_discrete(labels = c('Yes', 'No')) +
guides(fill = "none") +
scale_y_continuous(limits = c(-40, 40))
# continuous
ggplot(all_data_introspection_experience,
aes(x = effect_size_range, y = introspect_rating)) +
geom_point(alpha=0.5) +
geom_smooth(method='lm') +
theme_custom() +
labs(x = 'Influence magnitude',
y = 'Influence rating')
all_bysubject_introspection_experience = all_data_introspection_experience %>%
group_by(subject) %>%
summarize(subject_cor = cor(effect_size_range, introspect_rating))
ggplot(all_bysubject_introspection_experience, aes(x = subject_cor)) +
geom_histogram(color = 'black') +
theme_custom() +
labs(x = 'Participant-level correlation between\ninfluence ratings and influence magnitudes',
y = 'Number of subjects') +
geom_vline(xintercept = mean(all_bysubject_introspection_experience$subject_cor, na.rm = T), color = 'red') +
geom_vline(xintercept = mean(all_bysubject_introspection_experience$subject_cor, na.rm = T) - se(all_bysubject_introspection_experience$subject_cor), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = mean(all_bysubject_introspection_experience$subject_cor, na.rm = T) + se(all_bysubject_introspection_experience$subject_cor), color = 'red', linetype = 'dashed') +
scale_y_continuous(labels = c(), expand = expansion(mult = c(0, 0.05)))
## across conditions
all_list_introspection_both = list(halo_data_introspection,
illusory_data_introspection,
omission_data_introspection,
recognition_data_introspection,
reference_data_introspection,
representativeness_data_introspection)
all_data_introspection_both = all_list_introspection_both[[1]] %>%
left_join(all_list_introspection_experience[[1]] %>% select(subject, factor, showed_effect), by = c('subject', 'factor')) %>%
select(subject, task_name, factor, introspect_rating, showed_effect)
for (i in 2:length(all_list_introspection_both)) {
all_data_introspection_both = all_data_introspection_both %>%
rbind(all_list_introspection_both[[i]] %>%
left_join(all_list_introspection_experience[[i]] %>% select(subject, factor, showed_effect), by = c('subject', 'factor')) %>%
select(subject, task_name, factor, introspect_rating, showed_effect))
}
all_data_introspection_both = all_data_introspection_both %>%
mutate(showed_effect = as.character(showed_effect),
showed_effect = ifelse(factor == 'prediction', 'Prediction', showed_effect),
showed_effect = factor(showed_effect, c('Effect', 'No effect', 'Prediction')))
all_summary_introspection_both = all_data_introspection_both %>%
group_by(factor) %>%
summarize(mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating))
ggplot(all_summary_introspection_both, aes(x = factor, y = mean_introspect_rating, fill = factor)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "", x = "Condition", y = "Influence rating") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+
scale_y_continuous(limits = c(-50, 50))
all_bytask_introspection_both = all_data_introspection_both %>%
group_by(task_name, factor) %>%
summarize(mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating))
ggplot(all_bytask_introspection_both, aes(x = task_name, y = mean_introspect_rating, color = factor)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "", x = "Condition", y = "Influence rating") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+
scale_y_continuous(limits = c(-50, 50))+
theme(axis.text.x = element_text(angle = 45, vjust = 0.7))
all_summary_introspection_split = all_data_introspection_both %>%
filter(!is.na(showed_effect)) %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating))
ggplot(all_summary_introspection_split, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
#geom_jitter(data = all_data_introspection_both, aes(y = introspect_rating),
#           alpha = 0.5, height = 0, width = .1) +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "", x = "", y = "Influence rating") +
theme_custom() +
scale_fill_manual(values = effect_no_prediction)+
guides(fill = "none")+
scale_x_discrete(labels = c('Influenced', 'Not\ninfluenced', 'Prediction')) +
scale_y_continuous(limits = c(-10,30)) +
geom_hline(yintercept = 0)
# Save image --------------------------------------------------------------
# for use in pilot 4
all_data_introspection_experience_pilot2 = all_data_introspection_experience %>%
select(!c(effect_size_std, effect_size_std_within))
all_data_introspection_both_pilot2 = all_data_introspection_both
all_data_introspection_experience = all_data_introspection_experience %>%
group_by(subject) %>%
mutate(effect_size_std_within = scale(effect_size_std),
effect_size_range_within = scale(effect_size_range),
introspect_rating_within = scale(introspect_rating)) %>%
ungroup()
# Save image --------------------------------------------------------------
# for use in pilot 4
all_data_introspection_experience_pilot2 = all_data_introspection_experience %>%
select(!c(effect_size_std, effect_size_std_within))
all_data_introspection_both_pilot2 = all_data_introspection_both
save(all_data_introspection_experience_pilot2, all_data_introspection_both_pilot2, file = 'pilot2_alltasks.rdata')
# save all analyses
save.image('pilot2_output.rdata')
getwd()
rm(list=ls())
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf/pilot2/pilot2_output.rdata")
# continuous
ggplot(all_data_introspection_experience,
aes(x = effect_size_range, y = introspect_rating)) +
geom_point(alpha=0.5) +
geom_smooth(method='lm') +
theme_custom() +
labs(x = 'Influence magnitude',
y = 'Influence rating')
rm(list=ls())
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf/pilot4/pilot4_output.rdata")
load('../pilot1/pilot1_alltasks.rdata')
load('../pilot2/pilot2_alltasks.rdata')
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'RColorBrewer', 'afex', 'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
load('../pilot1/pilot1_alltasks.rdata')
load('../pilot2/pilot2_alltasks.rdata')
all_data_introspection_experience = all_data_introspection_experience_pilot1 %>%
rbind(all_data_introspection_experience_pilot2)
all_data_introspection_both = all_data_introspection_both_pilot1 %>%
rbind(all_data_introspection_both_pilot2)
all_bytask_introspection_experience = all_data_introspection_experience %>%
group_by(task_name) %>%
summarize(task_cor = cor(introspect_rating, effect_size_range))
all_bytask_introspection_both = all_data_introspection_both %>%
group_by(task_name, factor) %>%
summarize(mean_introspect_rating = mean(introspect_rating)) %>%
group_by(task_name) %>%
mutate(task_diff = mean_introspect_rating - lead(mean_introspect_rating)) %>%
filter(!is.na(task_diff))
df.byheuristic.filt = df.byheuristic %>%
filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias')))
df.byheuristic.filt$actual_cor = all_bytask_introspection_experience$task_cor
df.byheuristic.filt$actual_diff = all_bytask_introspection_both$task_diff
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point() +
geom_smooth(method = 'lm')
analysis.byheuristic.1 = brm(mean_prediction ~ actual_cor,
df.byheuristic.filt)
hdi(analysis.byheuristic.1)
save.image('pilot4_analysis.rdata')
