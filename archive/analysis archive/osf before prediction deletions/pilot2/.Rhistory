aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
# Load data ---------------------------------------------------------------
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "prediction")))
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
## Exclusion
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 1
failed.attn1 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
df <- df %>%
filter(subject %in% demo$subject,
!(subject %in% glitched),
!(subject %in% failed.attn1),
!(subject %in% failed.attn2),
!(subject %in% wrong.trial.num))
length(unique(df$subject)) #518 Participants
df$effect.size = NA
df$effect.size.fac = NA
#* 1 Anchoring (between-subjects) ----------------------------------------------------
#** data preparation ----
df.anchor = df %>%
filter(task_name == 'anchoring',
condition != 'High Anchor') %>% # we only ended up using the low anchor version of the antarctic question for the final study
mutate(condition = factor(condition),
choice = as.numeric(choice),
distance.from.anchor = abs(-45 - choice)) #%>%
#group_by(subject) %>% filter(any(familiarity == 'No'))
df.anchor.choices = df.anchor %>%
filter(!is.na(choice),
stimulus == 'Antarctic Temperature')
#** data visualization ----
ggplot(df.anchor.choices, aes(x = choice)) +
geom_histogram() +
facet_wrap(~condition)
summary.anchor = df.anchor.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice),
distance.from.anchor.m = mean(distance.from.anchor),
distance.from.anchor.se = se(distance.from.anchor))
ggplot(summary.anchor, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
ggplot(summary.anchor, aes(x = condition, y = distance.from.anchor.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = distance.from.anchor.m - distance.from.anchor.se,
ymax = distance.from.anchor.m + distance.from.anchor.se),
width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
analysis.anchor = brm(distance.from.anchor ~ condition,
data = df.anchor.choices %>%
mutate(distance.from.anchor = scale(distance.from.anchor),
condition = relevel(condition, ref = "No Anchor")),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.anchor)
check_divergences(analysis.anchor$fit)
summary(analysis.anchor)
hdi(analysis.anchor)
#* 2 Availability (between-subjects) -------------------------------------------------
#** data preparation ----
df.avail = df %>%
filter(task_name == 'availability'#,
#familiarity == 'No'
) %>%
mutate(choice.binary = choice == 'List 1')
#** data visualization ----
ggplot(df.avail, aes(x = condition, fill = choice.binary)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
theme_custom()
analysis.avail = brm(choice.binary ~ condition,
data = df.avail,
family = 'bernoulli',
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.avail)
check_divergences(analysis.avail$fit)
summary(analysis.avail)
hdi(analysis.avail)
#* 3 Causal Inference (between-subjects) -------------------------------------------------------------
#** data preparation ----
df.cause = df %>% filter(task_name == 'causal inference') %>%
mutate(choice = as.numeric(choice))
#** data visualization ----
summary.cause = df.cause %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice))
ggplot(summary.cause, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
labs(x = "Condition") +
theme_custom()
analysis.cause = brm(choice ~ condition,
df.cause,
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.cause)
check_divergences(analysis.cause$fit)
summary(analysis.cause)
hdi(analysis.cause)
#* 6 Decoy Effect -------------------------------------------------------------
#** data preparation ----
df.decoy = df %>%
filter(task_name == 'decoy effect') %>%
mutate(choice.target = choice == 'Brand N (Target)')
#** data visualization ----
summary.decoy = df.decoy %>%
group_by(factor) %>%
summarize(choice.target.m = mean(choice.target),
choice.target.se = se.prop(choice.target))
ggplot(summary.decoy, aes(x = factor, y = choice.target.m)) +
geom_col() +
geom_errorbar(aes(ymin = choice.target.m - choice.target.se,
ymax = choice.target.m + choice.target.se),
width = 0.2) +
theme_custom()
#** inferential statistics ----
analysis.decoy = brm(choice.target ~ condition,
df.decoy,
prior = default_priors,
family = 'bernoulli')
summarise_draws(analysis.decoy)
check_divergences(analysis.decoy$fit)
summary(analysis.decoy)
hdi(analysis.decoy)
#* 8 Belief (within-subjects) ------------------------------------------------------------------
#** data preparation ----
df.belief <- df %>%
filter(task_name == 'belief') %>%
mutate(choice.yes = choice == 'Yes')
df.belief.choices = df.belief %>%
filter(factor == "experience", !is.na(choice), !is.na(condition))
#** data visualization ----
summary.belief <- df.belief.choices %>%
group_by(condition) %>%
summarize(choice.yes.m = mean(choice.yes),
choice.yes.se = se.prop(choice.yes))
ggplot(summary.belief, aes(x = condition, y = choice.yes.m)) +
geom_col() +
geom_errorbar(aes(ymin = choice.yes.m - choice.yes.se,
ymax = choice.yes.m + choice.yes.se),
width = 0.2) +
theme_custom()
#** inferential statistics ----
analysis.belief = brm(choice.yes ~ condition,
df.belief.choices,
prior = default_priors,
family = 'bernoulli')
summarise_draws(analysis.belief)
check_divergences(analysis.belief$fit)
summary(analysis.belief)
hdi(analysis.belief)
#* 9 Mere exposure (within-subjects) ------------------------------------------------------
#** data preparation ----
df.mee = df %>%
filter(task_name == 'mere exposure') %>%
mutate(choice = as.numeric(choice))
df.mee.choices <- df.mee %>%
filter(factor == "experience", !is.na(choice)) %>%
mutate(condition = factor(condition, c(1,25), c('low', 'high')))
#** data visualization (general) ----
summary.mee = df.mee.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice))
ggplot(summary.mee, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme_custom() +
labs(x = "Condition", y = "Mean Liking Rating")
#** inferential statistics ----
analysis.mee = brm(choice ~ condition + (condition | subject),
df.mee.choices %>% mutate(choice = scale(choice)),
prior = default_priors,
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95))
summarise_draws(analysis.mee)
check_divergences(analysis.mee$fit)
summary(analysis.mee)
hdi(analysis.mee)
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
effect_no_prediction <- c("#e74c3c", "#D3D3D3", "#4793AF")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# Load data ---------------------------------------------------------------
data <- read.csv('pilot2_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "prediction")),
introspect_rating = as.numeric(introspect_rating), # make numeric
introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating, # reverse-coded ones
introspect_rating),
introspect_rating = introspect_rating - 50 # center around midpoint of zero
)
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot2_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot2_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude)
#font_import(pattern = "Optima", prompt = FALSE)
loadfonts(device = "pdf")
# Halo effect ----
## do we see the effect? ----
#Did subjects who were shown some attractive and
#some attractive faces think the attractive were more persuasive, with the subjects who only saw neutral faces calling in the middle?
halo_data <- data %>%
filter(task_name == "halo") %>%
mutate(choice = as.numeric(choice),
auxiliary_info1 = as.numeric(auxiliary_info1))
halo_data_choices = halo_data %>%
filter(stimulus != "") %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
)
)
halo_summary <- halo_data_choices %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
mean_attractiveness = mean(auxiliary_info1, na.rm = T),
se_attractiveness = se(auxiliary_info1),
count = n()
)
# manipulation check
ggplot(halo_summary, aes(x = condition, y = mean_attractiveness, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_attractiveness - se_attractiveness, ymax = mean_attractiveness + se_attractiveness), width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
labs(title = "Average Attractiveness by Condition", x = "Condition", y = "Average Attractiveness") +
theme_custom()+
scale_fill_manual(values = in_neutral_ex)+
guides(fill = FALSE)
# actual effect
ggplot(halo_summary, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
labs(title = "Average Persuasiveness by Attractiveness", x = "Condition", y = "Average Choice") +
theme_custom()+
scale_fill_manual(values = in_neutral_ex)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
# bayesian analysis
halo_analysis = brm(choice ~ condition + (1 | subject),
data = halo_data_choices %>% mutate(choice = scale(choice)),
prior = default_priors,
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95))
summarise_draws(halo_analysis)
check_divergences(halo_analysis$fit)
summary(halo_analysis)
hdi(halo_analysis, effects = 'all')
# Illusory truth effect ---------------------------------------------------
## do we see the effect? ----
illusory_data <- data %>%
filter(task_name == "illusion of truth pt2") %>%
mutate(choice = as.numeric(choice),
seen_before = factor(condition %in% c('true_old', 'false_old'), c(T,F), c('Seen', 'Unseen')),
response_over_midpoint = choice > 50)
illusory_data_choices = illusory_data %>%
filter(stimulus != "")
illusory_summary = illusory_data_choices %>%
filter(factor == 'experience') %>%
group_by(seen_before) %>%
summarize(mean_choice = mean(choice),
se_choice = se(choice),
mean_response_over_midpoint = mean(response_over_midpoint),
se_response_over_midpoint = se.prop(response_over_midpoint))
ggplot(illusory_summary, aes(x = seen_before, y = mean_choice)) +
geom_col() +
geom_errorbar(aes(ymin = mean_choice - se_choice,
ymax = mean_choice + se_choice),
width = 0.2) +
theme_custom()
illusory_analysis = brm(choice ~ seen_before + (1 | subject),
prior = default_priors,
illusory_data_choices %>% mutate(choice = scale(choice)),
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95))
summarise_draws(illusory_analysis)
check_divergences(illusory_analysis$fit)
summary(illusory_analysis)
hdi(illusory_analysis)
# Omission effect ----
## do we see the effect? ----
omission_data <- data %>%
filter(task_name == "omission principle") %>%
mutate(choice = as.numeric(choice))
omission_summary <- omission_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("commission", "omission"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(omission_summary, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Omission Principle", x = "Condition", y = "Forbidden to Obligatory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
omission_analysis = brm(choice ~ condition,
omission_data %>% mutate(choice = scale(choice)),
prior = default_priors,
save_pars = save_pars(group = F))
summary(omission_analysis)
hdi(omission_analysis)
# Recognition heuristic ----
## do we see the effect? ----
recognition_data <- data %>%
filter(task_name == "recognition: city") %>%
filter(factor == "experience") %>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable',
chose_recognizable_num = as.numeric(chose_recognizable))
recognition_count <- recognition_data %>%
count(auxiliary_info1)
ggplot(recognition_count, aes(x = auxiliary_info1, y = n, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
labs(title = "Recognition Effect for City Population", x = "Within experience", y = "Count") +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
recognition_analysis = brm(chose_recognizable_num ~ 1 + (1 | subject),
recognition_data,
family = 'bernoulli',
save_pars = save_pars(group = F))
summary(recognition_analysis)
hdi(recognition_analysis)
# Reference price ----
## do we see the effect? ----
#When subjects were told the hotel was fancy, were
#they more likely to give a higher price they'd be willing to pay?
reference_data <- data %>%
filter(task_name == "reference price") %>%
mutate(choice_parsed = parse_number(choice)) %>%
filter(choice_parsed <= 40)
reference_summary <- reference_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("hotel", "motel"))) %>%
summarize(
mean_choice = mean(choice_parsed),
se_choice = se(choice_parsed),
count = n()
)
ggplot(reference_summary, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Amount Willing to Pay for Beer", x = "Condition", y = "Average Amount Willing to Pay (Dollars)") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
reference_analysis = brm(choice_parsed ~ condition,
reference_data %>% mutate(choice_parsed = scale(choice_parsed)),
prior = default_priors,
save_pars = save_pars(group = F))
summary(reference_analysis)
hdi(reference_analysis)
# Representativeness ----
## do we see the effect? ----
representativeness_data <- data %>%
filter(task_name == "rep") %>%
mutate(choice = as.numeric(choice))
representativeness_summary <- representativeness_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded"), labels = c("description", "no description"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(representativeness_summary, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Is Jack an Engineer?", x = "Condition", y = "average likelihood of engineer") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
representativeness_analysis = brm(choice ~ condition,
representativeness_data %>% mutate(choice = scale(choice)),
prior = default_priors,
save_pars = save_pars(group = F))
summary(representativeness_analysis)
hdi(representativeness_analysis)
