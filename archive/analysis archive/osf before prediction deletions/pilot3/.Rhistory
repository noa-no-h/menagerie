knitr::opts_chunk$set(echo = TRUE)
weight <- c(1.7, 11.7, -1.4, 0.7, 6.1, -0.8, -0.1, 1.1, 2.4, -0.7, -4.0, 12.6, -3.5, 20.9,
1.9, 14.9, -9.3, 3.9, 3.5, 2.1, 0.1, 17.1, 1.4, 15.4, -7.6, -0.3, -0.7,1.6, -3.7)
mean(weight)
sd(weight)
3/(7.32/sqrt(29))
3+2.05 * 7.32/(sqrt(29))
3-2.05 * 7.32/(sqrt(29))
t.test(weight, alternative = "greater")
t.test(weight, alternative = "two.sided")
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
load("bdims.RData")
library(mosaic)
mdims = subset(bdims, sex == 1)
fdims = subset(bdims, sex == 0)
population = fdims$hgt
mu = mean(population); mu
sigma = sd(population); sigma
histogram(population, fit="normal", nint=15, xlab="Women's height (cm)")
samp = do(100) * favstats(sample(population, size = 5))
head(samp)
11 + 13
test
#### Headers ####
##### Numeric #####
sample_size <- 100
# 6/14/23
#### Header ####
#### Variables ####
##### Numeric #####
sample_size <- 100
##### Characters #####
name <- "Clarissa"
(())no
bool_t <- TRUE
not bool_t
!bool_t
bool_t||!bool)t
bool_t||!bool_t
bool_t || !bool_t
bool_t & !bool_t
numbers <- c(33, 11, 232, 0.001)
numbers[1]
numbers[0]
numbers[-1]
numbers[1:3]
numbers[5:3]
numbers[4:3]
numbers[1:5:2]
groups_string <- c("Treatment1", "Treatment1", "Treatment2", "Control")
group <- factor(c("Treatment1", "Treatment1", "Treatment2", "Control"))
group
require(sjPlot)
install.packages("minqa", repos = "https://cran.rstudio.com/")
install.packages("RcppEigen", repos = "https://cran.rstudio.com/")
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(sjPlot)
require(magrittr)
5+5
5+"noa"
5+"5"
"noa"+"noa"
5*5
"noa" *5
["noa"]*5
c("noa")*5
1-5
5/4
month.name
!month
?month
??month
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'lme4', 'lmerTest', 'extrafont', 'RColorBrewer',
'this.path', 'brms', 'extrafont', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
# Load data ---------------------------------------------------------------
data <- read.csv('full_pilot.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
#filter(familiarity != "Yes") %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded")),
introspect_rating = as.numeric(introspect_rating), # make numeric
introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating,
introspect_rating), # reverse-coded ones
introspect_rating = introspect_rating - 50 # center around midpoint of zero
)
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('full_pilot_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('full_pilot_demo.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude)
#font_import(pattern = "Optima", prompt = FALSE)
loadfonts(device = "pdf")
#7. Halo effect ----
##7.1 do we see the effect? ----
#Did subjects who were shown some attractive and
#some attractive faces think the attractive were more persuasive, with the subjects who only saw neutral faces calling in the middle?
halo_data <- data %>%
filter(task_name == "halo") %>%
mutate(choice = as.numeric(choice),
auxiliary_info1 = as.numeric(auxiliary_info1))
halo_data_choices = halo_data %>%
filter(stimulus != "") %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
)
)
halo_summary <- halo_data_choices %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
mean_attractiveness = mean(auxiliary_info1, na.rm = T),
se_attractiveness = se(auxiliary_info1),
count = n()
)
# manipulation check
ggplot(halo_summary, aes(x = condition, y = mean_attractiveness, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_attractiveness - se_attractiveness, ymax = mean_attractiveness + se_attractiveness), width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
labs(title = "Average Attractiveness by Condition", x = "Condition", y = "Average Attractiveness") +
theme_custom()+
scale_fill_manual(values = in_neutral_ex)+
guides(fill = FALSE)
View(subjects_all)
View(data)
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
# Load data ---------------------------------------------------------------
data <- read.csv('pilot3_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "prediction")))
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot3_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot3_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude)
#font_import(pattern = "Optima", prompt = FALSE)
loadfonts(device = "pdf")
# 1 Affect Heuristic ----
## 1.1 do we see the effect? ----
affect_data = data %>%
filter(task_name == "affect heuristic")%>%
mutate(choice = as.numeric(choice))
summary_affect_data <- affect_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("With passage", "without passage"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_affect_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Affect", x = "Condition", y = "How beneficial is natural gas") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
affect_analysis = brm(choice ~ factor,
data = affect_data,
save_pars = save_pars(group = F))
hindsight_data = data %>%
filter(task_name == "hindsight effect")%>%
filter(stimulus != "comprehension") %>%
mutate(choice = as.numeric(choice))
summary_hindsight_data <- hindsight_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("knowledge of outcome", "no knowledge of outcome"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_hindsight_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Hindsight", x = "Condition", y = "Percent Likelihood of British Victory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
simulation_data = data %>%
filter(task_name == "simulation")%>%
mutate(choice = as.numeric(choice))
summary_simulation_data <- simulation_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("barely missed", "missed"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_simulation_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Simulation", x = "Condition", y = "How upset would he feel") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
status_quo_data <- data %>%
filter(task_name == "status_quo") %>%
filter(stimulus != "comprehension") %>%
mutate(choice = ifelse(auxiliary_info1 == "Allocate 50% to auto safety and 50% to highway safety status quo: 50/50",
"status quo",
choice)) %>%
mutate(choice_binary = as.numeric(choice == "status quo"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
summary_status_quo_data <- status_quo_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice_binary),
se_choice = se.prop(choice_binary),
count = n()
)
ggplot(summary_status_quo_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Choices to continue the status quo", x = "Condition", y = "Percent subjects who recommended the status quo") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
sunk_cost_data <- data %>%
filter(task_name == "sunk_cost2 effect") %>%
mutate(switched = choice == "Don't Continue Investing",
switched.num = as.numeric(switched))
percentage_sunk_cost_data <- sunk_cost_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("Sunk Cost", "No Sunk Cost"))) %>%
summarize(
total_in_condition = n(),  # Total number of subjects in each condition
switched_count = sum(choice == "Don't Continue Investing")  # Count who chose "Solar-powered pump"
) %>%
mutate(percentage_switched = (switched_count / total_in_condition) * 100)
summary(glm(switched ~ condition, data = sunk_cost_data, family = 'binomial'))
ggplot(percentage_sunk_cost_data, aes(x = condition, y = percentage_switched, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Percentage Who Stopped Investing", x = "Condition", y = "Percentage of Choices to Stop Investing") +
geom_text(aes(label = paste0("n=", total_in_condition)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
primacy_data <- data %>%
filter(task_name == "primacy order") %>%
filter(is.na(stimulus)) %>%
filter(choice != "")%>%
mutate(choice = ifelse(choice == "car1",
"chose primacy car",
"chose other car")) %>%
mutate(choice_binary = as.numeric(choice == "chose primacy car"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
summary_primacy_data <- primacy_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice_binary),
se_choice = se.prop(choice_binary),
count = n()
)
ggplot(summary_primacy_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Choices of the primacy car", x = "Condition", y = "Percent who chose primacy car") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
primacy_data <- data %>%
filter(task_name == "primacy order") %>%
filter(is.na(stimulus)) %>%
filter(choice != "")%>%
mutate(choice = ifelse(choice == "car1",
"chose primacy car",
"chose other car")) %>%
mutate(choice_binary = as.numeric(choice == "chose primacy car"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
View(primacy_data)
primacy_data <- data %>%
filter(task_name == "primacy order")
View(primacy_data)
primacy_data <- data %>%
filter(task_name == "primacy order") %>%
filter(choice != "")
primacy_data <- data %>%
filter(task_name == "primacy order") %>%
filter(choice != "")%>%
mutate(choice = ifelse(choice == "car1",
"chose primacy car",
"chose other car")) %>%
mutate(choice_binary = as.numeric(choice == "chose primacy car"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
primacy_data <- data %>%
filter(task_name == "primacy order") %>%
filter(choice != "")
View(primacy_data)
primacy_data <- data %>%
filter(task_name == "primacy order") %>%
filter(choice != "")%>%
mutate(choice = ifelse(choice == "car1",
"chose primacy car",
"chose other car")) %>%
mutate(choice_binary = as.numeric(choice == "chose primacy car"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
View(primacy_data)
primacy_data <- data %>%
filter(task_name == "primacy order") %>%
filter(choice != "")%>%
mutate(choice = ifelse(choice == "car1",
"chose primacy car",
"chose other car")) %>%
mutate(choice_binary = as.numeric(choice == "chose primacy car"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
summary_primacy_data <- primacy_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice_binary),
se_choice = se.prop(choice_binary),
count = n()
)
ggplot(summary_primacy_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Choices of the primacy car", x = "Condition", y = "Percent who chose primacy car") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
primacy_analysis = brm(choice_binary ~ condition,
data = primacy_data,
family = 'bernoulli',
save_pars = save_pars(group = F))
ggplot(summary_primacy_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Choices of the primacy car", x = "Condition", y = "Percent who chose primacy car") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
subjects_all = data %>%
pull(subject) %>%
unique()
View(subjects_all)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
