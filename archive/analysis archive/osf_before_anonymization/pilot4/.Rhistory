}
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'RColorBrewer', 'afex', 'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf/pilot4/pilot4_output.rdata")
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(heuristic_name != 'DRM effect'), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
geom_hline(yintercept = 4, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'RColorBrewer', 'afex', 'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf_before_anonymization/pilot4/pilot4_output.rdata")
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(heuristic_name != 'DRM effect'), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
geom_hline(yintercept = 4, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(heuristic_name != 'DRM effect'), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
geom_hline(yintercept = 4, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction') +
theme_black()
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(heuristic_name != 'DRM effect'), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(heuristic_name != 'DRM effect'), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(heuristic_name != 'DRM effect'), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic %>% filter(heuristic_name != 'DRM effect'), aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long, aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic %>% filter(heuristic_name != 'DRM effect'), aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(heuristic_name != 'DRM effect'), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
# split by role
df.byrole = df.long %>%
group_by(Role.fac, Subject) %>%
summarize(heuristic_prediction.m = mean(heuristic_prediction, na.rm = T)) %>%
group_by(Role.fac) %>%
summarize(mean.prediction = mean(heuristic_prediction.m))
df.byrole
# split by role
df.byrole = df.long %>%
group_by(Role.fac, Subject) %>%
summarize(heuristic_prediction.m = mean(heuristic_prediction, na.rm = T)) %>%
group_by(Role.fac) %>%
summarize(mean.prediction = mean(heuristic_prediction.m, na.rm = T))
df.byrole
# split by role
df.byrole = df.long %>%
group_by(Role.fac, Subject) %>%
summarize(heuristic_prediction.m = mean(heuristic_prediction, na.rm = T)) %>%
group_by(Role.fac) %>%
summarize(mean.prediction = mean(heuristic_prediction.m, na.rm = T),
se.prediction = se(heuristic_prediction.m))
# split by role
df.byroleandsubject = df.long %>%
group_by(Role.fac, Subject) %>%
summarize(heuristic_prediction.m = mean(heuristic_prediction, na.rm = T))
df.byrole = df.byroleandsubject %>%
group_by(Role.fac) %>%
summarize(mean.prediction = mean(heuristic_prediction.m, na.rm = T),
se.prediction = se(heuristic_prediction.m))
# split by role
df.byroleandsubject = df.long %>%
filter(!is.na(Role.fac)) %>%
group_by(Role.fac, Subject) %>%
summarize(heuristic_prediction.m = mean(heuristic_prediction, na.rm = T))
df.byrole = df.byroleandsubject %>%
group_by(Role.fac) %>%
summarize(mean.prediction = mean(heuristic_prediction.m, na.rm = T),
se.prediction = se(heuristic_prediction.m))
# split by role
df.byroleandsubject = df.long %>%
filter(!is.na(Role.fac)) %>%
group_by(Role.fac, Subject) %>%
summarize(heuristic_prediction.m = mean(heuristic_prediction, na.rm = T))
df.byrole = df.byroleandsubject %>%
group_by(Role.fac) %>%
summarize(mean_prediction = mean(heuristic_prediction.m, na.rm = T),
se_prediction = se(heuristic_prediction.m))
ggplot(df.byrole, aes(x = Role.fac, y = mean.prediction)) %>%
geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byrole, aes(x = Role.fac, y = mean.prediction)) +
geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
df.byroleandsubject
is.numeric(NaN)
# split by role
df.byroleandsubject = df.long %>%
filter(!is.na(Role.fac)) %>%
group_by(Role.fac, Subject) %>%
summarize(heuristic_prediction.m = mean(heuristic_prediction, na.rm = T)) %>%
filter(!is.nan(heuristic_prediction.m))
df.byrole = df.byroleandsubject %>%
group_by(Role.fac) %>%
summarize(mean_prediction = mean(heuristic_prediction.m, na.rm = T),
se_prediction = se(heuristic_prediction.m))
ggplot(df.byrole, aes(x = Role.fac, y = mean.prediction)) +
geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
df.byroleandsubject
ggplot(df.byrole, aes(x = Role.fac, y = mean.prediction)) +
#geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
#            width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byrole, aes(x = Role.fac, y = mean_prediction)) +
geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byrole, aes(x = Role.fac, y = mean_prediction)) +
#geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
#            width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
summary(lmer(heuristic_prediction ~ Role.fac +
(1 | Subject) +
(Role.fac | heuristic_name),
df.long))
summary(lmer_alt(heuristic_prediction ~ Role.fac +
(1 | Subject) +
(Role.fac || heuristic_name),
df.long))
length(unique(df.long$Subject))
ggplot(df.byrole, aes(x = Role.fac, y = mean_prediction)) +
geom_point(df.byroleandsubject, aes(y = heuristic_prediction.m),
width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byrole, aes(x = Role.fac, y = mean_prediction)) +
#geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
#            width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byrole %>% filter(Role.fac != 'Other'), aes(x = Role.fac, y = mean_prediction)) +
#geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
#            width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byrole %>% filter(Role.fac != 'Other'), aes(x = Role.fac, y = mean_prediction)) +
#geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
#            width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byrole %>% filter(Role.fac != 'Other'), aes(x = Role.fac, y = mean_prediction)) +
geom_jitter(df.byroleandsubject, aes(y = heuristic_prediction.m),
width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byrole %>% filter(Role.fac != 'Other'), aes(x = Role.fac, y = mean_prediction)) +
geom_jitter(data = df.byroleandsubject, mapping = aes(y = heuristic_prediction.m),
width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byrole %>% filter(Role.fac != 'Other'), aes(x = Role.fac, y = mean_prediction)) +
geom_jitter(data = df.byroleandsubject %>% filter(Role.fac != 'Other'), mapping = aes(y = heuristic_prediction.m),
width = 0, alpha = 0.5, height = 0.2, color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
# split by heuristic
df.byheuristic = df.long %>%
filter(heuristic_name != 'DRM effect') %>%
group_by(heuristic_name) %>%
summarize(mean_prediction = mean(heuristic_prediction, na.rm = T),
se_prediction = se(heuristic_prediction),
pct.high.predictions = mean(heuristic_prediction >= 6, na.rm = T),
pct.low.predictions = mean(heuristic_prediction <= 2, na.rm = T),
test.t = t.test(heuristic_prediction, mu = 4)$statistic,
test.df = t.test(heuristic_prediction, mu = 4)$parameter,
test.p = t.test(heuristic_prediction, mu = 4)$p.value)
ggplot(df.byheuristic %>% filter(heuristic_name != 'DRM effect'), aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(heuristic_name != 'DRM effect'), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
nrow(df)
df = read.csv('pilot4_data_updated.csv', header = T) %>%
mutate(Progress = as.numeric(Progress)) %>%
filter(DistributionChannel == 'anonymous', Progress >= 90) %>%
select(Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('heuristic')) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields))
nrow(df)
summary(lmer_alt(heuristic_prediction ~ Role.fac +
(1 | Subject) +
(Role.fac || heuristic_name),
df.long))
summary(lmer_alt(scale(heuristic_prediction) ~ Role.fac +
(1 | Subject) +
(Role.fac || heuristic_name),
df.long))
length(unique(df$Subject))
mean(df.bysubject$mean.prediction)
summary(lmer(heuristic_prediction ~ 1 + (1 | Subject) + (1 | heuristic_name),
df.long %>% mutate(heuristic_prediction = heuristic_prediction - 4)))
summary(lmer(heuristic_prediction ~ 1 + (1 | Subject) + (1 | heuristic_name),
df.long %>% mutate(heuristic_prediction = scale(heuristic_prediction - 4))))
summary(lmer(heuristic_prediction ~ 1 + (1 | Subject) + (1 | heuristic_name),
df.long %>% mutate(heuristic_prediction = heuristic_prediction - 4)))
