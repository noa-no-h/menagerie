df <- df %>%
filter(subject %in% demo$subject,
!is.na(factor),
!(subject %in% glitched),
!(subject %in% failed.attn1),
!(subject %in% failed.attn2),
!(subject %in% wrong.trial.num))
length(unique(c(glitched, failed.attn1, failed.attn2, wrong.trial.num))) # 4 glitched, 1 failed attn1, 1 failed attn2, 1 wrong trial num
length(unique(df$subject)) #518 Participants(
length(unique(df$subject[df$factor == 'experience'])) # 277 experience)
length(unique(df$subject[df$factor == 'control'])) # 241 control
length(unique(demo$subject)) # 518 Participants
print(sum(is.na(df$factor)))
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# color palettes
exp_control <- c("#F37121", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
# Load data ---------------------------------------------------------------
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")),
introspect_rating = introspect_rating - 10)
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
length(unique(demo$subject)) # 606 Participants
## Exclusion
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 1
failed.attn1 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
length(unique(wrong.trial.num))
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
print(sum(is.na(df$factor)))
length(unique(df$subject[is.na(df$factor)]))
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# color palettes
exp_control <- c("#F37121", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
# Load data ---------------------------------------------------------------
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")),
introspect_rating = introspect_rating - 10)
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
length(unique(demo$subject)) # 606 Participants
## Exclusion
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 1
failed.attn1 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
length(unique(wrong.trial.num))
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
length(unique(df$subject[is.na(df$factor)]))
df$subject[is.na(df$factor)]
View(df)
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# color palettes
exp_control <- c("#F37121", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
# Load data ---------------------------------------------------------------
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")),
introspect_rating = introspect_rating - 10)
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
length(unique(demo$subject)) # 606 Participants
## Exclusion
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 1
failed.attn1 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
length(unique(wrong.trial.num))
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
length(unique(df$subject[is.na(df$factor)]))
length(unique(df$subject[is.na(df$factor)]))
length(unique(demo$subject[is.na(df$factor)]))
# Assuming 'df' is your dataframe from pilot1_data.csv after the initial 'mutate' for 'factor'
# And 'demo$subject' contains your 606 unique participant IDs
# 1. Filter df to include only subjects present in the demo$subject list
df_filtered_to_demo_subjects <- df %>%
filter(subject %in% demo$subject)
# 2. Get the unique factor status for each of these demo subjects
#    This assumes 'factor' should be the same for all rows of a given subject.
#    If a subject has both NA and non-NA factor entries (which would be a data issue),
#    'any(is.na(factor))' would flag them as having an NA factor.
subject_factor_summary <- df_filtered_to_demo_subjects %>%
group_by(subject) %>%
summarize(
has_na_factor = any(is.na(factor)), # More robust if factor might be inconsistent per subject
# or, if you are certain factor is consistent for a subject's rows:
# factor_value = first(factor)
) %>%
ungroup()
# 3. Count how many of these demo subjects have NA for factor
num_demo_subjects_with_na_factor <- subject_factor_summary %>%
filter(has_na_factor == TRUE) %>% # or filter(is.na(factor_value)) if using that approach
summarize(count = n()) %>%
pull(count)
print(paste("Correct count of demo subjects with NA factor:", num_demo_subjects_with_na_factor))
df_filtered_to_demo_subjects <- df %>%
filter(subject %in% demo$subject)
print(paste("Correct count of demo subjects with NA factor:", num_demo_subjects_with_na_factor))
length(unique(df$subject[is.na(df$factor)]))
length(unique(df$demo[is.na(df$factor)])) #699
length(unique(df$demo[is.na(df$factor)])) #699
length(unique(c(glitched, failed.attn1, failed.attn2, wrong.trial.num))) # 4 glitched, 1 failed attn1, 1 failed attn2, 1 wrong trial num
length(unique(demo$subject[is.na(df$factor)]))
nofactor = df %>% filter(is.na(factor)) %>%
pull(subject)
nofactor
nofactor = df %>%
filter(subject %in% demo$subject,
is.na(factor)) %>%
pull(subject)
nofactor
df_subjects_in_demo <- df %>%
filter(subject %in% demo$subject)
summary(df_subjects_in_demo$factor)
# or
df_subjects_in_demo %>% count(is.na(factor))
subjects_only_na_factor <- df %>%
filter(subject %in% demo$subject) %>% # Keep only rows for subjects found in demo
group_by(subject) %>%               # Group the data by subject
summarise(
# For each subject, check if ALL values in the 'factor' column are NA
all_factor_is_na = all(is.na(factor))
) %>%
filter(all_factor_is_na == TRUE) %>% # Keep only those subjects where the condition was TRUE
pull(subject)
length(subjects_only_na_factor)
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# color palettes
exp_control <- c("#F37121", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
# Load data ---------------------------------------------------------------
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")),
introspect_rating = introspect_rating - 10)
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
length(unique(demo$subject)) # 606 Participants
## Exclusion
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 1
failed.attn1 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
length(unique(wrong.trial.num))
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
length(unique(df$subject))
length(unique(demo$subject)) # 699
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# color palettes
exp_control <- c("#F37121", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
# Load data ---------------------------------------------------------------
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")),
introspect_rating = introspect_rating - 10)
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
length(unique(demo$subject)) # 606 Participants
## Exclusion
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 1
failed.attn1 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
length(unique(wrong.trial.num))
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
length(unique(demo$subject)) # 606
nofactor = df %>%
filter(subject %in% demo$subject,
is.na(factor)) %>%
pull(subject)
df <- df %>%
filter(subject %in% demo$subject,
#!is.na(factor),
!(subject %in% glitched),
!(subject %in% failed.attn1),
!(subject %in% failed.attn2),
!(subject %in% wrong.trial.num))
length(unique(c(glitched, failed.attn1, failed.attn2, wrong.trial.num))) # 31
length(unique(df$subject)) #518 Participants(
length(unique(df$subject[df$factor == 'experience'])) # 277 experience)
length(unique(df$subject[df$factor == 'control'])) # 241 control
length(unique(c(glitched, failed.attn1, failed.attn2, wrong.trial.num))) # 31
nofactor = df %>%
filter(subject %in% demo$subject,
is.na(factor)) %>%
pull(subject)
df <- df %>%
filter(subject %in% demo$subject,
!is.na(factor),
!(subject %in% glitched),
!(subject %in% failed.attn1),
!(subject %in% failed.attn2),
!(subject %in% wrong.trial.num))
length(unique(c(glitched, failed.attn1, failed.attn2, wrong.trial.num))) # 98
length(unique(df$subject)) #518 Participants(
length(unique(df$subject[df$factor == 'experience'])) # 277 experience)
length(unique(df$subject[df$factor == 'control'])) # 241 control
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
# color palettes
exp_control <- c("#F37121", "#4793AF")
exp_neutral_control <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# Load data ---------------------------------------------------------------
data <- read.csv('pilot2_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")),
introspect_rating = as.numeric(introspect_rating), # make numeric
introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating, # reverse-coded ones
introspect_rating),
introspect_rating = introspect_rating - 50 # center around midpoint of zero
)
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot2_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot2_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
print(median(demographics$total_time))
all_potential_exclusions <- c(attention_exclude, tab_away_exclude)
to_exclude <- unique(all_potential_exclusions)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude,
!is.na(factor),
!(subject == "62d06d1b651d6922f62fab9b" & factor == "control"),
!(subject == "672cbd3e4db513bd8523d57f" & factor == "control"))
length(unique(data$subject)) #206 Participants(
length(unique(data$subject[data$factor == 'experience'])) # 100 experience)
length(unique(data$subject[data$factor == 'control'])) # 106 control
