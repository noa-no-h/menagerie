blur_histogram_data <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n(), more_than_twelve = as.numeric(n() > 12))
##View(attention_exclude)
#blur histogram
ggplot(blur_histogram_data, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
demographics <- read.csv('full_pilot_demo.csv') %>%
arrange(subject)
time_exclude <- demographics %>%
mutate(total_time = total_time/60000)
View(time_exclude)
ggplot(time_exclude, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude)
p.vals = c()
#font_import(pattern = "Optima", prompt = FALSE)
loadfonts(device = "pdf")
#data <- read.csv('November_2024_pilot.csv') %>%
data_with_seen_before <- read.csv('full_pilot.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded"))) %>%
mutate(introspect_rating = as.numeric(introspect_rating))
View(data_with_seen_before)
familiarity_percentage <- data_with_seen_before %>%
group_by(task_name) %>%
summarise(total_responses = n(),
yes_responses = sum(familiarity == "Yes")) %>%
mutate(percentage_yes = (yes_responses / total_responses) * 100)
ggplot(familiarity_percentage, aes(x = fct_reorder(task_name, percentage_yes, .desc = TRUE), y = percentage_yes)) +
geom_bar(stat = "identity", fill = "sky blue") +
geom_text(aes(label = paste0(round(percentage_yes, 1), "%", " ", task_name), y = 0),
vjust = 0,
angle = 90,
color = "black",
family = "Optima",
size = 5,
hjust = 0) +
labs(title = "Percent Familiar With Each Task",
x = "Task",
y = "Percent Familiar") +
theme_custom()+
theme(axis.text.x = element_blank())
halo_bar_data <- data %>%
filter(task_name == "halo") %>%
mutate(choice = as.numeric(choice))%>%
mutate(auxiliary_info1 = as.numeric(auxiliary_info1))%>%
filter(stimulus != "") %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
)
)
summary_halo_data <- halo_bar_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_halo_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
labs(title = "Average Persuasiveness by Attractiveness", x = "Condition", y = "Average Choice") +
theme_custom()+
scale_fill_manual(values = in_neutral_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
summary_halo_data <- data %>%
filter(task_name == "halo", stimulus == "") %>%
group_by(factor) %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded"))) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary_halo_data, aes(x = factor, y = mean_introspect_rating, fill = factor)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Halo Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+   scale_y_continuous(limits = c(0, 100))
halo_data <- data %>%
filter(task_name == "halo") %>%
filter(familiarity == "") %>%
mutate(choice = as.numeric(choice)) %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
)
)
# Find subjects who gave higher median scores to attractive than unattractive
subject_list_included_and_affected <- halo_data %>%
# Step 1: Calculate median choice for each subject under "attractive" condition
filter(condition == "attractive") %>%
group_by(subject) %>%
summarize(median_choice_attractive = median(choice, na.rm = TRUE)) %>%
# Step 2: Join with median choice for "unattractive" condition
inner_join(
halo_data %>%
filter(condition == "unattractive") %>%
group_by(subject) %>%
summarize(median_choice_unattractive = median(choice, na.rm = TRUE)),
by = "subject"
) %>%
# Step 3: Filter subjects where median choice for "attractive" is higher than "unattractive"
filter(median_choice_attractive > median_choice_unattractive) %>%
# Pull the subject list
pull(subject)
View(subject_list_included_and_affected)
# List of all subjects in "Factor-Included"
all_subjects_included = halo_data %>%
filter(factor == "Factor-Included") %>%
pull(subject)
subject_list_included_and_not_higher_than_median = setdiff(all_subjects_included, subject_list_included_and_affected)
halo_data <- data %>%
filter(task_name == "halo") %>%
filter(familiarity == "") %>%
mutate(effect_group = case_when(
factor == "Factor-Excluded" ~ "Excluded",
subject %in% subject_list_included_and_higher_than_median ~ "Included and Higher Than Median",
TRUE ~ "Included and Not Higher Than Median",
)) %>%
mutate(effect_group = factor(effect_group, levels = c("Included and Higher Than Median", "Included and Not Higher Than Median", "Excluded")))
halo_data <- data %>%
filter(task_name == "halo") %>%
filter(familiarity != "") %>%
mutate(effect_group = case_when(
factor == "Factor-Excluded" ~ "Excluded",
subject %in% subject_list_included_and_higher_than_median ~ "Included and Shows Effect",
TRUE ~ "Included and Doesn't Show Effect",
)) %>%
mutate(effect_group = factor(effect_group, levels = c("Included and Shows Effect", "Included and Doesn't Show Effect", "Excluded")))
summary_halo_data <- halo_data %>%
group_by(effect_group) %>%
summarize(
mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary_halo_data, aes(x = effect_group, y = mean_introspect_rating, fill = effect_group)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Halo Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()  +
scale_fill_manual(values = three_colors) +
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+   scale_y_continuous(limits = c(0, 100))
summary(lm(introspect_rating ~ effect_group, data = halo_data))
halo_introspection <- data %>%
filter(task_name == "halo") %>%
filter(introspect_rating != "") %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
)
)
halo_data <- data %>%
filter(task_name == "halo") %>%
filter(familiarity == "") %>%
mutate(choice = as.numeric(choice)) %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
)
)
halo_data_included <- halo_data %>%
# Step 1: Calculate median choice for each subject under "attractive" condition
filter(condition == "attractive") %>%
group_by(subject) %>%
summarize(median_choice_attractive = median(choice, na.rm = TRUE)) %>%
# Step 2: Join with median choice for "unattractive" condition
inner_join(
halo_data %>%
filter(condition == "unattractive") %>%
group_by(subject) %>%
summarize(median_choice_unattractive = median(choice, na.rm = TRUE)),
by = "subject"
)%>%
left_join(halo_introspection %>% select(subject, introspect_rating), by = "subject") %>%
summarize(factor = "Factor Included",
affected = if_else(median_choice_attractive > median_choice_unattractive,
"Affected by Bias",
"Not Affected by Bias"),
introspect_rating=introspect_rating,
)%>%
filter(!is.na(introspect_rating))
View(halo_data_included)
halo_data_excluded = halo_data %>%
filter(factor == "Factor-Excluded") %>%
group_by(subject) %>%
summarize(median_choice = median(choice, na.rm = TRUE))  %>%
left_join(halo_introspection %>% select(subject, introspect_rating), by = "subject") %>%
summarize(factor = "Factor Excluded",
affected = "Not Affected by Bias",
introspect_rating=introspect_rating,
)%>%
filter(!is.na(introspect_rating))
halo_combined <- rbind(halo_data_included, halo_data_excluded) %>%
mutate(factor = factor(factor, levels = c("Factor Included", "Factor Excluded")))
summary_halo <- halo_combined %>%
group_by(factor, affected) %>%
summarise(
mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating),
n = n()
)
ggplot(summary_halo, aes(x = factor, y = mean_introspect_rating, fill = affected, group = affected)) +
theme_custom() +
geom_bar(stat = "identity", position = position_dodge(0.9)) +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = paste("n =", n), x = stage(factor, after_stat = x - .9 / 2 / 2), y = mean_introspect_rating),
hjust = 0, vjust=-0.35, family = "optima", size = 4, position = position_dodge(0.9)) +
geom_text(aes(label = str_wrap(affected, width = 10), y = 15, color = affected),
position = position_dodge(0.9), vjust = 0, family = "optima", size = 5, lineheight = 0.8) +
labs(title = "Halo Effect Introspection", x = "", y = "Introspection Rating") +
scale_fill_manual(values = effect_no) +
scale_color_manual(values = c("Affected by Bias" = "white", "Not Affected by Bias" = "black")) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14)) +
guides(fill = FALSE, color = FALSE) +
scale_y_continuous(limits = c(0, 100))
summary(lm(introspect_rating ~ effect_group, data = halo_data))
hindsight_late <- data %>%
filter(task_name == "hindsight") %>%
filter(as.numeric(choice)<2000000000) %>%
filter(as.Date(timestamp) > as.Date("2024-11-07")) %>%
filter(!(subject %in% c("6109ca40ef8f38498af102ff",
"670b086620f71c5b6cc49abc",
"5a93bb216475f900019fa294"))) %>%
filter(choice != "") %>%
mutate(auxiliary_info1 = as.numeric(auxiliary_info1))
convert_to_numeric <- function(values) {
# Remove all commas
values <- gsub(",", "", values)
# Handle ' million', ' Million', 'M'
millions <- grepl(" million| milliion| millon| mil| Million|M", values)
values[millions] <- as.numeric(gsub(" million| milliion| millon| mil| Million|M", "", values[millions])) * 1e6
# Handle 'k'
thousands <- grepl("k", values, ignore.case = TRUE)
values[thousands] <- as.numeric(gsub("k|K", "", values[thousands])) * 1e3
# Attempt to convert the rest directly to numeric
values[!millions & !thousands] <- suppressWarnings(as.numeric(values[!millions & !thousands]))
return(values)
}
true_values <- c(
Pakistan = 203177034,
Nigeria = 199045324,
Mexico = 131738729,
Vietnam = 97074662,
The_Democratic_Republic_of_the_Congo = 85705256,
Thailand = 69256846,
Tanzania = 60229204,
South_Korea = 51273440,
Colombia = 49705306,
Uganda = 45169147,
Ukraine = 43877093,
Malaysia = 32294009,
North_Korea = 25683863,
Niger = 22850032,
Burkina_Faso = 20106983,
Romania = 19519762,
Zimbabwe = 17154637,
The_Netherlands = 17114912,
Somalia = 14600000,
Guinea = 13270289,
Benin = 11683042,
Haiti = 11193952,
Greece = 11133944,
The_Czech_Republic = 10629078,
Azerbaijan = 9980369
)
View(hindsight_data)
hindsight_early <- data %>%
filter(task_name == "hindsight bias") %>%
filter(!(subject %in% c("66749b876f32a4ad246db5da","5f2d95153c1140074cc81b4c","667469ea0d42f70a9a75567b","667444e5662b7a4ebf82d5e1","665c6f67d9ea69740afbcab8","6273238a4a8b39041ff1bd2c", "664d3c950d24d83ca7b4dd68", "6020606d7b0258677b881f63", "6159fe7811a7e1b94401c33f"))) %>%
mutate(parsed_choice = convert_to_numeric(choice)) %>%
filter(parsed_choice != "NA") %>%
mutate(which_estimate = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first",
str_detect(auxiliary_info1, "_recall_original_response") ~ "recall",
TRUE ~ NA_character_
)) %>%
mutate(stimulus = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first estimate",
str_detect(auxiliary_info1, "_recall_original_response") ~ "memory",
TRUE ~ NA_character_
)) %>%
# Extract the country name
mutate(country = case_when(
str_detect(auxiliary_info1, "_estimate") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_estimate)"),
str_detect(auxiliary_info1, "_recall") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_recall)"),
TRUE ~ NA_character_
))%>%
mutate(true_value = true_values[country])%>%
mutate(auxiliary_info1 = as.numeric(true_value) - as.numeric(parsed_choice))%>%
mutate(condition = factor)
View(hindsight_early)
omission_data <- data %>%
filter(task_name == "omission principle") %>%
mutate(choice = as.numeric(choice))
summary_omission_data <- omission_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("commission", "omission"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_omission_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Omission Principle", x = "Condition", y = "Forbidden to Obligatory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
t.test(choice ~ factor, data = omission_data)
recognition_data <- data %>%
filter(task_name == "recognition: city") %>%
filter(factor == "Factor-Included")
count_recognition_data <- recognition_data %>%
count(auxiliary_info1)
ggplot(count_recognition_data, aes(x = auxiliary_info1, y = n, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
labs(title = "Recognition Effect for City Population", x = "Within Factor-Included", y = "Count") +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
count_data <- table(recognition_data$auxiliary_info1)
chisq_test <- chisq.test(count_data)
print(chisq_test)
reference_price_data <- data %>%
filter(task_name == "reference price") %>%
mutate(choice_parsed = parse_number(choice))
summary_reference_price_data <- reference_price_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("hotel", "motel"))) %>%
summarize(
mean_choice = mean(choice_parsed),
se_choice = se(choice_parsed),
count = n()
)
ggplot(summary_reference_price_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Amount Willing to Pay for Beer", x = "Condition", y = "Average Amount Willing to Pay (Dollars)") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
t.test(choice_parsed ~ factor, data = reference_price_data)
summary_reference_price_data <- reference_price_data %>%
group_by(condition) %>%
summarize(
mean_introspect_rating = 100-mean(introspect_rating),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary_reference_price_data, aes(x = condition, y = mean_introspect_rating, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Reference Price Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+   scale_y_continuous(limits = c(0, 100))
t.test(introspect_rating ~ factor, data = reference_price_data)
representativeness_data <- data %>%
filter(task_name == "rep") %>%
mutate(choice = as.numeric(choice))
summary_representativeness_data <- representativeness_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_representativeness_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Is Jack an Engineer?", x = "Condition", y = "average likelihood of engineer") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
status_quo_data <- data %>%
filter(task_name == "status_quo") %>%
mutate(choice_binary = as.numeric(choice == "70/30"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
summary_status_quo_data <- status_quo_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice_binary),
se_choice = se.prop(choice_binary),
count = n()
)
ggplot(summary_status_quo_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Choices to continue the status quo", x = "Condition", y = "Percent subjects who recommended the status quo") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
#analysis -- is there a better way to do this?
prop_ex <- sum(status_quo_choices_ex) / length(status_quo_choices_ex)
prop_in <- sum(status_quo_choices_in) / length(status_quo_choices_in)
successes <- c(sum(status_quo_choices_ex), sum(status_quo_choices_in))
trials <- c(length(status_quo_choices_ex), length(status_quo_choices_in))
test_result <- prop.test(successes, trials, alternative = "less")
status_quo_choices_ex <- status_quo_data %>%
filter(factor == "Factor-Excluded") %>%
pull(choice_binary)
status_quo_choices_in <- status_quo_data %>%
filter(factor == "Factor-Included") %>%
pull(choice_binary)
#analysis -- is there a better way to do this?
prop_ex <- sum(status_quo_choices_ex) / length(status_quo_choices_ex)
prop_in <- sum(status_quo_choices_in) / length(status_quo_choices_in)
successes <- c(sum(status_quo_choices_ex), sum(status_quo_choices_in))
trials <- c(length(status_quo_choices_ex), length(status_quo_choices_in))
test_result <- prop.test(successes, trials, alternative = "less")
print(test_result)
summary_status_quo_data <- status_quo_data %>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded"))) %>%
group_by(condition) %>%
summarize(
mean_introspect_rating = 100-mean(introspect_rating),
se_introspect_rating = se(introspect_rating)
)
View(summary_status_quo_data)
ggplot(summary_status_quo_data, aes(x = condition, y = mean_introspect_rating, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Status Quo Introspection Ratings", x = "Condition", y = "Introspection rating") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+   scale_y_continuous(limits = c(0, 100))
sunk_cost_data <- data %>%
filter(task_name == "sunk_cost effect")
percentage_sunk_cost_data <- sunk_cost_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("Sunk Cost", "No Sunk Cost"))) %>%
summarize(
total_in_condition = n(),  # Total number of subjects in each condition
solar_powered_count = sum(choice == "Solar-powered Pump")  # Count who chose "Solar-powered pump"
) %>%
mutate(percentage_solar_powered = (solar_powered_count / total_in_condition) * 100)
ggplot(percentage_sunk_cost_data, aes(x = condition, y = percentage_solar_powered, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Percentage Switching Projects by Condition", x = "Condition", y = "Percentage of Choices to Switch") +
geom_text(aes(label = paste0("n=", total_in_condition)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
solar_powered_counts <- percentage_sunk_cost_data$solar_powered_count
total_counts <- percentage_sunk_cost_data$total_in_condition
prop_test_result <- prop.test(solar_powered_counts, total_counts)
print(prop_test_result)
length(unique(data$subject))
length(unique(sunk_cost_data$subject))
ggplot(percentage_sunk_cost_data, aes(x = condition, y = percentage_solar_powered, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Percentage Switching Projects by Condition", x = "Condition", y = "Percentage of Choices to Switch") +
geom_text(aes(label = paste0("n=", total_in_condition)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
View(sunk_cost_data)
sunk_cost_data <- data %>%
filter(task_name == "sunk_cost effect") %>%
mutate(switched = choice == 'Solar-powered Pump')
summary(glm(switched ~ condition, sunk_cost_data))
summary(glm(switched ~ condition, data = sunk_cost_data, family = 'binomial'))
