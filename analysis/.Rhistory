View(whale_subject_showing_effect)
antarctic_subject_showing_effect <- data_anchoring %>%
filter(stimulus == 'Antarctic Temperature') %>%
filter(condition == 'Low Anchor') %>%
filter(choice < median_antarctic) %>%
pull(subject)
View(antarctic_subject_showing_effect)
anchored_affected_introspection <- data_anchoring %>%
filter(subject %in% antarctic_subject_showing_effect) %>%
filter(factor == 'Factor-Included') %>%
pull(introspect_rating)
View(anchored_affected_introspection)
View(anchored_affected_introspection)
anchored_affected_introspection
introspection_anchoring <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
anchored_affected_introspection <- data_anchoring %>%
filter(subject %in% antarctic_subject_showing_effect) %>%
filter(factor == 'Factor-Included') %>%
pull(introspect_rating)
View(anchored_affected_introspection)
introspection_anchoring <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
anchored_affected_introspection <- introspection_anchoring %>%
filter(subject %in% antarctic_subject_showing_effect) %>%
filter(factor == 'Factor-Included') %>%
pull(introspect_rating)
View(anchored_affected_introspection)
introspection_anchoring <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
anchored_affected_introspection <- introspection_anchoring %>%
filter(subject %in% antarctic_subject_showing_effect) %>%
filter(factor == 'Factor-Included') %>%
pull(introspect_rating)
anchored_unaffected_introspection <- introspection_anchoring %>%
filter(!subject %in% antarctic_subject_showing_effect) %>%
filter(factor == 'Factor-Included') %>%
pull(introspect_rating)
unanchored_introspection <- introspection_anchoring %>%
filter(factor == 'Factor-Excluded') %>%
pull(introspect_rating)
# Calculate means and standard errors
mean_se <- function(x) {
mean_x <- mean(x, na.rm = TRUE)
se_x <- sd(x, na.rm = TRUE) / sqrt(length(x))
return(c(mean = mean_x, se = se_x))
}
# Calculate statistics for each group
anchored_affected_stats <- mean_se(anchored_affected_introspection)
anchored_unaffected_stats <- mean_se(anchored_unaffected_introspection)
unanchored_stats <- mean_se(unanchored_introspection)
# Create a data frame for plotting
data_plot <- data.frame(
Group = c("Anchored Affected", "Anchored Unaffected", "Unanchored"),
Mean = c(anchored_affected_stats["mean"], anchored_unaffected_stats["mean"], unanchored_stats["mean"]),
SE = c(anchored_affected_stats["se"], anchored_unaffected_stats["se"], unanchored_stats["se"])
)
# Plot the data
ggplot(data_plot, aes(x = Group, y = Mean)) +
geom_bar(stat = "identity", position = "dodge", fill = "skyblue") +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.2, position = position_dodge(0.9)) +
labs(title = "Comparison of Introspection Ratings",
x = "Group",
y = "Introspection Rating") +
theme_minimal()
View(anchored_affected_introspection)
View(anchored_unaffected_introspection)
View(unanchored_introspection)
View(unanchored_introspection)
mean_se <- function(x) {
mean_x <- mean(x, na.rm = TRUE)
se_x <- sd(x, na.rm = TRUE) / sqrt(length(x))
return(c(mean = mean_x, se = se_x))
}
# Calculate statistics for each group
anchored_affected_stats <- mean_se(anchored_affected_introspection)
introspection_anchoring <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "") %>%
mutate(introspect_rating = as.numeric(introspect_rating))
anchored_affected_introspection <- introspection_anchoring %>%
filter(subject %in% antarctic_subject_showing_effect) %>%
filter(factor == 'Factor-Included') %>%
pull(introspect_rating)
anchored_unaffected_introspection <- introspection_anchoring %>%
filter(!subject %in% antarctic_subject_showing_effect) %>%
filter(factor == 'Factor-Included') %>%
pull(introspect_rating)
unanchored_introspection <- introspection_anchoring %>%
filter(factor == 'Factor-Excluded') %>%
pull(introspect_rating)
#View(anchored_affected_introspection)
#View(anchored_unaffected_introspection)
#View(unanchored_introspection)
# Calculate statistics for each group
anchored_affected_stats <- mean_se(anchored_affected_introspection)
anchored_unaffected_stats <- mean_se(anchored_unaffected_introspection)
unanchored_stats <- mean_se(unanchored_introspection)
# Create a data frame for plotting
data_plot <- data.frame(
Group = c("Anchored Affected", "Anchored Unaffected", "Unanchored"),
Mean = c(anchored_affected_stats["mean"], anchored_unaffected_stats["mean"], unanchored_stats["mean"]),
SE = c(anchored_affected_stats["se"], anchored_unaffected_stats["se"], unanchored_stats["se"])
)
# Plot the data
ggplot(data_plot, aes(x = Group, y = Mean)) +
geom_bar(stat = "identity", position = "dodge", fill = "skyblue") +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.2, position = position_dodge(0.9)) +
labs(title = "Comparison of Introspection Ratings",
x = "Group",
y = "Introspection Rating") +
theme_minimal()
t_test_result <- t.test(anchored_affected_introspection, unanchored_introspection, var.equal = TRUE)
print(t_test_result)
t_test_result <- t.test(anchored_affected_introspection, unanchored_introspection, var.equal = TRUE, alternative = "greater")
print(t_test_result)
t_test_result <- t.test(anchored_affected_introspection, unanchored_introspection, var.equal = TRUE, alternative = "less")
print(t_test_result)
t_test_result <- t.test(anchored_affected_introspection, unanchored_introspection, var.equal = TRUE)
print(t_test_result)
associative_data <- data %>%
filter(task_name == "associative memory") %>%
filter(stimulus != "") %>%
mutate(false_alarm = ifelse(choice == "Original" & auxiliary_info1 == "New", 1, 0))
factor_ex_associative = associative_data %>%
filter(factor == "Factor-Excluded")
factor_in_associative = associative_data %>%
filter(factor == "Factor-Included")
false_alarm_summary <- associative_data %>%
group_by(factor) %>%
summarize(count_false_alarm = sum(false_alarm))
ggplot(false_alarm_summary, aes(x = factor, y = count_false_alarm)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Count of False Alarms by Condition",
x = "Condition",
y = "Count of False Alarms") +
theme_minimal()
df.mem = df %>% filter(task_name == 'associative memory') %>%
mutate(choice.fac = factor(choice))
mem.unfamiliar <- df.mem %>% filter(familiarity == "No")
df.mem.include <- df.mem %>%
filter(subject %in% mem.unfamiliar$subject) %>%
filter(factor == 'Factor-Included') %>%
filter(auxiliary_info1 == 'New')
length(unique(df.mem.include$subject))
#** data visualization ----
ggplot(df.mem.include, aes(x = condition, fill = choice)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
false_alarm_ex <- associative_data %>%
filter(factor == "Factor-Excluded") %>%
pull(false_alarm)
false_alarm_in <- associative_data %>%
filter(factor == "Factor-Included") %>%
pull(false_alarm)
prop_ex <- sum(false_alarm_ex) / length(false_alarm_ex)
prop_in <- sum(false_alarm_in) / length(false_alarm_in)
successes <- c(sum(false_alarm_ex), sum(false_alarm_in))
trials <- c(length(false_alarm_ex), length(false_alarm_in))
test_result <- prop.test(successes, trials, alternative = "less")
print(test_result)
associative_data <- data %>%
filter(task_name == "associative memory") %>%
filter(stimulus != "") %>%
mutate(false_alarm = ifelse(choice == "Original" & auxiliary_info1 == "New", 1, 0))
factor_ex_associative = associative_data %>%
filter(factor == "Factor-Excluded")
factor_in_associative = associative_data %>%
filter(factor == "Factor-Included")
false_alarm_summary <- associative_data %>%
group_by(factor) %>%
summarize(count_false_alarm = sum(false_alarm))
ggplot(false_alarm_summary, aes(x = factor, y = count_false_alarm)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Count of False Alarms by Condition",
x = "Condition",
y = "Count of False Alarms") +
theme_minimal()
#analysis
false_alarm_ex <- associative_data %>%
filter(factor == "Factor-Excluded") %>%
pull(false_alarm)
false_alarm_in <- associative_data %>%
filter(factor == "Factor-Included") %>%
pull(false_alarm)
prop_ex <- sum(false_alarm_ex) / length(false_alarm_ex)
prop_in <- sum(false_alarm_in) / length(false_alarm_in)
successes <- c(sum(false_alarm_ex), sum(false_alarm_in))
trials <- c(length(false_alarm_ex), length(false_alarm_in))
test_result <- prop.test(successes, trials, alternative = "less")
print(test_result)
ggplot(false_alarm_summary, aes(x = factor, y = count_false_alarm)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = count_false_alarm - se_false_alarm, ymax = count_false_alarm + se_false_alarm),
width = 0.2) +
labs(title = "Count of False Alarms by Condition",
x = "Condition",
y = "Count of False Alarms") +
theme_minimal()
associative_data <- data %>%
filter(task_name == "associative memory") %>%
filter(stimulus != "") %>%
mutate(false_alarm = ifelse(choice == "Original" & auxiliary_info1 == "New", 1, 0))
factor_ex_associative = associative_data %>%
filter(factor == "Factor-Excluded")
factor_in_associative = associative_data %>%
filter(factor == "Factor-Included")
false_alarm_summary <- associative_data %>%
group_by(factor) %>%
summarize(
count_false_alarm = sum(false_alarm),
se_false_alarm = sd(false_alarm) / sqrt(n())  # Calculate the standard error
)
ggplot(false_alarm_summary, aes(x = factor, y = count_false_alarm)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = count_false_alarm - se_false_alarm, ymax = count_false_alarm + se_false_alarm),
width = 0.2) +
labs(title = "Count of False Alarms by Condition",
x = "Condition",
y = "Count of False Alarms") +
theme_minimal()
print(false_alarm_summary)
View(false_alarm_summary)
false_alarm_summary <- associative_data %>%
group_by(factor) %>%
summarize(
count_false_alarm = sum(false_alarm),
n = n(),  # Number of observations
p = mean(false_alarm),  # Proportion of false alarms
se_false_alarm = sqrt(p * (1 - p) / n)  # Calculate the standard error for binomial data
)
View(false_alarm_summary)
ggplot(false_alarm_summary, aes(x = factor, y = count_false_alarm)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = count_false_alarm - se_false_alarm, ymax = count_false_alarm + se_false_alarm),
width = 0.2) +
labs(title = "Count of False Alarms by Condition",
x = "Condition",
y = "Count of False Alarms") +
theme_minimal()
false_alarm_summary <- associative_data %>%
group_by(factor) %>%
summarize(
count_false_alarm = sum(false_alarm),
n = n(),  # Number of observations
p = mean(false_alarm),  # Proportion of false alarms
se_false_alarm = sqrt(p * (1 - p) / n)  # Calculate the standard error for binomial data
)
ggplot(false_alarm_summary, aes(x = factor, y = count_false_alarm)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = count_false_alarm - se_false_alarm, ymax = count_false_alarm + se_false_alarm),
width = 0.2) +
labs(title = "Count of False Alarms by Condition",
x = "Condition",
y = "Count of False Alarms") +
theme_minimal()
View(false_alarm_summary)
#plot
associative_data <- data %>%
filter(task_name == "associative memory") %>%
filter(stimulus != "") %>%
mutate(false_alarm = ifelse(choice == "Original" & auxiliary_info1 == "New", 1, 0))
factor_ex_associative = associative_data %>%
filter(factor == "Factor-Excluded")
factor_in_associative = associative_data %>%
filter(factor == "Factor-Included")
false_alarm_summary <- associative_data %>%
group_by(factor) %>%
summarize(
count_false_alarm = sum(false_alarm),
n = n(),
p = mean(false_alarm),
se_false_alarm = sqrt(p * (1 - p) / n)  # standard error for binomial
)
View(false_alarm_summary)
ggplot(false_alarm_summary, aes(x = factor, y = count_false_alarm)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = count_false_alarm - se_false_alarm, ymax = count_false_alarm + se_false_alarm),
width = 0.2) +
labs(title = "Count of False Alarms by Condition",
x = "Condition",
y = "Count of False Alarms") +
theme_minimal()
false_alarm_ex <- associative_data %>%
filter(factor == "Factor-Excluded") %>%
pull(false_alarm)
false_alarm_in <- associative_data %>%
filter(factor == "Factor-Included") %>%
pull(false_alarm)
prop_ex <- sum(false_alarm_ex) / length(false_alarm_ex)
prop_in <- sum(false_alarm_in) / length(false_alarm_in)
successes <- c(sum(false_alarm_ex), sum(false_alarm_in))
trials <- c(length(false_alarm_ex), length(false_alarm_in))
test_result <- prop.test(successes, trials, alternative = "less")
print(test_result)
false_alarm_ex <- associative_data %>%
filter(factor == "Factor-Excluded") %>%
pull(false_alarm)
false_alarm_in <- associative_data %>%
filter(factor == "Factor-Included") %>%
pull(false_alarm)
prop_ex <- sum(false_alarm_ex) / length(false_alarm_ex)
prop_in <- sum(false_alarm_in) / length(false_alarm_in)
successes <- c(sum(false_alarm_ex), sum(false_alarm_in))
trials <- c(length(false_alarm_ex), length(false_alarm_in))
test_result <- prop.test(successes, trials, alternative = "less")
print(test_result)
associative_data <- data %>%
filter(task_name == "associative memory") %>%
filter(introspect_rating != "") %>%
filter(familiarity == "No")
summary_data <- associative_data %>%
group_by(factor) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = sd(as.numeric(introspect_rating), na.rm = TRUE) / sqrt(n())
)
#View(associative_data)
ggplot(summary_data, aes(x = factor, y = mean_introspect_rating)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Difference in Introspect Rating between Factors",
x = "Group",
y = "Mean Introspect Rating") +
theme_minimal()
ggplot(summary_data, aes(x = factor, y = mean_introspect_rating)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Introspection Rating in Factor-Excluded and Factor-Included",
x = "Group",
y = "Mean Introspect Rating") +
theme_minimal()
factor_ex_introspect <- associative_data %>%
filter(factor == "Factor-Excluded") %>%
mutate(introspect_rating = as.numeric(introspect_rating)) %>%
pull(introspect_rating)
factor_in_introspect <- associative_data %>%
filter(factor == "Factor-Included") %>%
mutate(introspect_rating = as.numeric(introspect_rating)) %>%
pull(introspect_rating)
t_test_result <- t.test(factor_ex_introspect, factor_in_introspect, var.equal = TRUE)
print(t_test_result)
ggplot(summary_data, aes(x = factor, y = mean_introspect_rating)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Associative Memory Introspection",
x = "Group",
y = "Mean Introspect Rating") +
theme_minimal()
associative_data <- data %>%
filter(task_name == "associative memory") %>%
filter(stimulus != "") %>%
mutate(false_alarm = ifelse(choice == "Original" & auxiliary_info1 == "New", 1, 0))
factor_ex_associative = associative_data %>%
filter(factor == "Factor-Excluded")
factor_in_associative = associative_data %>%
filter(factor == "Factor-Included")
false_alarm_summary <- associative_data %>%
group_by(factor) %>%
summarize(
count_false_alarm = sum(false_alarm),
n = n(),
p = mean(false_alarm),
se_false_alarm = sqrt(p * (1 - p) / n)  # standard error for binomial
)
View(false_alarm_summary)
ggplot(false_alarm_summary, aes(x = factor, y = count_false_alarm)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = count_false_alarm - se_false_alarm, ymax = count_false_alarm + se_false_alarm),
width = 0.2) +
labs(title = "Count of False Alarms by Condition",
x = "Condition",
y = "Count of False Alarms") +
theme_minimal()
availability_data = data %>%
filter(task_name == "availability") %>%
mutate(choice_binary = as.numeric(choice == "List 1"))
ggplot(availability_data, aes(x = factor, fill = choice)) +
geom_bar(position = "dodge") +
labs(title = "Comparison of Choice Between Excluded and Included Factors",
x = "Factor",
y = "Count",
fill = "choice") +
theme_minimal()
availability_data = data %>%
filter(task_name == "availability") %>%
mutate(choice_binary = as.numeric(choice == "List 1"))
ggplot(availability_data, aes(x = factor, fill = choice)) +
geom_bar(position = "dodge") +
geom_errorbar(aes(ymin = count - se * total, ymax = count + se * total),
position = position_dodge(.9), width = 0.25) +
labs(title = "Comparison of Choice Between Excluded and Included Factors",       x = "Factor",
y = "Count",
fill = "choice") +
theme_minimal()
availability_data = data %>%
filter(task_name == "availability") %>%
mutate(choice_binary = as.numeric(choice == "List 1"))
summary_data <- availability_data %>%
group_by(factor, choice) %>%
summarise(
count = n(),
mean = mean(choice_binary),
se = sd(choice_binary) / sqrt(n())
)
ggplot(summary_data, aes(x = factor, y = mean, fill = choice)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se),
position = position_dodge(width = 0.9),
width = 0.25) +
labs(title = "Comparison of Choice Between Excluded and Included Factors",
x = "Factor",
y = "Mean Choice Binary",
fill = "Choice") +
theme_minimal()
ggplot(availability_data, aes(x = factor, fill = choice)) +
geom_bar(position = "dodge") +
labs(title = "Comparison of Choice Between Excluded and Included Factors",
x = "Factor",
y = "Count",
fill = "choice") +
theme_minimal()
ggplot(availability_data, aes(x = factor, fill = choice)) +
geom_bar(position = "dodge") +
labs(title = "Availability Effect",
x = "Factor",
y = "Count",
fill = "choice") +
theme_minimal()
availability_data = data %>%
filter(task_name == "availability") %>%
mutate(choice_binary = as.numeric(choice == "List 1"))
ggplot(availability_data, aes(x = factor, fill = choice)) +
geom_bar(position = "dodge") +
labs(title = "Availability Effect",
x = "Factor",
y = "Count",
fill = "choice") +
theme_minimal()
#analysis
list_one_ex = availability_data %>%
filter(factor == "Factor-Excluded") %>%
pull(choice_binary)
list_one_in = availability_data %>%
filter(factor == "Factor-Included") %>%
pull(choice_binary)
prop_ex <- sum(list_one_ex) / length(list_one_ex)
prop_in <- sum(list_one_in) / length(list_one_in)
successes <- c(sum(list_one_ex), sum(list_one_in))
trials <- c(length(list_one_ex), length(list_one_in))
test_result <- prop.test(successes, trials, alternative = "less")
print(test_result)
halo_bar_data <- data %>%
filter(task_name == "halo") %>%
filter(stimulus != "") %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
)
)
halo_bar_data$choice <- as.numeric(halo_bar_data$choice)
summary_halo_data <- halo_bar_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice, na.rm = TRUE),
se_choice = sd(choice, na.rm = TRUE) / sqrt(n())
)
ggplot(summary_halo_data, aes(x = condition, y = mean_choice)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Average Persuasiveness by Attractiveness", x = "Condition", y = "Average Choice") +
theme_minimal()
anova_model <- aov(choice ~ condition, data = halo_bar_data)
summary(anova_model)
tukey_hsd <- TukeyHSD(anova_model)
print(tukey_hsd)
contact.data = data %>%
filter(task_name == 'contact principle') %>%
mutate(introspect_rating = as.numeric(introspect_rating))
gplot(contact.data, aes(x = condition, fill = choice)) +
geom_bar(position = "dodge", color = 'white') +
theme_black()
ggplot(contact.data, aes(x = condition, fill = choice)) +
geom_bar(position = "dodge", color = 'white') +
theme_black()
contact.data.graph = contact.data %>% group_by(condition) %>%
summarize(choice.m = mean(choice == 'Impermissible'),
choice.se = se.prop(choice == 'Impermissible'))
ggplot(contact.data.graph, aes(x = condition, y = choice.m, fill = condition)) +
geom_col(color = 'white') +
theme_black() +
labs(x = 'Condition', y = '% saying the action\nwas morally wrong') +
geom_errorbar(aes(ymin = choice.m - choice.se,
ymax = choice.m + choice.se),
color = 'white', width = .2) +
scale_fill_manual(values = c("Contact" = "#4FADEA", "No Contact" = "#FFC000")) +
theme(legend.position = 'none')
#** inferential statistics ----
contact <- table(contact.data$choice, contact.data$condition)
contact
contactChi <- chisq.test(contact)
contactChi$expected >= 5
contactChi
