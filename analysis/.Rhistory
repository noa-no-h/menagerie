scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
# Recode the condition levels
anchor_antarctica_data <- anchor_antarctica_data %>%
mutate(condition = recode(condition, "Low Anchor" = "Factor-Included", "No Anchor" = "Factor-Excluded"))
# Make sure that "Factor-Included" is the first level
anchor_antarctica_data <- anchor_antarctica_data %>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
# Specify the Bayesian mixed model
model <- brm(
formula = bf(choice ~ condition + (1 + condition | subject) ),
data = anchor_antarctica_data,
family = gaussian(),  # Default; specifies a linear model for continuous outcome
prior = c(
prior(normal(0, 10), class = "Intercept"),
prior(normal(0, 5), class = "b"),  # Prior on condition effect
prior(exponential(1), class = "sd")  # Prior on standard deviations of random effects
),
iter = 4000,  # Increase if needed for convergence
chains = 4,  # Number of MCMC chains
cores = 4,  # Number of cores for parallel computing
seed = 123  # Seed for reproducibility
)
# Plot the marginal effects with credible intervals
ggplot(condition_effect, aes(x = condition, y = estimate__)) +
geom_bar(stat = "identity", aes(fill = condition), position = position_dodge()) +
geom_errorbar(
aes(ymin = lower__, ymax = upper__), width = 0.2, position = position_dodge(0.9)
) +
labs(title = "Estimated Mean Choice by Factor Condition",
x = "Condition",
y = "Estimated Mean Choice") +
scale_fill_manual(values = in_and_ex) +  # Assuming in_and_ex contains desired colors
theme_minimal() +
guides(fill = FALSE) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
# Plot the marginal effects with credible intervals
ggplot(condition_effect, aes(x = condition, y = estimate__)) +
geom_bar(stat = "identity", aes(fill = condition), position = position_dodge()) +
geom_errorbar(
aes(ymin = lower__, ymax = upper__), width = 0.2, position = position_dodge(0.9)
) +
labs(title = "Estimated Mean Choice by Factor Condition",
x = "Condition",
y = "Estimated Mean Choice") +
scale_fill_manual(values = in_and_ex) +  # Assuming in_and_ex contains desired colors
theme_custom()+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
# Specify the Bayesian mixed model
model <- brm(
formula = bf(choice ~ condition + (1 + condition | subject) ),
data = anchor_antarctica_data,
family = gaussian(),  # Default; specifies a linear model for continuous outcome
prior = c(
prior(normal(0, -30), class = "Intercept"),
prior(normal(0, 5), class = "b"),  # Prior on condition effect
prior(exponential(1), class = "sd")  # Prior on standard deviations of random effects
),
iter = 4000,  # Increase if needed for convergence
chains = 4,  # Number of MCMC chains
cores = 4,  # Number of cores for parallel computing
seed = 123  # Seed for reproducibility
)
# Summarize the model to see the results
summary(model)
# Get marginal effects for the condition variable
marginal_effects_data <- marginal_effects(model, "condition", method = "posterior_epred")
# Specify the Bayesian mixed model
model <- brm(
formula = bf(choice ~ condition + (1 + condition | subject) ),
data = anchor_antarctica_data,
family = gaussian(),  # Default; specifies a linear model for continuous outcome
prior = c(
prior(normal(0, 10), class = "Intercept"),
prior(normal(0, 5), class = "b"),  # Prior on condition effect
prior(exponential(1), class = "sd")  # Prior on standard deviations of random effects
),
iter = 4000,  # Increase if needed for convergence
chains = 4,  # Number of MCMC chains
cores = 4,  # Number of cores for parallel computing
seed = 123  # Seed for reproducibility
)
# Summarize the model to see the results
summary(model)
# Get marginal effects for the condition variable
marginal_effects_data <- marginal_effects(model, "condition", method = "posterior_epred")
condition_effect <- as.data.frame(marginal_effects_data$condition)
# Plot the marginal effects with credible intervals
ggplot(condition_effect, aes(x = condition, y = estimate__)) +
geom_bar(stat = "identity", aes(fill = condition), position = position_dodge()) +
geom_errorbar(
aes(ymin = lower__, ymax = upper__), width = 0.2, position = position_dodge(0.9)
) +
labs(title = "Estimated Mean Choice by Factor Condition",
x = "Condition",
y = "Estimated Mean Choice") +
scale_fill_manual(values = in_and_ex) +  # Assuming in_and_ex contains desired colors
theme_custom()+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
View(summary_anchoring)
anchoring_introspection <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
anchoring_subjects <- data %>%
group_by(subject) %>%
left_join(anchoring_introspection %>% select(subject, introspect_rating), by = "subject") %>%
filter(task_name == "anchoring") %>%
filter(stimulus == "Antarctic Temperature") %>%
summarise(
choice = as.numeric(choice),
affected = if_else(choice < median_antarctica_estimate,
"Affected by Bias",
"Not Affected by Bias"),
factor = recode(factor(factor, levels = c("Factor-Included", "Factor-Excluded")),
`Factor-Included` = "Factor Included",
`Factor-Excluded` = "Factor Excluded"),
introspect_rating = introspect_rating.y,
condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded"))
) %>%
filter(!is.na(introspect_rating))
median_antarctica_estimate <- median(anchor_antarctica_data$choice[anchor_antarctica_data$factor == "Factor-Excluded"])
summary_anchor_data <- anchor_data %>%
group_by(effect_group) %>%
summarize(
mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating)
)
nchor_data <- data %>%
filter(task_name == "anchoring") %>%
filter(any(!is.na(introspect_rating))) %>%
filter(introspect_rating != "") %>%
mutate(effect_group = case_when(
subject %in% subjects_included_and_anchored ~ "Included and Showing Effect",
subject %in% subjects_included_and_not_anchored ~ "Included and Not Showing Effect",
subject %in% subjects_excluded_and_anchored ~ "Excluded and Showing Effect",
subject %in% subjects_excluded_and_not_anchored ~ "Excluded and Not Showing Effect",
)) %>%
mutate(effect_group = factor(effect_group, levels = c("Included and Showing Effect", "Included and Not Showing Effect",  "Excluded and Showing Effect", "Excluded and Not Showing Effect")))
anchoring_introspection <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "") %>%
filter(stimulus == "Antarctic Temperature")
View(anchoring_introspection)
anchoring_introspection <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
View(anchoring_introspection)
anchoring_introspection <- data %>%
filter(task_name == "anchoring") %>%
filter(stimulus == "Antarctic Temperature")
View(anchoring_introspection)
anchoring_introspection <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
anchoring_subjects <- data %>%
group_by(subject) %>%
left_join(anchoring_introspection %>% select(subject, introspect_rating), by = "subject") %>%
filter(task_name == "anchoring") %>%
filter(stimulus == "Antarctic Temperature")
View(anchoring_subjects)
anchoring_introspection <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
anchoring_subjects <- data %>%
group_by(subject) %>%
left_join(anchoring_introspection %>% select(subject, introspect_rating), by = "subject") %>%
filter(task_name == "anchoring") %>%
filter(stimulus == "Antarctic Temperature")%>%
rename(introspect_rating.y = estimate_of_effect_size)%>%
mutate(distance_from_anchor = abs(choice + 30))
View(anchoring_subjects)
anchoring_introspection <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
anchoring_subjects <- data %>%
group_by(subject) %>%
left_join(anchoring_introspection %>% select(subject, introspect_rating), by = "subject") %>%
filter(task_name == "anchoring") %>%
filter(stimulus == "Antarctic Temperature")%>%
rename(estimate_of_effect_size = introspect_rating.y)%>%
mutate(distance_from_anchor = abs(choice + 30))
anchoring_introspection <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
anchoring_subjects <- data %>%
group_by(subject) %>%
left_join(anchoring_introspection %>% select(subject, introspect_rating), by = "subject") %>%
filter(task_name == "anchoring") %>%
filter(stimulus == "Antarctic Temperature")%>%
rename(estimate_of_effect_size = introspect_rating.y)%>%
mutate(distance_from_anchor = abs(as_numeric(choice) + 30))
anchoring_introspection <- data %>%
filter(task_name == "anchoring") %>%
filter(introspect_rating != "")
anchoring_subjects <- data %>%
group_by(subject) %>%
left_join(anchoring_introspection %>% select(subject, introspect_rating), by = "subject") %>%
filter(task_name == "anchoring") %>%
filter(stimulus == "Antarctic Temperature")%>%
rename(estimate_of_effect_size = introspect_rating.y)%>%
mutate(distance_from_anchor = abs(as.numeric(choice) + 30))
# Fit the Bayesian mixed-effects model
model <- brm(
formula = estimate_of_effect_size ~ distance_from_anchor + (1 + factor | subject),
data = df,
family = gaussian(),  # Assuming estimate_of_effect_size is continuous
prior = c(
prior(normal(0, 10), class = "Intercept"),
prior(normal(0, 5), class = "b"),  # Prior on fixed effects
prior(exponential(1), class = "sd")  # Prior on random effects SDs
),
iter = 4000,
chains = 4,
cores = 4,
seed = 123
)
# Fit the Bayesian mixed-effects model
model <- brm(
formula = estimate_of_effect_size ~ distance_from_anchor + (1 + factor | subject),
data = anchoring_subjects,
family = gaussian(),  # Assuming estimate_of_effect_size is continuous
prior = c(
prior(normal(0, 10), class = "Intercept"),
prior(normal(0, 5), class = "b"),  # Prior on fixed effects
prior(exponential(1), class = "sd")  # Prior on random effects SDs
),
iter = 4000,
chains = 4,
cores = 4,
seed = 123
)
# Summarize the model
summary(model)
# Extract posterior samples for the fixed effect of `distance_from_anchor`
posterior_samples <- posterior_samples(model)
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_distance_from_anchor)) +
geom_density(fill = "skyblue", alpha = 0.5) +
labs(
title = "Posterior Distribution of the Effect of Distance from Anchor",
x = "Effect of Distance from Anchor on Estimate of Effect Size",
y = "Density"
) +
theme_minimal()
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_distance_from_anchor)) +
geom_density(fill = "skyblue", alpha = 0.5) +
labs(
title = "Posterior Distribution of the Effect of Distance from Anchor",
x = "Effect of Distance from Anchor on Estimate of Effect Size",
y = "Density"
) +
theme_custom()
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_distance_from_anchor)) +
geom_density(fill = "none", alpha = 0.5) +
labs(
title = "Posterior Distribution of the Effect of Distance from Anchor",
x = "Effect of Distance from Anchor on Estimate of Effect Size",
y = "Density"
) +
theme_custom()
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_distance_from_anchor)) +
geom_density(fill = "NA", alpha = 0.5) +
labs(
title = "Posterior Distribution of the Effect of Distance from Anchor",
x = "Effect of Distance from Anchor on Estimate of Effect Size",
y = "Density"
) +
theme_custom()
# Extract posterior samples for the fixed effect of `distance_from_anchor`
posterior_samples <- posterior_samples(model)
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_distance_from_anchor)) +
geom_density(fill = "NA", alpha = 0.5) +
labs(
title = str_wrap("Posterior Distribution of the Effect of Distance from Anchor", width = 40),
x = str_wrap("Effect of Distance from Anchor on Estimate of Effect Size", width = 30),
y = "Density"
) +
theme_custom()
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_distance_from_anchor)) +
geom_density(fill = "NA", alpha = 0.5) +
labs(
title = str_wrap("Posterior Distribution: Introspection on Anchor Effect", width = 40),
x = str_wrap("Effect of Distance from Anchor on Estimate of Effect Size", width = 30),
y = "Density"
) +
theme_custom()
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_distance_from_anchor)) +
geom_density(fill = "NA", alpha = 0.5) +
labs(
title = str_wrap("Posterior Distribution: Introspection on Anchor Effect", width = 25),
x = str_wrap("Effect of Distance from Anchor on Estimate of Effect Size", width = 30),
y = "Density"
) +
theme_custom()
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_distance_from_anchor)) +
geom_density(fill = "NA", alpha = 0.5) +
labs(
title = str_wrap("Posterior Distribution: Introspection on Anchor Effect", width = 30),
x = str_wrap("Effect of Distance from Anchor on Estimate of Effect Size", width = 30),
y = "Density"
) +
theme_custom()
causal_data <- data %>%
filter(task_name == "causal inference") %>%
mutate(choice = as.numeric(choice))
summary_causal_data <- causal_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("One", "Nine"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice)
)
ggplot(summary_causal_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Causal Inference", x = "Condition", y = "Causality") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
t.test(choice ~ factor, data = causal_data)
## 5.2 introspection----
#Did factor included give higher introspection numbers than factor excluded?
summary_causal_data <- causal_data %>%
group_by(factor) %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded"))) %>%
summarize(
mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary_causal_data, aes(x = factor, y = mean_introspect_rating, fill = factor)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Causal Inference Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+   scale_y_continuous(limits = c(0, 100))
t.test(introspect_rating ~ factor, data = causal_data)
#p-value = 0.01214
#"intro_rating(included and higher than median causality rating)
#>
#  intro_rating(included and not higher than median causality rating)"
#median causality rating
median_causality_rating <- median(causal_data$choice[causal_data$factor == "Factor-Excluded"])
causal_data <- causal_data %>%
mutate(effect_group = case_when(
choice > median_causality_rating & factor == "Factor-Included" ~ "Included and Higher Causality Than Median",
choice <= median_causality_rating & factor == "Factor-Included" ~ "Included and Not Higher Causality Than Median",
choice > median_causality_rating & factor == "Factor-Excluded" ~ "Excluded and Higher Causality Than Median",
choice <= median_causality_rating & factor == "Factor-Excluded" ~ "Excluded and Not Higher Causality Than Median"
))%>%
mutate(effect_group = factor(effect_group, levels = c("Included and Higher Causality Than Median", "Included and Not Higher Causality Than Median", "Excluded and Higher Causality Than Median", "Excluded and Not Higher Causality Than Median")))
summary_causal_data <- causal_data %>%
group_by(effect_group) %>%
summarize(
mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary_causal_data, aes(x = effect_group, y = mean_introspect_rating, fill = effect_group)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Causal Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()  +
scale_fill_manual(values = four_colors) +
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+   scale_y_continuous(limits = c(0, 100))
summary(lm(introspect_rating ~ effect_group, data = causal_data))
## New version ----
median_causality_rating <- median(causal_data$choice[causal_data$factor == "Factor-Excluded"])
causal_data_by_subject <- data %>%
filter(task_name == "causal inference") %>%
group_by(subject) %>%
filter(any(!is.na(introspect_rating))) %>%
summarize(
choice = as.numeric(choice),
factor = recode(factor(first(factor), levels = c("Factor-Included", "Factor-Excluded")),
`Factor-Included` = "Factor Included",
`Factor-Excluded` = "Factor Excluded"),
introspect_rating = introspect_rating,
affected = if_else(choice > median_causality_rating,
"Affected by Bias",
"Not Affected by Bias"),
)%>%
filter(!is.na(introspect_rating))
View(causal_data_by_subject)
summary_causal <- causal_data_by_subject %>%
group_by(factor, affected) %>%
summarise(
mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating),
n = n()
)
causal_data_by_subject <- data %>%
filter(task_name == "causal inference") %>%
group_by(subject) %>%
filter(any(!is.na(introspect_rating)))
View(causal_data_by_subject)
causal_data_by_subject <- data %>%
filter(task_name == "causal inference") %>%
group_by(subject) %>%
filter(any(!is.na(introspect_rating))) %>%
rename(estimate_of_effect_size = introspect_rating)
causal_data_by_subject <- data %>%
filter(task_name == "causal inference") %>%
group_by(subject) %>%
filter(any(!is.na(introspect_rating))) %>%
rename(estimate_of_effect_size = introspect_rating)
# Fit the Bayesian mixed-effects model
model <- brm(
formula = estimate_of_effect_size ~ choice + (1 + factor | subject),
data = causal_data_by_subject,
family = gaussian(),  # Assuming estimate_of_effect_size is continuous
prior = c(
prior(normal(0, 10), class = "Intercept"),
prior(normal(0, 5), class = "b"),  # Prior on fixed effects
prior(exponential(1), class = "sd")  # Prior on random effects SDs
),
iter = 4000,
chains = 4,
cores = 4,
seed = 123
)
# Summarize the model
summary(model)
# Extract posterior samples for the fixed effect of `distance_from_anchor`
posterior_samples <- posterior_samples(model)
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_distance_from_anchor)) +
geom_density(fill = "NA", alpha = 0.5) +
labs(
title = str_wrap("Posterior Distribution: Introspection on Anchor Effect", width = 30),
x = str_wrap("Effect of Distance from Anchor on Estimate of Effect Size", width = 30),
y = "Density"
) +
theme_custom()
# Extract posterior samples for the fixed effect of `distance_from_anchor`
posterior_samples <- posterior_samples(model)
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = choice)) +
geom_density(fill = "NA", alpha = 0.5) +
labs(
title = str_wrap("Posterior Distribution: Introspection on Causal Effect", width = 30),
x = str_wrap("Effect of Causlity Report on Estimate of Effect Size", width = 30),
y = "Density"
) +
theme_custom()
# Extract posterior samples for the fixed effect of `distance_from_anchor`
posterior_samples <- posterior_samples(model)
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_choice)) +
geom_density(fill = "NA", alpha = 0.5) +
labs(
title = str_wrap("Posterior Distribution: Introspection on Causal Effect", width = 30),
x = str_wrap("Effect of Causlity Report on Estimate of Effect Size", width = 30),
y = "Density"
) +
theme_custom()
# Extract posterior samples for the fixed effect of `distance_from_anchor`
posterior_samples <- posterior_samples(model)
colnames(posterior_samples)
causal_data_by_subject <- data %>%
filter(task_name == "causal inference") %>%
group_by(subject) %>%
filter(any(!is.na(introspect_rating))) %>%
rename(estimate_of_effect_size = introspect_rating) %>%
mutate(choice = as.numeric(choice))
# Fit the Bayesian mixed-effects model
model <- brm(
formula = estimate_of_effect_size ~ choice + (1 + factor | subject),
data = causal_data_by_subject,
family = gaussian(),  # Assuming estimate_of_effect_size is continuous
prior = c(
prior(normal(0, 10), class = "Intercept"),
prior(normal(0, 5), class = "b"),  # Prior on fixed effects
prior(exponential(1), class = "sd")  # Prior on random effects SDs
),
iter = 4000,
chains = 4,
cores = 4,
seed = 123
)
# Summarize the model
summary(model)
# Extract posterior samples for the fixed effect of `distance_from_anchor`
posterior_samples <- posterior_samples(model)
colnames(posterior_samples)
# Plot the posterior distribution of the effect of `distance_from_anchor`
ggplot(posterior_samples, aes(x = b_choice)) +
geom_density(fill = "NA", alpha = 0.5) +
labs(
title = str_wrap("Posterior Distribution: Introspection on Causal Effect", width = 30),
x = str_wrap("Effect of Causlity Report on Estimate of Effect Size", width = 30),
y = "Density"
) +
theme_custom()
ggplot(posterior_samples, aes(x = b_choice)) +
geom_density(fill = NA, alpha = 0.5) +  # Set fill to NA for no fill
labs(
title = str_wrap("Posterior Distribution: Introspection on Causal Effect", width = 30),
x = str_wrap("Effect of Causality Report on Estimate of Effect Size", width = 30),
y = "Density"
) +
theme_custom() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
summary(model)
