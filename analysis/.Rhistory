histogram(population, fit="normal", nint=15, xlab="Women's height (cm)")
samp = do(100) * favstats(sample(population, size = 5))
samp = do(100) * favstats(sample(population, size = 5))
head(samp)
head(samp)
panel.ci = function (x, y, mu, data2, ...) {
panel.xyplot(x, y, ...)
good = subset(data2, upper > mu & lower < mu)
bad = subset(data2, upper < mu | lower > mu)
with(good, panel.arrows(lower, .index, upper, .index, angle=90, length = 0.05, ends="both"))
with(bad, panel.arrows(lower, .index, upper, .index, angle=90, length = 0.05, ends="both", col="red", lwd=3))
panel.abline(v=mu, lty=2)
}
plot_ci = function (df, mu, ...) {
space = 0.1 * (max(df$lower) - min(df$upper))
xyplot(.index ~ mean, data=df, data2 = df, panel=panel.ci, mu = mu, xlim = c(min(df$lower) - space, max(df$upper) + space), ylab = NULL)
}
plot_ci(samp, mu = mean(population))
Endotoxin =
c(708.23, 911.60, 976.81, 1316.63, 262.74, 9772.08, 370.76, 229.16, 2570.51,
891.19, 3163.20, 1777.65, 1288.57, 436.23, 2631.63, 1173.52, 911.67, 7942.42,
740.32, 356.92, 1175.48, 1480.55, 2754.61, 575.62, 573.89, 468.26, 1000.71,
364.22, 1025.26, 1022.04, 645.41, 363.57, 977.47, 1022.75, 1860.63, 371.13,
174.73, 399.68, 1479.77, 2882.96, 601.99, 1697.32, 2291.00, 646.49, 1176.27,
1995.43, 955.54, 1480.05, 456.71, 1174.70, 5494.22)
library(mosaic)
bwplot(Endotoxin, horizontal=T)
bwplot(log(Endotoxin), horizontal=T)
mean(log(Endotoxin))
sd(log(Endotoxin))
2.01(0.858)/sqrt(51)
2.01*(0.858)/sqrt(51)
6.917 +0.241
6.917 -0.241
3+2.05 * 7.32/(sqrt(29))
3-2.05 * 7.32/(sqrt(29))
t.test(weight, alternative = "greater")
t.test(weight, alternative = "two.sided")
knitr::opts_chunk$set(echo = TRUE)
weight <- c(1.7, 11.7, -1.4, 0.7, 6.1, -0.8, -0.1, 1.1, 2.4, -0.7, -4.0, 12.6, -3.5, 20.9,
1.9, 14.9, -9.3, 3.9, 3.5, 2.1, 0.1, 17.1, 1.4, 15.4, -7.6, -0.3, -0.7,1.6, -3.7)
mean(weight)
sd(weight)
3/(7.32/sqrt(29))
3+2.05 * 7.32/(sqrt(29))
3-2.05 * 7.32/(sqrt(29))
t.test(weight, alternative = "greater")
t.test(weight, alternative = "two.sided")
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
load("bdims.RData")
library(mosaic)
mdims = subset(bdims, sex == 1)
fdims = subset(bdims, sex == 0)
population = fdims$hgt
mu = mean(population); mu
sigma = sd(population); sigma
histogram(population, fit="normal", nint=15, xlab="Women's height (cm)")
samp = do(100) * favstats(sample(population, size = 5))
head(samp)
samp = transform(samp, lower = mean - 1.96 * sigma/sqrt(4))
samp = transform(samp, upper = mean + 1.96 * sigma/sqrt(4))
head(samp)
panel.ci = function (x, y, mu, data2, ...) {
panel.xyplot(x, y, ...)
good = subset(data2, upper > mu & lower < mu)
bad = subset(data2, upper < mu | lower > mu)
with(good, panel.arrows(lower, .index, upper, .index, angle=90, length = 0.05, ends="both"))
with(bad, panel.arrows(lower, .index, upper, .index, angle=90, length = 0.05, ends="both", col="red", lwd=3))
panel.abline(v=mu, lty=2)
}
plot_ci = function (df, mu, ...) {
space = 0.1 * (max(df$lower) - min(df$upper))
xyplot(.index ~ mean, data=df, data2 = df, panel=panel.ci, mu = mu, xlim = c(min(df$lower) - space, max(df$upper) + space), ylab = NULL)
}
plot_ci(samp, mu = mean(population))
knitr::opts_chunk$set(echo = TRUE)
weight <- c(1.7, 11.7, -1.4, 0.7, 6.1, -0.8, -0.1, 1.1, 2.4, -0.7, -4.0, 12.6, -3.5, 20.9,
1.9, 14.9, -9.3, 3.9, 3.5, 2.1, 0.1, 17.1, 1.4, 15.4, -7.6, -0.3, -0.7,1.6, -3.7)
mean(weight)
sd(weight)
3/(7.32/sqrt(29))
3+2.05 * 7.32/(sqrt(29))
3-2.05 * 7.32/(sqrt(29))
t.test(weight, alternative = "greater")
t.test(weight, alternative = "two.sided")
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
load("bdims.RData")
library(mosaic)
mdims = subset(bdims, sex == 1)
fdims = subset(bdims, sex == 0)
population = fdims$hgt
mu = mean(population); mu
sigma = sd(population); sigma
histogram(population, fit="normal", nint=15, xlab="Women's height (cm)")
samp = do(100) * favstats(sample(population, size = 5))
head(samp)
11 + 13
test
#### Headers ####
##### Numeric #####
sample_size <- 100
# 6/14/23
#### Header ####
#### Variables ####
##### Numeric #####
sample_size <- 100
##### Characters #####
name <- "Clarissa"
(())no
bool_t <- TRUE
not bool_t
!bool_t
bool_t||!bool)t
bool_t||!bool_t
bool_t || !bool_t
bool_t & !bool_t
numbers <- c(33, 11, 232, 0.001)
numbers[1]
numbers[0]
numbers[-1]
numbers[1:3]
numbers[5:3]
numbers[4:3]
numbers[1:5:2]
groups_string <- c("Treatment1", "Treatment1", "Treatment2", "Control")
group <- factor(c("Treatment1", "Treatment1", "Treatment2", "Control"))
group
require(sjPlot)
install.packages("minqa", repos = "https://cran.rstudio.com/")
install.packages("RcppEigen", repos = "https://cran.rstudio.com/")
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(sjPlot)
require(magrittr)
5+5
5+"noa"
5+"5"
"noa"+"noa"
5*5
"noa" *5
["noa"]*5
c("noa")*5
1-5
5/4
month.name
!month
?month
??month
# Setup -------------------------------------------------------------------
library(extrafont)
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(sjPlot)
require(magrittr)
require(readr)
library(stringr)
library(RColorBrewer)
library(extrafont)
library(Cairo)
library(tidyr)
library(brms)
library(forcats)
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
dodge <- position_dodge(width=0.9)
#data <- read.csv('November_2024_pilot.csv') %>%
data <- read.csv('full_pilot.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
filter(familiarity != "Yes") %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded"))) %>%
mutate(introspect_rating = as.numeric(introspect_rating)) %>%
mutate(introspect_rating = as.numeric(introspect_rating))%>%
mutate(introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating,
introspect_rating
))
View(data)
december_pilot = read_csv('v5pilot2.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded")))
subjects_all = data %>%
pull(subject) %>%
unique()
View(subjects_all)
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
#events <- read.csv('NovemberBrowserEvents.csv') %>%
events <- read.csv('full_pilot_browser_events.csv') %>%
arrange(subject)
tab_away_exclude <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n(), more_than_twelve = as.numeric(n() > 12))%>%
filter(more_than_twelve == 1) %>%
pull(subject)
blur_histogram_data <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n(), more_than_twelve = as.numeric(n() > 12))
##View(attention_exclude)
#blur histogram
ggplot(blur_histogram_data, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
demographics <- read.csv('full_pilot_demo.csv') %>%
arrange(subject)
time_exclude <- demographics %>%
mutate(total_time = total_time/60000)
View(time_exclude)
ggplot(time_exclude, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude)
p.vals = c()
#font_import(pattern = "Optima", prompt = FALSE)
loadfonts(device = "pdf")
# seen before analysis ----
#data <- read.csv('November_2024_pilot.csv') %>%
data_with_seen_before <- read.csv('full_pilot.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded"))) %>%
mutate(introspect_rating = as.numeric(introspect_rating))
View(data_with_seen_before)
familiarity_percentage <- data_with_seen_before %>%
group_by(task_name) %>%
summarise(total_responses = n(),
yes_responses = sum(familiarity == "Yes")) %>%
mutate(percentage_yes = (yes_responses / total_responses) * 100)
ggplot(familiarity_percentage, aes(x = fct_reorder(task_name, percentage_yes, .desc = TRUE), y = percentage_yes)) +
geom_bar(stat = "identity", fill = "sky blue") +
geom_text(aes(label = paste0(round(percentage_yes, 1), "%", " ", task_name), y = 0),
vjust = 0,
angle = 90,
color = "black",
family = "Optima",
size = 5,
hjust = 0) +
labs(title = "Percent Familiar With Each Task",
x = "Task",
y = "Percent Familiar") +
theme_custom()+
theme(axis.text.x = element_blank())
View(data)
data <- read.csv('v5pilot2.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
filter(familiarity != "Yes") %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded"))) %>%
mutate(introspect_rating = as.numeric(introspect_rating)) %>%
mutate(introspect_rating = as.numeric(introspect_rating))%>%
mutate(introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating,
introspect_rating
))
View(data)
december_pilot = read_csv('v5pilot2.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded")))
subjects_all = data %>%
pull(subject) %>%
unique()
View(subjects_all)
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
#events <- read.csv('NovemberBrowserEvents.csv') %>%
events <- read.csv('full_pilot_browser_events.csv') %>%
arrange(subject)
tab_away_exclude <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n(), more_than_twelve = as.numeric(n() > 12))%>%
filter(more_than_twelve == 1) %>%
pull(subject)
blur_histogram_data <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n(), more_than_twelve = as.numeric(n() > 12))
##View(attention_exclude)
#blur histogram
ggplot(blur_histogram_data, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
demographics <- read.csv('full_pilot_demo.csv') %>%
arrange(subject)
time_exclude <- demographics %>%
mutate(total_time = total_time/60000)
View(time_exclude)
ggplot(time_exclude, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude)
p.vals = c()
#font_import(pattern = "Optima", prompt = FALSE)
loadfonts(device = "pdf")
# seen before analysis ----
#data <- read.csv('November_2024_pilot.csv') %>%
data_with_seen_before <- read.csv('full_pilot.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded"))) %>%
mutate(introspect_rating = as.numeric(introspect_rating))
View(data_with_seen_before)
familiarity_percentage <- data_with_seen_before %>%
group_by(task_name) %>%
summarise(total_responses = n(),
yes_responses = sum(familiarity == "Yes")) %>%
mutate(percentage_yes = (yes_responses / total_responses) * 100)
ggplot(familiarity_percentage, aes(x = fct_reorder(task_name, percentage_yes, .desc = TRUE), y = percentage_yes)) +
geom_bar(stat = "identity", fill = "sky blue") +
geom_text(aes(label = paste0(round(percentage_yes, 1), "%", " ", task_name), y = 0),
vjust = 0,
angle = 90,
color = "black",
family = "Optima",
size = 5,
hjust = 0) +
labs(title = "Percent Familiar With Each Task",
x = "Task",
y = "Percent Familiar") +
theme_custom()+
theme(axis.text.x = element_blank())
## 1.1 Affect ----
affect_data = december_pilot %>%
filter(task_name == "affect heuristic")%>%
mutate(choice = as.numeric(choice))
summary_affect_data <- affect_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("With passage", "without passage"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_affect_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Affect", x = "Condition", y = "How beneficial is natural gas") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
t.test(choice ~ factor, data = affect_data)
View(data)
data <- read.csv('v5pilot2.csv')
View(data)
data <- read.csv('v5pilot2.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
filter(familiarity != "Yes") %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded"))) %>%
mutate(introspect_rating = as.numeric(introspect_rating)) %>%
mutate(introspect_rating = as.numeric(introspect_rating))
View(data)
data <- read.csv('v5pilot2.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
filter(familiarity != "Yes")
View(data)
data <- read.csv('v5pilot2.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name)
View(data)
data <- read.csv('v5pilot2.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, levels = c("Factor-Included", "Factor-Excluded"))) %>%
mutate(introspect_rating = as.numeric(introspect_rating)) %>%
mutate(introspect_rating = as.numeric(introspect_rating))%>%
mutate(introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating,
introspect_rating
))
View(data)
primacy_data <- december_pilot %>%
filter(task_name == "primacy effect") %>%
filter(choice != "") %>%
mutate(choice = as.numeric(choice))
primacy_data <- december_pilot %>%
filter(task_name == "primacy order") %>%
filter(choice != "") %>%
mutate(choice = as.numeric(choice))
primacy_data <- december_pilot %>%
filter(task_name == "primacy order") %>%
filter(choice != "")
View(primacy_data)
primacy_data <- december_pilot %>%
filter(task_name == "primacy order") %>%
filter(is.na(stimulus)) %>%
filter(choice != "")%>%
mutate(choice = ifelse(choice == "car1",
"chose primacy car",
"chose other car")) %>%
mutate(choice_binary = as.numeric(choice == "chose primacy car"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
summary_primacy_data <- primacy_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice_binary),
se_choice = se.prop(choice_binary),
count = n()
)
ggplot(summary_primacy_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Choices of the primacy car", x = "Condition", y = "Percent who chose primacy car") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
primacy_analysis = brm(choice_binary ~ condition,
data = primacy_data,
family = 'bernoulli',
save_pars = save_pars(group = F))
summary(primacy_analysis)
hdi(primacy_analysis, effects = 'all')
library(extrafont)
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(sjPlot)
require(magrittr)
require(readr)
library(stringr)
library(RColorBrewer)
library(extrafont)
library(Cairo)
library(tidyr)
library(brms)
library(forcats)
hdi(primacy_analysis, effects = 'all')
summary(primacy_analysis)
hdi(primacy_analysis, effects = 'all')
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
hdi(primacy_analysis, effects = 'all')
