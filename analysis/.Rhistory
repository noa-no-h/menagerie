ggplot(summary_mere_exposure_data, aes(x = factor, y = mean_introspect_rating, fill = factor)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Mere Exposure Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)
#next question: "intro_rating(included and their median rating of how much they liked the words was greater than the median rating for excluded)
#>
#intro_rating(included and not their median rating of how much they liked the words was greater than the median rating for excluded)"
mere_exposure_data <- data %>%
filter(task_name == "mere exposure") %>%
filter(stimulus != "") %>%
mutate(choice = as.numeric(choice))
#median rating among excluded
median_rating_excluded = median(mere_exposure_data$choice[mere_exposure_data$factor == "Factor-Excluded"])
#I do not know why but these two subjects never gave introspection ratings
filtered_data <- data %>%
filter(!(subject %in% c("58635484a73baa00010db537", "65e29e4514fa80bea57284b7")))
#make new table with subject number, average rating, and introspection rating
subject_data <- filtered_data %>%
group_by(subject) %>%
filter(task_name == "mere exposure") %>%
mutate(choice = as.numeric(choice)) %>%
summarise(
average_choice_rating_per_subject = median(choice, na.rm = TRUE),
introspect_rating = first(introspect_rating[!is.na(introspect_rating)]),
factor = first(factor)
)
#make new column for effect group
subject_data <- subject_data %>%
mutate(effect_group = case_when(
average_choice_rating_per_subject > median_rating_excluded & factor == "Factor-Included" ~ "Included and Rating Higher Than Excluded Median",
average_choice_rating_per_subject <= mean_rating_excluded & factor == "Factor-Included" ~ "Included and Rating Not Higher Than Excluded Median",
average_choice_rating_per_subject > mean_rating_excluded & factor == "Factor-Excluded" ~ "Excluded and Rating Higher Than Excluded Median",
average_choice_rating_per_subject <= mean_rating_excluded & factor == "Factor-Excluded" ~ "Excluded and Rating Not Higher Than Excluded Median",
)) %>%
mutate(effect_group = factor(effect_group, levels = c("Included and Rating Higher Than Excluded Median", "Included and Rating Not Higher Than Excluded Median", "Excluded and Rating Higher Than Excluded Median", "Excluded and Rating Not Higher Than Excluded Median", "Excluded")))
summary_mere_exposure_data <- subject_data %>%
group_by(effect_group) %>%
summarize(
mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary_mere_exposure_data, aes(x = effect_group, y = mean_introspect_rating, fill = effect_group)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Mere Exposure Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom() +
scale_fill_manual(values = four_colors) +
guides(fill = FALSE)
reference_price_data <- data %>%
filter(task_name == "reference price") %>%
mutate(choice_parsed = parse_number(choice))
#View(reference_price_data)
summary_reference_price_data <- reference_price_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("hotel", "motel"))) %>%
summarize(
mean_choice = mean(choice_parsed),
se_choice = se(choice_parsed)
)
ggplot(summary_reference_price_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Amount Willing to Pay for Beer", x = "Condition", y = "Average Amount Willing to Pay (Dollars)") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)
parse_choice_vectorized <- function(choices) {
# Define regular expression patterns
pattern_million <- regex("milion| milliion| mil| million| Million| millon", ignore_case = TRUE)
pattern_k <- regex("k", ignore_case = TRUE)
parsed_choices <- sapply(choices, function(choice) {
# Remove commas
choice_clean <- str_replace_all(choice, ",", "")
if (str_detect(choice_clean, pattern_million)) {
# Remove variations of "million" text
num_str <- str_replace(choice_clean, pattern_million, "")
# Convert to numeric
num <- as.numeric(num_str)
# If conversion to numeric results in NA, return the original choice
if (is.na(num)) {
return(choice)
}
# Multiply by 1 million
result <- num * 10^6
} else if (str_detect(choice_clean, pattern_k)) {
# Remove "k" text
num_str <- str_replace(choice_clean, pattern_k, "")
# Convert to numeric
num <- as.numeric(num_str)
# If conversion to numeric results in NA, return the original choice
if (is.na(num)) {
return(choice)
}
# Multiply by 1 thousand
result <- num * 10^3
} else {
# If no "million" or "k", handle as a simple number
num <- as.numeric(choice_clean)
# If conversion to numeric results in NA, return the original choice
if (is.na(num)) {
return(choice)
}
result <- num
}
# Return as character with no scientific notation
return(format(result, scientific = FALSE))
}, USE.NAMES = FALSE)
return(parsed_choices)
}
true_values <- c(
Pakistan = 203177034,
Nigeria = 199045324,
Mexico = 131738729,
Vietnam = 97074662,
The_Democratic_Republic_of_the_Congo = 85705256,
Thailand = 69256846,
Tanzania = 60229204,
South_Korea = 51273440,
Colombia = 49705306,
Uganda = 45169147,
Ukraine = 43877093,
Malaysia = 32294009,
North_Korea = 25683863,
Niger = 22850032,
Burkina_Faso = 20106983,
Romania = 19519762,
Zimbabwe = 17154637,
The_Netherlands = 17114912,
Somalia = 14600000,
Guinea = 13270289,
Benin = 11683042,
Haiti = 11193952,
Greece = 11133944,
The_Czech_Republic = 10629078,
Azerbaijan = 9980369
)
hindsight_data <- data %>%
filter(task_name == "hindsight bias") %>%
filter(!(subject %in% c("66749b876f32a4ad246db5da","5f2d95153c1140074cc81b4c","667469ea0d42f70a9a75567b","667444e5662b7a4ebf82d5e1","665c6f67d9ea69740afbcab8","6273238a4a8b39041ff1bd2c", "664d3c950d24d83ca7b4dd68", "6020606d7b0258677b881f63", "6159fe7811a7e1b94401c33f"))) %>%
mutate(parsed_choice = parse_choice_vectorized(choice)) %>%
mutate(which_estimate = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first",
str_detect(auxiliary_info1, "_recall_original_response") ~ "recall",
TRUE ~ NA_character_
)) %>%
# Extract the country name
mutate(country = case_when(
str_detect(auxiliary_info1, "_estimate") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_estimate)"),
str_detect(auxiliary_info1, "_recall") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_recall)"),
TRUE ~ NA_character_
))%>%
mutate(true_value = true_values[country]) %>%
mutate(difference_from_true = true_values - choice)
hindsight_data <- data %>%
filter(task_name == "hindsight bias") %>%
filter(!(subject %in% c("66749b876f32a4ad246db5da","5f2d95153c1140074cc81b4c","667469ea0d42f70a9a75567b","667444e5662b7a4ebf82d5e1","665c6f67d9ea69740afbcab8","6273238a4a8b39041ff1bd2c", "664d3c950d24d83ca7b4dd68", "6020606d7b0258677b881f63", "6159fe7811a7e1b94401c33f"))) %>%
mutate(parsed_choice = parse_choice_vectorized(choice)) %>%
mutate(which_estimate = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first",
str_detect(auxiliary_info1, "_recall_original_response") ~ "recall",
TRUE ~ NA_character_
)) %>%
hindsight_data <- data %>%
filter(task_name == "hindsight bias") %>%
filter(!(subject %in% c("66749b876f32a4ad246db5da","5f2d95153c1140074cc81b4c","667469ea0d42f70a9a75567b","667444e5662b7a4ebf82d5e1","665c6f67d9ea69740afbcab8","6273238a4a8b39041ff1bd2c", "664d3c950d24d83ca7b4dd68", "6020606d7b0258677b881f63", "6159fe7811a7e1b94401c33f"))) %>%
mutate(parsed_choice = parse_choice_vectorized(choice)) %>%
mutate(which_estimate = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first",
str_detect(auxiliary_info1, "_recall_original_response") ~ "recall",
TRUE ~ NA_character_
)) %>%
# Extract the country name
mutate(country = case_when(
str_detect(auxiliary_info1, "_estimate") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_estimate)"),
str_detect(auxiliary_info1, "_recall") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_recall)"),
TRUE ~ NA_character_
))%>%
mutate(true_value = true_values[country]) %>%
mutate(difference_from_true = true_values - choice)
hindsight_data <- data %>%
filter(task_name == "hindsight bias") %>%
filter(!(subject %in% c("66749b876f32a4ad246db5da","5f2d95153c1140074cc81b4c","667469ea0d42f70a9a75567b","667444e5662b7a4ebf82d5e1","665c6f67d9ea69740afbcab8","6273238a4a8b39041ff1bd2c", "664d3c950d24d83ca7b4dd68", "6020606d7b0258677b881f63", "6159fe7811a7e1b94401c33f"))) %>%
mutate(parsed_choice = parse_choice_vectorized(choice)) %>%
mutate(which_estimate = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first",
str_detect(auxiliary_info1, "_recall_original_response") ~ "recall",
TRUE ~ NA_character_
)) %>%
# Extract the country name
mutate(country = case_when(
str_detect(auxiliary_info1, "_estimate") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_estimate)"),
str_detect(auxiliary_info1, "_recall") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_recall)"),
TRUE ~ NA_character_
))%>%
mutate(true_value = true_values[country]) %>%
mutate(difference_from_true = true_values - choice)
hindsight_data <- data %>%
filter(task_name == "hindsight bias") %>%
filter(!(subject %in% c("66749b876f32a4ad246db5da","5f2d95153c1140074cc81b4c","667469ea0d42f70a9a75567b","667444e5662b7a4ebf82d5e1","665c6f67d9ea69740afbcab8","6273238a4a8b39041ff1bd2c", "664d3c950d24d83ca7b4dd68", "6020606d7b0258677b881f63", "6159fe7811a7e1b94401c33f"))) %>%
mutate(parsed_choice = parse_choice_vectorized(choice)) %>%
mutate(which_estimate = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first",
str_detect(auxiliary_info1, "_recall_original_response") ~ "recall",
TRUE ~ NA_character_
)) %>%
# Extract the country name
mutate(country = case_when(
str_detect(auxiliary_info1, "_estimate") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_estimate)"),
str_detect(auxiliary_info1, "_recall") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_recall)"),
TRUE ~ NA_character_
))
hindsight_data <- data %>%
filter(task_name == "hindsight bias") %>%
filter(!(subject %in% c("66749b876f32a4ad246db5da","5f2d95153c1140074cc81b4c","667469ea0d42f70a9a75567b","667444e5662b7a4ebf82d5e1","665c6f67d9ea69740afbcab8","6273238a4a8b39041ff1bd2c", "664d3c950d24d83ca7b4dd68", "6020606d7b0258677b881f63", "6159fe7811a7e1b94401c33f"))) %>%
#mutate(parsed_choice = parse_choice_vectorized(choice)) %>%
mutate(which_estimate = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first",
str_detect(auxiliary_info1, "_recall_original_response") ~ "recall",
TRUE ~ NA_character_
)) %>%
# Extract the country name
mutate(country = case_when(
str_detect(auxiliary_info1, "_estimate") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_estimate)"),
str_detect(auxiliary_info1, "_recall") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_recall)"),
TRUE ~ NA_character_
))%>%
mutate(true_value = true_values[country]) %>%
mutate(difference_from_true = true_values - choice)
hindsight_data <- data %>%
filter(task_name == "hindsight bias") %>%
filter(!(subject %in% c("66749b876f32a4ad246db5da","5f2d95153c1140074cc81b4c","667469ea0d42f70a9a75567b","667444e5662b7a4ebf82d5e1","665c6f67d9ea69740afbcab8","6273238a4a8b39041ff1bd2c", "664d3c950d24d83ca7b4dd68", "6020606d7b0258677b881f63", "6159fe7811a7e1b94401c33f"))) %>%
#mutate(parsed_choice = parse_choice_vectorized(choice)) %>%
mutate(which_estimate = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first",
str_detect(auxiliary_info1, "_recall_original_response") ~ "recall",
TRUE ~ NA_character_
)) %>%
# Extract the country name
mutate(country = case_when(
str_detect(auxiliary_info1, "_estimate") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_estimate)"),
str_detect(auxiliary_info1, "_recall") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_recall)"),
TRUE ~ NA_character_
))%>%
mutate(true_value = true_values[country]) %>%
#mutate(difference_from_true = true_values - choice)
means_hindsight <- hindsight_data %>%
group_by(subject) %>%
summarise(
#median_first_estimate = median(choice[response_type == "first"], na.rm = TRUE),
#median_second_estimate = median(choice[response_type == "recall"], na.rm = TRUE)
)
hindsight_data <- data %>%
filter(task_name == "hindsight bias") %>%
filter(!(subject %in% c("66749b876f32a4ad246db5da","5f2d95153c1140074cc81b4c","667469ea0d42f70a9a75567b","667444e5662b7a4ebf82d5e1","665c6f67d9ea69740afbcab8","6273238a4a8b39041ff1bd2c", "664d3c950d24d83ca7b4dd68", "6020606d7b0258677b881f63", "6159fe7811a7e1b94401c33f"))) %>%
#mutate(parsed_choice = parse_choice_vectorized(choice)) %>%
mutate(which_estimate = case_when(
str_detect(auxiliary_info1, "_first_response") ~ "first",
str_detect(auxiliary_info1, "_recall_original_response") ~ "recall",
TRUE ~ NA_character_
)) %>%
# Extract the country name
mutate(country = case_when(
str_detect(auxiliary_info1, "_estimate") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_estimate)"),
str_detect(auxiliary_info1, "_recall") ~ str_extract(auxiliary_info1, "^[^_]+(?:_[^_]+)*(?=_recall)"),
TRUE ~ NA_character_
))%>%
mutate(true_value = true_values[country]) %>%
#mutate(difference_from_true = true_values - choice)
#means_hindsight <- hindsight_data %>%
# group_by(subject) %>%
# summarise(
#median_first_estimate = median(choice[response_type == "first"], na.rm = TRUE),
#median_second_estimate = median(choice[response_type == "recall"], na.rm = TRUE)
#)
#affected_subjects <- medians_hindsight %>%
#  filter(median_first_estimate < median_second_estimate)
#View(hindsight_data)
true_values <- c(
Pakistan = 203177034,
Nigeria = 199045324,
Mexico = 131738729,
Vietnam = 97074662,
The_Democratic_Republic_of_the_Congo = 85705256,
Thailand = 69256846,
Tanzania = 60229204,
South_Korea = 51273440,
Colombia = 49705306,
Uganda = 45169147,
Ukraine = 43877093,
Malaysia = 32294009,
North_Korea = 25683863,
Niger = 22850032,
Burkina_Faso = 20106983,
Romania = 19519762,
Zimbabwe = 17154637,
The_Netherlands = 17114912,
Somalia = 14600000,
Guinea = 13270289,
Benin = 11683042,
Haiti = 11193952,
Greece = 11133944,
The_Czech_Republic = 10629078,
Azerbaijan = 9980369
)
# Vectorized function to handle different formats
parse_choice_vectorized <- function(choices) {
# Define regular expression patterns
pattern_million <- regex("milion| milliion| mil| million| Million| millon", ignore_case = TRUE)
pattern_k <- regex("k", ignore_case = TRUE)
parsed_choices <- sapply(choices, function(choice) {
# Remove commas
choice_clean <- str_replace_all(choice, ",", "")
if (str_detect(choice_clean, pattern_million)) {
# Remove variations of "million" text
num_str <- str_replace(choice_clean, pattern_million, "")
# Convert to numeric
num <- as.numeric(num_str)
# If conversion to numeric results in NA, return the original choice
if (is.na(num)) {
return(choice)
}
# Multiply by 1 million
result <- num * 10^6
} else if (str_detect(choice_clean, pattern_k)) {
# Remove "k" text
num_str <- str_replace(choice_clean, pattern_k, "")
# Convert to numeric
num <- as.numeric(num_str)
# If conversion to numeric results in NA, return the original choice
if (is.na(num)) {
return(choice)
}
# Multiply by 1 thousand
result <- num * 10^3
} else {
# If no "million" or "k", handle as a simple number
num <- as.numeric(choice_clean)
# If conversion to numeric results in NA, return the original choice
if (is.na(num)) {
return(choice)
}
result <- num
}
# Return as character with no scientific notation
return(format(result, scientific = FALSE))
}, USE.NAMES = FALSE)
return(parsed_choices)
}
if (!requireNamespace("knitr", quietly = TRUE)) {
install.packages("knitr")
}
library(knitr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Use the stitch function
knitr::spin("analysis2024.R")
knitr::opts_chunk$set(dev = 'svg')
halo_bar_data <- data %>%
filter(task_name == "halo") %>%
mutate(choice = as.numeric(choice))%>%
filter(stimulus != "") %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
)
)
summary_halo_data <- halo_bar_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice)
)
ggplot(summary_halo_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Average Persuasiveness by Attractiveness", x = "Condition", y = "Average Choice") +
theme_custom()+
scale_fill_manual(values = in_neutral_ex)+
guides(fill = FALSE)
halo_data <- data %>%
filter(task_name == "halo") %>%
filter(familiarity == "") %>%
mutate(choice = as.numeric(choice)) %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
)
)
#median persuasive scores among excluded
median_persuasive_among_excluded <- median(halo_data$choice[halo_data$factor == "Factor-Excluded"])
# Find subjects who gave higher than median scores to at least 4 attractive faces
subject_list_included_and_higher_than_median <- halo_data %>%
filter(condition == "attractive") %>%
group_by(subject) %>%
summarize(count_higher = sum(choice > median_persuasive_among_excluded)) %>%
filter(count_higher >= 4) %>%
pull(subject)
#View(subject_list_included_and_higher_than_median)
# List of all subjects in "Factor-Included"
all_subjects_included = halo_data %>%
filter(factor == "Factor-Included") %>%
pull(subject)
#View(all_subjects_included)
# List of subjects in "Factor-Included" who did not rate all "attractive" faces higher than the median persuasive score among excluded subjects
subject_list_included_and_not_higher_than_median = setdiff(all_subjects_included, subject_list_included_and_higher_than_median)
#View(subject_list_included_and_not_higher_than_median)
halo_data <- data %>%
filter(task_name == "halo") %>%
filter(familiarity == "") %>%
mutate(effect_group = case_when(
factor == "Factor-Excluded" ~ "Excluded",
subject %in% subject_list_included_and_higher_than_median ~ "Included and Higher Than Median",
TRUE ~ "Included and Not Higher Than Median",
)) %>%
mutate(effect_group = factor(effect_group, levels = c("Included and Higher Than Median", "Included and Not Higher Than Median", "Excluded")))
#View(halo_data)
halo_data <- data %>%
filter(task_name == "halo") %>%
filter(familiarity != "") %>%
mutate(effect_group = case_when(
factor == "Factor-Excluded" ~ "Excluded",
subject %in% subject_list_included_and_higher_than_median ~ "Included and Higher Than Median",
TRUE ~ "Included and Not Higher Than Median",
)) %>%
mutate(effect_group = factor(effect_group, levels = c("Included and Higher Than Median", "Included and Not Higher Than Median", "Excluded")))
summary_halo_data <- halo_data %>%
group_by(effect_group) %>%
summarize(
mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating)
)
#View(summary_halo_data)
ggplot(summary_halo_data, aes(x = effect_group, y = mean_introspect_rating, fill = effect_group)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Halo Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()  +
scale_fill_manual(values = three_colors) +
guides(fill = FALSE)
ggplot(summary_halo_data, aes(x = effect_group, y = mean_introspect_rating, fill = effect_group)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Halo Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()  +
scale_fill_manual(values = two_colors) +
guides(fill = FALSE)
ggplot(summary_halo_data, aes(x = effect_group, y = mean_introspect_rating, fill = effect_group)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Halo Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()  +
scale_fill_manual(values = two_colors) +
guides(fill = FALSE)
ggplot(summary_halo_data, aes(x = effect_group, y = mean_introspect_rating, fill = effect_group)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Halo Introspection ratings", x = "Condition", y = "introspection rating") +
theme_custom()  +
scale_fill_manual(values = in_and_ex) +
guides(fill = FALSE)
if (!requireNamespace("knitr", quietly = TRUE)) {
install.packages("knitr")
}
library(knitr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(dev = 'svg')
# Use the stitch function
knitr::spin("analysis2024.R")
warnings()
# Setup -------------------------------------------------------------------
install.packages("extrafont")
font_import()
library(extrafont)
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(sjPlot)
require(magrittr)
require(readr)
library(stringr)
library(RColorBrewer)
library(extrafont)
font_import()
loadfonts(device = "pdf")
if (!requireNamespace("knitr", quietly = TRUE)) {
install.packages("knitr")
}
library(knitr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(dev = 'svg')
# Use the stitch function
knitr::spin("analysis2024.R")
summary(lm(introspect_rating ~ effect_group, data = status_quo_data))
#effect_groupIncluded and Status Quo       0.0062 **
if (!requireNamespace("knitr", quietly = TRUE)) {
install.packages("knitr")
}
library(knitr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(dev = 'svg')
# Use the stitch function
knitr::spin("sample.R")
library(Cairo)
