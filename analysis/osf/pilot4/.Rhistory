if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
data <- read.csv('pilot2_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "prediction")),
introspect_rating = as.numeric(introspect_rating), # make numeric
introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating, # reverse-coded ones
introspect_rating),
introspect_rating = introspect_rating - 50 # center around midpoint of zero
)
subjects_all = data %>%
pull(subject) %>%
unique()
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot2_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot2_demo.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
demographics <- read.csv('pilot2_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude)
#font_import(pattern = "Optima", prompt = FALSE)
loadfonts(device = "pdf")
rm(list=ls())
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(total_min = total_time / 60000)
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
dodge <- position_dodge(width=0.9)
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(total_min = total_time / 60000)
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
View(df)
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name)
View(df)
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name)
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
nrow(demo)
n_distinct(df$subject)
View(df)
completed <- unique(demo$subject)
df <- df %>% filter(subject %in% completed)
n_distinct(df$subject)
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "prediction")))
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
# Get subjects that completed the task
completed <- unique(demo$subject)
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 3
failed.attn3 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
df <- df %>%
filter(subject %in% demo$subject,
!(subject %in% glitched),
!(subject %in% failed.attn2),
!(subject %in% failed.attn3),
!(subject %in% wrongtrialnum.subj))
df <- df %>%
filter(subject %in% demo$subject,
!(subject %in% glitched),
!(subject %in% failed.attn2),
!(subject %in% failed.attn3),
!(subject %in% wrong.trial.num))
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
df <- df %>%
filter(subject %in% demo$subject,
!(subject %in% glitched),
!(subject %in% failed.attn2),
!(subject %in% failed.attn3),
!(subject %in% wrong.trial.num))
df %>% count(subject)
length(unique(df$subject))
rm(list=ls())
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf/pilot4/pilot4_analysis.rdata")
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long, aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
geom_hline(yintercept = 4, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,7), labels = c('Extremely unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'RColorBrewer', 'afex', 'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long, aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
geom_hline(yintercept = 4, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,7), labels = c('Extremely unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
