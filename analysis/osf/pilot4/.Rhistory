df.menagerie.byexpert = df.menagerie %>%
group_by(Subject) %>%
summarize(
mean.prediction = mean(menagerie_prediction, na.rm = T),
se.prediction = se(menagerie_prediction),
any.above.midpoint = any(menagerie_prediction > 4),
prediction.range = range(menagerie_prediction,na.rm = T)[2] - range(menagerie_prediction, na.rm = T)[1]) %>%
filter(!is.infinite(prediction.range))
mean(df.menagerie.byexpert$any.above.midpoint)
mean(df.menagerie.byexpert$any.above.midpoint, na.rm = T)
df.menagerie.byexpert = df.menagerie %>%
group_by(Subject) %>%
summarize(
mean.prediction = mean(menagerie_prediction, na.rm = T),
se.prediction = se(menagerie_prediction),
any.above.midpoint = any(menagerie_prediction > 4, na.rm = T),
prediction.range = range(menagerie_prediction,na.rm = T)[2] - range(menagerie_prediction, na.rm = T)[1]) %>%
filter(!is.infinite(prediction.range))
mean(df.menagerie.byexpert$any.above.midpoint, na.rm = T)
df.menagerie.summary = df.menagerie %>%
group_by(menagerie_name) %>%
summarize(mean_prediction = mean(menagerie_prediction, na.rm = T),
se_prediction = se(menagerie_prediction),
pct.high.predictions = mean(menagerie_prediction >= 6),
pct.low.predictions = mean(menagerie_prediction <= 2))
df.menagerie.summary = df.menagerie %>%
group_by(menagerie_name) %>%
summarize(mean_prediction = mean(menagerie_prediction, na.rm = T),
se_prediction = se(menagerie_prediction),
pct.high.predictions = mean(menagerie_prediction >= 6, na.rm = T),
pct.low.predictions = mean(menagerie_prediction <= 2, na.rm = T))
df.menagerie.summary$pct.high.predictions
df.menagerie.summary$pct.low.predictions
rm(list=ls())
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'RColorBrewer', 'afex', 'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
# Load data ---------------------------------------------------------------
fields = c('Judgment and decision-making',
'Cognitive psychology',
'Social psychology',
'Developmental psychology',
'Psychology (other)',
'Behavioral economics',
'Economics (other)',
'Other')
df = read.csv('pilot4_data.csv', header = T) %>%
filter(Status == 'IP Address') %>%
select(Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('menagerie')) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields))
for (field in fields) {
df = df %>% mutate("{field}" := grepl(field, df$Field, fixed = T))
}
# Sample details ----------------------------------------------------------
nrow(df)
View(df)
df = read.csv('pilot4_data.csv', header = T) %>%
filter(Status == 'IP Address', Progress > 90) %>%
select(Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('menagerie')) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields),
Num.Menagerie.)
df = read.csv('pilot4_data.csv', header = T) %>%
filter(Status == 'IP Address', Progress > 90)
nrow(df)
df = read.csv('pilot4_data.csv', header = T) %>%
filter(Status == 'IP Address') %>%
select(Progress = as.numeric(Progress),
Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('menagerie')) %>%
filter(Progress > 90) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields))
df = read.csv('pilot4_data.csv', header = T) %>%
filter(Status == 'IP Address')
df$Progress
df = read.csv('pilot4_data.csv', header = T) %>%
filter(Status == 'IP Address') %>%
select(Progress = as.numeric(Progress),
Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('menagerie')) %>%
filter(Progress >= 90) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields))
df = read.csv('pilot4_data.csv', header = T) %>%
mutate(Progress = as.numeric(Progress)) %>%
filter(Status == 'IP Address', Progress >= 90) %>%
select(Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('menagerie')) %>%
filter(Progress >= 90) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields))
df = read.csv('pilot4_data.csv', header = T) %>%
mutate(Progress = as.numeric(Progress))
df$Progress
df = read.csv('pilot4_data.csv', header = T) %>%
mutate(Progress = as.numeric(Progress)) %>%
filter(Status == 'IP Address', Progress >= 90)
df = read.csv('pilot4_data.csv', header = T) %>%
mutate(Progress = as.numeric(Progress)) %>%
filter(Status == 'IP Address', Progress >= 90) %>%
select(Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('menagerie')) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields))
nrow(df)
df = read.csv('pilot4_data.csv', header = T) %>%
mutate(Progress = as.numeric(Progress)) %>%
filter(DistributionChannel == 'anonymous', Progress >= 90) %>%
select(Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('menagerie')) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields))
nrow(df)
df = read.csv('pilot4_data.csv', header = T) %>%
mutate(Progress = as.numeric(Progress)) %>%
filter(DistributionChannel == 'anonymous', Progress >= 90) %>%
select(Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('heuristic')) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields))
for (field in fields) {
df = df %>% mutate("{field}" := grepl(field, df$Field, fixed = T))
}
View(df)
df[,6]
df[,6+17]
df[,6+16]
df[,22]
df[,23]
heuristic_cols = 6:22
heuristic_labels = c('Extremely unlikely', 'Moderately unlikely', 'Slightly unlikely', 'Neither likely nor unlikely', 'Slightly likely', 'Moderately likely', 'Extremely likely')
for (i in heuristic_cols) {
df[,i] = factor(df[,i], heuristic_labels, 1:length(heuristic_labels))
}
heuristic_names = c("Anchoring", "Availability heuristic", "Belief bias", "Causal judgment: Abnormal selection", "Decoy effect", "DRM effect", "Halo effect", "Hindsight bias", "Illusion of truth", "Imaginability bias", "Mere exposure effect", "Omission effect in moral judgment", "Recognition heuristic", "Reference price effect", "Representativeness heuristic", "Status quo bias", "Sunk cost bias")
df.long = df %>%
pivot_longer(cols = all_of(heuristic_cols),
names_to = "heuristic_index",
values_to = "heuristic_prediction") %>%
mutate(heuristic_name = factor(heuristic_index, paste0("heuristic_all_", 1:17), heuristic_names),
heuristic_prediction = as.numeric(heuristic_prediction)) %>%
filter(heuristic_name != 'Imaginability bias')
# Sample details ----------------------------------------------------------
nrow(df) # number of subjects
table(df$Role.fac) # split by academic position
df$Role
df.byheuristic = df.long %>%
group_by(heuristic_name) %>%
summarize(mean_prediction = mean(heuristic_prediction, na.rm = T),
se_prediction = se(heuristic_prediction),
pct.high.predictions = mean(heuristic_prediction >= 6, na.rm = T),
pct.low.predictions = mean(heuristic_prediction <= 2, na.rm = T))
mean(df.long$heuristic_prediction)
df.long
df.long = df %>%
pivot_longer(cols = all_of(heuristic_cols),
names_to = "heuristic_index",
values_to = "heuristic_prediction") %>%
mutate(heuristic_name = factor(heuristic_index, paste0("heuristic_all_", 1:17), heuristic_names),
heuristic_prediction = as.numeric(heuristic_prediction)) %>%
filter(heuristic_name != 'Imaginability bias') # we ended up dropping this from our set of heuristics/biases after running this pilot because we could not replicate the effect
df.long
nrow(df)
heuristic_cols
df.long = df %>%
pivot_longer(cols = all_of(heuristic_cols),
names_to = "heuristic_index",
values_to = "heuristic_prediction")
df.long
df.long = df %>%
pivot_longer(cols = all_of(heuristic_cols),
names_to = "heuristic_index",
values_to = "heuristic_prediction") %>%
mutate(heuristic_name = factor(heuristic_index, paste0("heuristic_all_", 1:17), heuristic_names),
heuristic_prediction = as.numeric(heuristic_prediction))
df.long
df.long$heuristic_name
df.long = df %>%
pivot_longer(cols = all_of(heuristic_cols),
names_to = "heuristic_index",
values_to = "heuristic_prediction") %>%
mutate(heuristic_name = factor(heuristic_index, paste0("heuristic_", 1:17), heuristic_names),
heuristic_prediction = as.numeric(heuristic_prediction)) %>%
filter(heuristic_name != 'Imaginability bias') # we ended up dropping this from our set of heuristics/biases after running this pilot because we could not replicate the effect
df.long
# Sample details ----------------------------------------------------------
nrow(df) # number of subjects
table(df$Role.fac) # split by academic position
df.byheuristic = df.long %>%
group_by(heuristic_name) %>%
summarize(mean_prediction = mean(heuristic_prediction, na.rm = T),
se_prediction = se(heuristic_prediction),
pct.high.predictions = mean(heuristic_prediction >= 6, na.rm = T),
pct.low.predictions = mean(heuristic_prediction <= 2, na.rm = T),
test.t = t.test(heuristic_prediction, mu = 4)$statistic,
test.df = t.test(heuristic_prediction, mu = 4)$parameter,
test.p = t.test(heuristic_prediction, mu = 4)$p.value)
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.heuristic, aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
geom_hline(yintercept = 4, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,7), labels = c('Extremely unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long, aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
geom_hline(yintercept = 4, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,7), labels = c('Extremely unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
mean(df.long$heuristic_prediction)
mean(df.long$heuristic_prediction, na.rm = T)
analysis.overall = brm(heuristic_prediction ~ 1 + (1 | Subject) + (1 | heuristic_name),
df.long)
summary(analysis.overall)
hdi(analysis.overall)
analysis.overall = brm(heuristic_prediction ~ 1 + (1 | Subject),
df.long)
hdi(analysis.overall)
# split by subject
df.bysubject = df.long %>%
group_by(Subject) %>%
summarize(
mean.prediction = mean(heuristic_prediction, na.rm = T),
se.prediction = se(heuristic_prediction),
any.above.midpoint = any(heuristic_prediction > 4, na.rm = T),
prediction.range = range(heuristic_prediction,na.rm = T)[2] - range(heuristic_prediction, na.rm = T)[1]) %>%
filter(!is.infinite(prediction.range))
mean(df.bysubject$prediction.range)
# Save output --------------------------------------------------------------
save.image('analysis.rdata')
mean(df.bysubject$prediction.range)
mean(df.bysubject$mean.prediction > 4)
mean(df.bysubject$any.above.midpoint, na.rm = T)
df.byheuristic
rm(list=ls())
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'RColorBrewer', 'afex', 'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
# Load data ---------------------------------------------------------------
fields = c('Judgment and decision-making',
'Cognitive psychology',
'Social psychology',
'Developmental psychology',
'Psychology (other)',
'Behavioral economics',
'Economics (other)',
'Other')
df = read.csv('pilot4_data.csv', header = T) %>%
mutate(Progress = as.numeric(Progress)) %>%
filter(DistributionChannel == 'anonymous', Progress >= 90) %>%
select(Subject = ResponseId,
Role = Q11,
Field = Q24,
Gender = q27,
Age = Q28,
starts_with('heuristic')) %>%
mutate(Role.fac = factor(Role, c('Graduate student', 'Postdoc', 'Assistant Professor', 'Associate Professor', 'Full Professor', 'Not in academia', 'Other')),
Gender.fac = factor(Gender, c('Man', 'Woman', 'Some other way')),
Age = as.numeric(Age),
Field.fac = factor(Field, fields))
for (field in fields) {
df = df %>% mutate("{field}" := grepl(field, df$Field, fixed = T))
}
heuristic_cols = 6:22
heuristic_labels = c('Extremely unlikely', 'Moderately unlikely', 'Slightly unlikely', 'Neither likely nor unlikely', 'Slightly likely', 'Moderately likely', 'Extremely likely')
for (i in heuristic_cols) {
df[,i] = factor(df[,i], heuristic_labels, 1:length(heuristic_labels))
}
heuristic_names = c("Anchoring", "Availability heuristic", "Belief bias", "Causal judgment: Abnormal selection", "Decoy effect", "DRM effect", "Halo effect", "Hindsight bias", "Illusion of truth", "Imaginability bias", "Mere exposure effect", "Omission effect in moral judgment", "Recognition heuristic", "Reference price effect", "Representativeness heuristic", "Status quo bias", "Sunk cost bias")
df.long = df %>%
pivot_longer(cols = all_of(heuristic_cols),
names_to = "heuristic_index",
values_to = "heuristic_prediction") %>%
mutate(heuristic_name = factor(heuristic_index, paste0("heuristic_", 1:17), heuristic_names),
heuristic_prediction = as.numeric(heuristic_prediction)) %>%
filter(heuristic_name != 'Imaginability bias') # we ended up dropping this from our set of heuristics/biases after running this pilot because we could not replicate the effect
# Sample details ----------------------------------------------------------
nrow(df) # number of subjects
table(df$Role.fac) # split by academic position
# Analyze heuristic data --------------------------------------------------
# analyze average overall response, aggregating across heuristics
mean(df.long$heuristic_prediction, na.rm = T)
analysis.overall = brm(heuristic_prediction ~ 1 + (1 | Subject) + (1 | heuristic_name),
df.long)
summary(analysis.overall)
hdi(analysis.overall)
# split by heuristic
df.byheuristic = df.long %>%
group_by(heuristic_name) %>%
summarize(mean_prediction = mean(heuristic_prediction, na.rm = T),
se_prediction = se(heuristic_prediction),
pct.high.predictions = mean(heuristic_prediction >= 6, na.rm = T),
pct.low.predictions = mean(heuristic_prediction <= 2, na.rm = T),
test.t = t.test(heuristic_prediction, mu = 4)$statistic,
test.df = t.test(heuristic_prediction, mu = 4)$parameter,
test.p = t.test(heuristic_prediction, mu = 4)$p.value)
ggplot(df.byheuristic, aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long, aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
geom_hline(yintercept = 4, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,7), labels = c('Extremely unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
# split by subject
df.bysubject = df.long %>%
group_by(Subject) %>%
summarize(
mean.prediction = mean(heuristic_prediction, na.rm = T),
se.prediction = se(heuristic_prediction),
any.above.midpoint = any(heuristic_prediction > 4, na.rm = T),
prediction.range = range(heuristic_prediction,na.rm = T)[2] - range(heuristic_prediction, na.rm = T)[1]) %>%
filter(!is.infinite(prediction.range))
hist(df.bysubject$prediction.range)
mean(df.bysubject$prediction.range)
mean(df.bysubject$mean.prediction > 4)
mean(df.bysubject$any.above.midpoint, na.rm = T)
# Save output --------------------------------------------------------------
save.image('pilot4_analysis.rdata')
hdi(analysis.overall)
rm(list=ls())
