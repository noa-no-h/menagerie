distance.from.anchor = abs(-45 - choice))
#** data preparation ----
df.anchor = df %>%
filter(task_name == 'anchoring',
condition != 'High Anchor') %>% # we only ended up using the low anchor version of the antarctic question for the final study
mutate(condition = factor(condition),
choice = as.numeric(choice),
distance.from.anchor = abs(-45 - choice))
df.anchor.choices = df.anchor %>%
filter(!is.na(choice),
stimulus == 'Antarctic Temperature')
#** data visualization ----
ggplot(df.anchor.choices, aes(x = choice)) +
geom_histogram() +
facet_wrap(~condition)
summary.anchor = df.anchor.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice),
distance.from.anchor.m = mean(distance.from.anchor),
distance.from.anchor.se = se(distance.from.anchor))
ggplot(summary.anchor, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
ggplot(summary.anchor, aes(x = condition, y = distance.from.anchor.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = distance.from.anchor.m - distance.from.anchor.se,
ymax = distance.from.anchor.m + distance.from.anchor.se),
width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
#** introspection ratings ----
df.anchor.intro <- df.anchor %>% filter(!is.na(introspect_rating))
## in experience condition
df.anchor.intro.experience = df.anchor.intro %>%
filter(factor == 'experience')
anchor.mean.prediction.response = mean(df.anchor.choices$choice[df.anchor.choices$factor == 'prediction'])
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -choice,
effect_size_range = range01(effect_size),
showed_effect = factor(choice < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size_range, showed_effect)
df.anchor.intro.experience = df.anchor.intro.experience %>%
left_join(df.anchor.effectsizes, by = 'subject')
View(df.anchor.intro.experience)
# dichotomous
summary.anchor.intro.experience = df.anchor.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.anchor.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Halo Introspection ratings", x = "Showed effect?", y = "Introspection rating") +
theme_custom()
ggplot(summary.anchor.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "Halo Introspection ratings", x = "Showed effect?", y = "Introspection rating") +
theme_custom()
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(title = "Halo Introspection ratings", x = "Effect size", y = "Introspection rating")
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -distance.from.anchor,
effect_size_range = range01(effect_size),
showed_effect = factor(choice < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size_range, showed_effect)
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
# dichotomous
summary.anchor.intro.experience = df.anchor.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.anchor.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom()
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -distance.from.anchor,
effect_size_range = range01(effect_size),
showed_effect = factor(choice < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size_range, showed_effect)
df.anchor.intro.experience = df.anchor.intro.experience %>%
left_join(df.anchor.effectsizes, by = 'subject')
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
## in experience condition
df.anchor.intro.experience = df.anchor.intro %>%
filter(factor == 'experience')
anchor.mean.prediction.response = mean(df.anchor.choices$choice[df.anchor.choices$factor == 'prediction'])
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -distance.from.anchor,
effect_size_range = range01(effect_size),
showed_effect = factor(choice < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size_range, showed_effect)
df.anchor.intro.experience = df.anchor.intro.experience %>%
left_join(df.anchor.effectsizes, by = 'subject')
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
cor(df.anchor.intro.experience$effect.size, df.anchor.intro.experience$introspect_rating)
cor(df.anchor.intro.experience$effect.size, df.anchor.intro.experience$introspect_rating,na.rm=T)
cor.test(df.anchor.intro.experience$effect.size, df.anchor.intro.experience$introspect_rating)
cor.test(df.anchor.intro.experience$effect_size, df.anchor.intro.experience$introspect_rating)
## across conditions
summary.anchor.intro.both <- df.anchor.intro %>% group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.anchor.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition", y = "Influence rating")
#** introspection ratings ----
df.anchor.intro <- df.anchor %>% filter(!is.na(introspect_rating))
## in experience condition
df.anchor.intro.experience = df.anchor.intro %>%
filter(factor == 'experience')
anchor.mean.prediction.response = mean(df.anchor.choices$choice[df.anchor.choices$factor == 'prediction'])
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -choice,#distance.from.anchor
effect_size_range = range01(effect_size),
showed_effect = factor(choice < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size_range, showed_effect)
df.anchor.intro.experience = df.anchor.intro.experience %>%
left_join(df.anchor.effectsizes, by = 'subject')
# dichotomous
summary.anchor.intro.experience = df.anchor.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.anchor.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom()
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
## across conditions
summary.anchor.intro.both <- df.anchor.intro %>% group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.anchor.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition", y = "Influence rating")
analysis.anchor.intro.both = brm(introspect_rating ~ factor,
data = df.anchor.intro,
save_pars = save_pars(group = F))
hdi(analysis.anchor.intro.both)
#* 2 Availability (between-subjects) -------------------------------------------------
#** data preparation ----
df.avail = df %>% filter(task_name == 'availability')
#** data visualization ----
ggplot(df.avail, aes(x = condition, fill = choice)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
analysis.avail = brm(choice ~ condition,
data = df.avail,
family = 'bernoulli',
save_pars = save_pars(group = F))
hdi(analysis.avail)
df.avail.intro = df.avail %>%
group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(df.avail.intro, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Test Version")
df.avail$choice
#* 2 Availability (between-subjects) -------------------------------------------------
#** data preparation ----
df.avail = df %>%
filter(task_name == 'availability') %>%
mutate(choice.binary = choice == 'List 1')
#** data visualization ----
ggplot(df.avail, aes(x = condition, fill = choice)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
#** data visualization ----
ggplot(df.avail, aes(x = condition, fill = choice.binary)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
#** data visualization ----
ggplot(df.avail, aes(x = condition, fill = choice.binary)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
theme_custom()
## in experience condition
df.avail.intro.experience = df.avail %>%
filter(factor == 'experience') %>%
mutate(effect_size = choice.binary,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice.binary, c(T,F), c('Effect', 'No effect')))
# dichotomized
summary.avail.intro.experience <- df.avail.intro.experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary.avail.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "statusquo introspection ratings", x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))+
scale_y_continuous(limits = c(-50, 50))
ggplot(summary.avail.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
#** data preparation ----
df.anchor = df %>%
filter(task_name == 'anchoring',
familiarity == 'No',
condition != 'High Anchor') %>% # we only ended up using the low anchor version of the antarctic question for the final study
mutate(condition = factor(condition),
choice = as.numeric(choice),
distance.from.anchor = abs(-45 - choice))
df.anchor.choices = df.anchor %>%
filter(!is.na(choice),
stimulus == 'Antarctic Temperature')
#** data visualization ----
ggplot(df.anchor.choices, aes(x = choice)) +
geom_histogram() +
facet_wrap(~condition)
df.anchor.choices = df.anchor %>%
filter(!is.na(choice),
stimulus == 'Antarctic Temperature')
#** data visualization ----
ggplot(df.anchor.choices, aes(x = choice)) +
geom_histogram() +
facet_wrap(~condition)
df.anchor.choices
df.anchor
View(df.anchor)
#** data preparation ----
df.anchor = df %>%
filter(task_name == 'anchoring',
condition != 'High Anchor') %>% # we only ended up using the low anchor version of the antarctic question for the final study
mutate(condition = factor(condition),
choice = as.numeric(choice),
distance.from.anchor = abs(-45 - choice)) %>%
group_by(subject) %>% filter(any(familiarity == 'No'))
View(df.anchor)
df.anchor.choices = df.anchor %>%
filter(!is.na(choice),
stimulus == 'Antarctic Temperature')
#** data visualization ----
ggplot(df.anchor.choices, aes(x = choice)) +
geom_histogram() +
facet_wrap(~condition)
summary.anchor = df.anchor.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice),
distance.from.anchor.m = mean(distance.from.anchor),
distance.from.anchor.se = se(distance.from.anchor))
ggplot(summary.anchor, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
#** introspection ratings ----
df.anchor.intro <- df.anchor %>% filter(!is.na(introspect_rating))
## in experience condition
df.anchor.intro.experience = df.anchor.intro %>%
filter(factor == 'experience')
anchor.mean.prediction.response = mean(df.anchor.choices$choice[df.anchor.choices$factor == 'prediction'])
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -choice,#distance.from.anchor
effect_size_range = range01(effect_size),
showed_effect = factor(choice < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size_range, showed_effect)
df.anchor.intro.experience = df.anchor.intro.experience %>%
left_join(df.anchor.effectsizes, by = 'subject')
# dichotomous
summary.anchor.intro.experience = df.anchor.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.anchor.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom()
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -choice,
effect_size2 = -distance.from.anchor,
effect_size_range = range01(effect_size),
showed_effect = factor(choice < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size_range, showed_effect)
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -choice,
effect_size2 = -distance.from.anchor,
effect_size_range = range01(effect_size),
showed_effect = factor(choice < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size2, effect_size_range, showed_effect)
df.anchor.intro.experience = df.anchor.intro.experience %>%
left_join(df.anchor.effectsizes, by = 'subject')
# dichotomous
summary.anchor.intro.experience = df.anchor.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.anchor.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom()
# dichotomous
summary.anchor.intro.experience = df.anchor.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
#** introspection ratings ----
df.anchor.intro <- df.anchor %>% filter(!is.na(introspect_rating))
## in experience condition
df.anchor.intro.experience = df.anchor.intro %>%
filter(factor == 'experience')
anchor.mean.prediction.response = mean(df.anchor.choices$choice[df.anchor.choices$factor == 'prediction'])
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -choice,
effect_size2 = -distance.from.anchor,
effect_size_range = range01(effect_size),
showed_effect = factor(choice < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size2, effect_size_range, showed_effect)
df.anchor.intro.experience = df.anchor.intro.experience %>%
left_join(df.anchor.effectsizes, by = 'subject')
# dichotomous
summary.anchor.intro.experience = df.anchor.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.anchor.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom()
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size2, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
## across conditions
summary.anchor.intro.both <- df.anchor.intro %>% group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.anchor.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition", y = "Influence rating")
#* 2 Availability (between-subjects) -------------------------------------------------
#** data preparation ----
df.avail = df %>%
filter(task_name == 'availability',
familiarity == 'No'
) %>%
mutate(choice.binary = choice == 'List 1')
#** data visualization ----
ggplot(df.avail, aes(x = condition, fill = choice.binary)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
theme_custom()
## in experience condition
df.avail.intro.experience = df.avail %>%
filter(factor == 'experience') %>%
mutate(effect_size = choice.binary,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice.binary, c(T,F), c('Effect', 'No effect')))
# dichotomized
summary.avail.intro.experience <- df.avail.intro.experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary.avail.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
## across conditions
summary.avail.intro.both = df.avail %>%
group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.avail.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Test Version")
#** data preparation ----
df.anchor = df %>%
filter(task_name == 'anchoring',
condition != 'High Anchor') %>% # we only ended up using the low anchor version of the antarctic question for the final study
mutate(condition = factor(condition),
choice = as.numeric(choice),
distance.from.anchor = abs(-45 - choice)) #%>%
df.anchor.choices = df.anchor %>%
filter(!is.na(choice),
stimulus == 'Antarctic Temperature')
#** data visualization ----
ggplot(df.anchor.choices, aes(x = choice)) +
geom_histogram() +
facet_wrap(~condition)
summary.anchor = df.anchor.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice),
distance.from.anchor.m = mean(distance.from.anchor),
distance.from.anchor.se = se(distance.from.anchor))
#* 3 Causal Inference (between-subjects) -------------------------------------------------------------
#** data preparation ----
df.cause = df %>% filter(task_name == 'causal inference') %>%
mutate(choice = as.numeric(choice))
#** data visualization ----
summary.cause = df.cause %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice))
ggplot(summary.cause, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition")
analysis.cause = brm(choice ~ condition,
df.cause,
save_pars = save_pars(group = F))
#** introspection ratings ----
df.cause.intro <- df.cause %>% filter(!is.na(introspect_rating))
summary.cause.intro.both <- df.cause.intro %>% group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.cause.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Test Version")
rm(list=ls())
