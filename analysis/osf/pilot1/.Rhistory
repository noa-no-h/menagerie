theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
# Load data ---------------------------------------------------------------
data <- read.csv('pilot3_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "prediction")))
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot3_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot3_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude)
#font_import(pattern = "Optima", prompt = FALSE)
loadfonts(device = "pdf")
# 1 Affect Heuristic ----
## 1.1 do we see the effect? ----
affect_data = data %>%
filter(task_name == "affect heuristic")%>%
mutate(choice = as.numeric(choice))
summary_affect_data <- affect_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("With passage", "without passage"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_affect_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Affect", x = "Condition", y = "How beneficial is natural gas") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
# 8 Hindsight ----
## 8.1 do we see the effect? ----
hindsight_data = data %>%
filter(task_name == "hindsight effect")%>%
filter(stimulus != "comprehension") %>%
mutate(choice = as.numeric(choice))
summary_hindsight_data <- hindsight_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("knowledge of outcome", "no knowledge of outcome"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_hindsight_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Hindsight", x = "Condition", y = "Percent Likelihood of British Victory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
# 13 primacy effect ----
## 13.1 Do we see the effect? ----
primacy_data <- data %>%
filter(task_name == "primacy order") %>%
filter(choice != "")%>%
mutate(choice = ifelse(choice == "car1",
"chose primacy car",
"chose other car")) %>%
mutate(choice_binary = as.numeric(choice == "chose primacy car"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
summary_primacy_data <- primacy_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice_binary),
se_choice = se.prop(choice_binary),
count = n()
)
ggplot(summary_primacy_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Choices of the primacy car", x = "Condition", y = "Percent who chose primacy car") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
#17 status quo ----
##17.1 do we see the effect? ----
#When subjects were told the status quo,
#were they more likely to recommend the 70/30 allocation?
status_quo_data <- data %>%
filter(task_name == "status_quo") %>%
filter(stimulus != "comprehension") %>%
mutate(choice = ifelse(auxiliary_info1 == "Allocate 50% to auto safety and 50% to highway safety status quo: 50/50",
"status quo",
choice)) %>%
mutate(choice_binary = as.numeric(choice == "status quo"))%>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded")))
summary_status_quo_data <- status_quo_data %>%
group_by(condition) %>%
summarize(
mean_choice = mean(choice_binary),
se_choice = se.prop(choice_binary),
count = n()
)
ggplot(summary_status_quo_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Choices to continue the status quo", x = "Condition", y = "Percent subjects who recommended the status quo") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
#18 sunk cost ----
##18.1 do we see the effect? ----
sunk_cost_data <- data %>%
filter(task_name == "sunk_cost2 effect") %>%
mutate(switched = choice == "Don't Continue Investing",
switched.num = as.numeric(switched))
percentage_sunk_cost_data <- sunk_cost_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("Sunk Cost", "No Sunk Cost"))) %>%
summarize(
total_in_condition = n(),  # Total number of subjects in each condition
switched_count = sum(choice == "Don't Continue Investing")  # Count who chose "Solar-powered pump"
) %>%
mutate(percentage_switched = (switched_count / total_in_condition) * 100)
summary(glm(switched ~ condition, data = sunk_cost_data, family = 'binomial'))
ggplot(percentage_sunk_cost_data, aes(x = condition, y = percentage_switched, fill = condition)) +
geom_bar(stat = "identity") +
labs(title = "Percentage Who Stopped Investing", x = "Condition", y = "Percentage of Choices to Stop Investing") +
geom_text(aes(label = paste0("n=", total_in_condition)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'posterior', 'rstan')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
effect_no_prediction <- c("#e74c3c", "#D3D3D3", "#4793AF")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
# Load data ---------------------------------------------------------------
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "prediction")))
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
## Exclusion
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 1
failed.attn1 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
df <- df %>%
filter(subject %in% demo$subject,
!(subject %in% glitched),
!(subject %in% failed.attn1),
!(subject %in% failed.attn2),
!(subject %in% wrong.trial.num))
length(unique(df$subject)) #518 Participants
df$effect.size = NA
df$effect.size.fac = NA
#* 1 Anchoring (between-subjects) ----------------------------------------------------
#** data preparation ----
df.anchor = df %>%
filter(task_name == 'anchoring',
condition != 'High Anchor') %>% # we only ended up using the low anchor version of the antarctic question for the final study
mutate(condition = factor(condition),
choice = as.numeric(choice),
distance.from.anchor = abs(-45 - choice)) #%>%
#group_by(subject) %>% filter(any(familiarity == 'No'))
df.anchor.choices = df.anchor %>%
filter(!is.na(choice),
stimulus == 'Antarctic Temperature')
#** data visualization ----
ggplot(df.anchor.choices, aes(x = choice)) +
geom_histogram() +
facet_wrap(~condition)
summary.anchor = df.anchor.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice),
distance.from.anchor.m = mean(distance.from.anchor),
distance.from.anchor.se = se(distance.from.anchor))
ggplot(summary.anchor, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
ggplot(summary.anchor, aes(x = condition, y = distance.from.anchor.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = distance.from.anchor.m - distance.from.anchor.se,
ymax = distance.from.anchor.m + distance.from.anchor.se),
width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition", y = "distance from anchor") +
theme_custom()+
scale_fill_manual(values = c("#F37121", "#4793AF"))+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
analysis.anchor = brm(distance.from.anchor ~ condition,
data = df.anchor.choices %>%
mutate(distance.from.anchor = scale(distance.from.anchor),
condition = relevel(condition, ref = "No Anchor")),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.anchor)
check_divergences(analysis.anchor$fit)
summary(analysis.anchor)
hdi(analysis.anchor)
#** introspection ratings ----
df.anchor.intro <- df.anchor %>% filter(!is.na(introspect_rating))
## in experience condition
df.anchor.intro.experience = df.anchor.intro %>%
filter(factor == 'experience')
anchor.mean.prediction.response = mean(df.anchor.choices$distance.from.anchor[df.anchor.choices$factor == 'prediction'])
df.anchor.effectsizes = df.anchor.choices %>%
filter(factor == 'experience') %>%
mutate(effect_size = -distance.from.anchor,
effect_size_range = range01(effect_size),
showed_effect = factor(distance.from.anchor < anchor.mean.prediction.response, c(T,F), c('Effect', 'No effect'))) %>%
select(subject, effect_size, effect_size_range, showed_effect)
df.anchor.intro.experience = df.anchor.intro.experience %>%
left_join(df.anchor.effectsizes, by = 'subject')
# dichotomous
summary.anchor.intro.experience = df.anchor.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.anchor.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom()
analysis.anchor.intro.experience.dichotomized = brm(introspect_rating ~ showed_effect,
df.anchor.intro.experience %>% mutate(introspect_rating = scale(introspect_rating)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.anchor.intro.experience.dichotomized)
check_divergences(analysis.anchor.intro.experience.dichotomized$fit)
summary(analysis.anchor.intro.experience.dichotomized)
hdi(analysis.anchor.intro.experience.dichotomized)
# continuous
ggplot(df.anchor.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
analysis.anchor.intro.experience.continuous = brm(introspect_rating ~ effect_size,
df.anchor.intro.experience %>% mutate(introspect_rating = scale(introspect_rating),
effect_size = scale(effect_size)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.anchor.intro.experience.continuous)
check_divergences(analysis.anchor.intro.experience.continuous$fit)
summary(analysis.anchor.intro.experience.continuous)
hdi(analysis.anchor.intro.experience.continuous)
all_summary_introspection_split = all_data_introspection_both %>%
filter(!is.na(showed_effect)) %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating))
## in experience condition
all_list_introspection_experience = list(df.anchor.intro.experience,
df.avail.intro.experience,
df.cause.intro.experience,
df.decoy.intro.experience,
df.belief.intro.experience,
df.mee.intro.experience)
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'posterior', 'rstan')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
effect_no_prediction <- c("#e74c3c", "#D3D3D3", "#4793AF")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
# Load data ---------------------------------------------------------------
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "prediction")))
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
## Exclusion
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 1
failed.attn1 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
df <- df %>%
filter(subject %in% demo$subject,
!(subject %in% glitched),
!(subject %in% failed.attn1),
!(subject %in% failed.attn2),
!(subject %in% wrong.trial.num))
length(unique(df$subject)) #518 Participants
df$effect.size = NA
df$effect.size.fac = NA
# continuous, standardized within
all_data_introspection_experience = all_data_introspection_experience %>%
group_by(subject) %>%
mutate(effect_size_range_within = scale(effect_size_range),
introspect_rating_within = scale(introspect_rating)) %>%
ungroup()
all_summary_introspection_experience = all_data_introspection_experience %>%
filter(!is.na(showed_effect)) %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating))
## in experience condition
all_list_introspection_experience = list(df.anchor.intro.experience,
df.avail.intro.experience,
df.cause.intro.experience,
df.decoy.intro.experience,
df.belief.intro.experience,
df.mee.intro.experience)
df.mee.intro <- df.mee %>% filter(!is.na(introspect_rating))
## in experience condition
df.mee.intro.experience = df.mee.intro %>%
filter(factor == 'experience')
mee.effectsizes <- df.mee.choices %>%
filter(factor == 'experience') %>%
group_by(subject, condition) %>%
summarize(mean_choice = mean(choice), .groups = 'drop') %>%
pivot_wider(names_from = condition, values_from = mean_choice) %>%
mutate(effect_size = high - low) %>%
select(-high, -low)
df.mee.intro.experience = df.mee.intro.experience %>%
left_join(mee.effectsizes, by = 'subject') %>%
mutate(showed_effect = factor(effect_size > 0, c(T,F), c('Effect', 'No effect')),
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size))
# dichotomized
summary.mee.intro.experience = df.mee.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.mee.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom()
analysis.mee.intro.experience.dichotomized = brm(introspect_rating ~ showed_effect,
df.mee.intro.experience %>% mutate(introspect_rating = scale(introspect_rating)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.mee.intro.experience.dichotomized)
check_divergences(analysis.mee.intro.experience.dichotomized$fit)
summary(analysis.mee.intro.experience.dichotomized)
hdi(analysis.mee.intro.experience.dichotomized)
# continuous
ggplot(df.mee.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
## across conditions
all_list_introspection_both = list(halo_data_introspection,
illusory_data_introspection,
omission_data_introspection,
recognition_data_introspection,
reference_data_introspection,
representativeness_data_introspection)
