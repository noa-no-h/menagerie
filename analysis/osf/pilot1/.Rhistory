WM-204
WM-205
WM-206
WM-207
WM-208
WM-209
WM-210
WM-211
WM-212
WM-213
WM-214
WM-215
WM-216
WM-217
WM-218
WM-219
WM-220
WM-221
WM-222
WM-223
WM-224
WM-225
WM-227
WM-228
WM-229
WM-230
WM-231
WM-232
WM-233
WM-234
WM-235
WM-236
WM-237
WM-238
WM-239
WM-240
WM-241
WM-242
WM-243
WM-244
WM-245
WM-247
WM-248
WM-249
WM-250
WM-251
WM-252
WM-253
WM-254
WM-255
WM-256
WM-257
WM-258"
csv_list <- gsub("\n", ",", ids)
csv_list
load("/Users/am9578/My Drive/Psychology/Projects/ma_choice_okcupid/git/experiments/real2/analysis_output.rdata")
# for NIH reporting
nrow(df.demo)
prop.table(table(df.demo.filt$race))
table(df.demo$race)
sum(df.demo$race != 'White')
sum(df.demo$race != ['White'])
sum(df.demo$race != '[White]')
df.demo$race
sum(df.demo$race != '[\"White\"]')
sum(grepl("Hispanic", df.demo$race, ignore.case = TRUE))
load("/Users/am9578/My Drive/Psychology/Projects/ma_choice/git3/data-analysis/home-fixed/analysis_output.rdata")
table(df.demo.filt$actual.model.fac)
87+40
60+15+26+9
110 / (110 + 127)
rm(list=ls())
load("/Users/am9578/My Drive/Psychology/Projects/ma_choice/git3/data-analysis/movie/analysis_output.rdata")
table(df.demo.filt$actual.model.fac)
30 / (147 + 30 + 23 + 54)
30 / (147 + 30 + 23 + 5)
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
# color palettes: hot for included, cool for excluded
#Included vs. Excluded
in_and_ex <- c("#F37121", "#4793AF")
in_neutral_ex <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
#In&Effect, In&NoEffect, Ex&Effect, Ex&NoEffect
four_colors <- c("#f1c40f", "#e74c3c","#9b59b6", "#1abc9c")
#In&Effect, In&NoEffect, Ex
three_colors <- c("#f1c40f", "#e74c3c","#4793AF")
#In&Effect, Ex
two_colors <- c("#f1c40f", "#e74c3c")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
# Load data ---------------------------------------------------------------
df <- read.csv('pilot1_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "prediction")))
demo <- read.csv('pilot1_demographics.csv') %>%
arrange(subject) %>%
mutate(total_min = total_time / 60000)
df <- df %>% mutate_if(is.character, ~na_if(., ""))
demo <- demo %>% mutate_if(is.character, ~na_if(., ""))
## Exclusion
# subjects that glitched
glitched <- c("A3EQAA13A1LMNY", 'ABICECSTT3MWF', 'A256QIR5XUIP8K', 'A1LJT9OW9UR4GF')
# Attention Check 1
failed.attn1 <- df %>%
filter(task_name == 'attention check 2', auxiliary_info1 == 'Failure') %>%
pull(subject)
# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
df <- df %>%
filter(subject %in% demo$subject,
!(subject %in% glitched),
!(subject %in% failed.attn1),
!(subject %in% failed.attn2),
!(subject %in% wrong.trial.num))
length(unique(df$subject)) #518 Participants
df$effect.size = NA
df$effect.size.fac = NA
#* 3 Causal Inference (between-subjects) -------------------------------------------------------------
#** data preparation ----
df.cause = df %>% filter(task_name == 'causal inference') %>%
mutate(choice = as.numeric(choice))
#** data visualization ----
summary.cause = df.cause %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice))
ggplot(summary.cause, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition")
ggplot(summary.cause, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
ggplot(summary.cause, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
labs(x = "Condition") +
theme_custom()
#** introspection ratings ----
df.cause.intro <- df.cause %>% filter(!is.na(introspect_rating))
summary.cause.intro.both <- df.cause.intro %>% group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.cause.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Test Version")
ggplot(summary.cause.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
labs(x = "Test Version") +
theme_custom()
View(df.cause.intro)
View(df.cause)
#** introspection ratings ----
df.cause.intro <- df.cause %>% filter(!is.na(introspect_rating))
View(df.cause)
ggplot(summary.cause, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
labs(x = "Condition") +
theme_custom()
## in experience condition
df.cause.intro.experience = df.cause %>%
filter(factor == 'experience') %>%
mutate(effect_size = choice,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice > 50, c(T,F), c('Effect', 'No effect')))
# dichotomized
summary.cause.intro.experience <- df.cause.intro.experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
summary.cause.intro.experience
ggplot(summary.cause.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
# continuous
ggplot(df.cause.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
summary.cause.intro.both <- df.cause.intro %>% group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.cause.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
labs(x = "Test Version") +
theme_custom()
ggplot(summary.cause.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
#* 6 Decoy Effect -------------------------------------------------------------
#** data preparation ----
df.decoy = df %>%
filter(task_name == 'decoy effect')
#** data visualization ----
ggplot(df.decoy, aes(x = condition, fill = choice)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
#* 6 Decoy Effect -------------------------------------------------------------
#** data preparation ----
df.decoy = df %>%
filter(task_name == 'decoy effect') %>%
mutate(choice.target = choice == 'Brand N (Target)')
View(df.decoy$choice.target)
#** data visualization ----
summary.decoy = df.decoy %>%
group_by(factor) %>%
summarize(choice.target.m = mean(choice.target),
choice.target.se = se.prop(choice.target))
ggplot(summary.decoy, aes(x = condition, fill = choice.m)) +
geom_bar(position = "dodge")
ggplot(summary.decoy, aes(x = factor, fill = choice.m)) +
geom_bar(position = "dodge")
ggplot(summary.decoy, aes(x = factor, fill = choice.target.m)) +
geom_bar(position = "dodge")
ggplot(summary.decoy, aes(x = factor, fill = choice.target.m)) +
geom_col()
ggplot(summary.decoy, aes(x = factor, y = choice.target, fill = choice.target.m)) +
geom_col()
ggplot(summary.decoy, aes(x = factor, y = choice.target.m, fill = choice.target.m)) +
geom_col()
ggplot(summary.decoy, aes(x = factor, y = choice.target.m, fill = choice.target.m)) +
geom_col() +
geom_errorbar(aes(ymin = choice.target.m - choice.target.se,
ymax = choice.target.m + choice.target.se))
ggplot(summary.decoy, aes(x = factor, y = choice.target.m, fill = choice.target.m)) +
geom_col() +
geom_errorbar(aes(ymin = choice.target.m - choice.target.se,
ymax = choice.target.m + choice.target.se),
width = 0.2)
#** inferential statistics ----
analysis.decoy = brm(choice.target ~ condition,
df.decoy,
family = 'bernoulli')
ggplot(summary.decoy, aes(x = factor, y = choice.target.m, fill = choice.target.m)) +
geom_col() +
geom_errorbar(aes(ymin = choice.target.m - choice.target.se,
ymax = choice.target.m + choice.target.se),
width = 0.2) +
theme_custom()
ggplot(summary.decoy, aes(x = factor, y = choice.target.m)) +
geom_col() +
geom_errorbar(aes(ymin = choice.target.m - choice.target.se,
ymax = choice.target.m + choice.target.se),
width = 0.2) +
theme_custom()
summary(analysis.decoy)
hdi(analysis.decoy)
View(df.decoy)
summary.decoy.intro.both <- df.decoy.intro %>% group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
#** introspection ratings ----
df.decoy.intro <- df.decoy %>%
filter(!is.na(introspect_rating))
summary.decoy.intro.both <- df.decoy.intro %>% group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.decoy.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Test Version")
ggplot(summary.decoy.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
labs(x = "Test Version") +
theme_custom()
df.decoy.intro.experience = df.decoy %>%
filter(factor == 'experience') %>%
mutate(effect_size = choice,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice > 50, c(T,F), c('Effect', 'No effect')))
df.decoy.intro.experience = df.decoy %>%
filter(factor == 'experience') %>%
mutate(effect_size = choice.target,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice > 50, c(T,F), c('Effect', 'No effect')))
# dichotomized
summary.decoy.intro.experience <- df.decoy.intro.experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary.decoy.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
df.decoy.intro.experience = df.decoy %>%
filter(factor == 'experience') %>%
mutate(effect_size = choice.target,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice.target, c(T,F), c('Effect', 'No effect')))
# dichotomized
summary.decoy.intro.experience <- df.decoy.intro.experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary.decoy.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = in_and_ex)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
#* 7 Associative memory (within-subjects) ------------------------------------------------------
#** data preparation ----
df.mem = df %>% filter(task_name == 'associative memory') %>%
mutate(choice.fac = factor(choice))
df.mem.choices <- df.mem %>%
filter(factor == 'Factor-Included') %>%
filter(auxiliary_info1 == 'New')
#** data visualization ----
ggplot(df.mem.choices, aes(x = condition, fill = choice)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
View(df.mem.choices)
df.mem.choices <- df.mem %>%
filter(factor == 'experience') %>%
filter(auxiliary_info1 == 'New')
#** data visualization ----
ggplot(df.mem.choices, aes(x = condition, fill = choice)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
View(df.mem)
#* 7 Associative memory (within-subjects) ------------------------------------------------------
#** data preparation ----
df.mem = df %>% filter(task_name == 'associative memory') %>%
mutate(choice.fac = factor(choice),
choice.orig = choice == 'Original')
df.mem.choices <- df.mem %>%
filter(factor == 'experience',
auxiliary_info1 == 'New')
#** data visualization ----
ggplot(df.mem.choices, aes(x = condition, fill = choice)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
#** data visualization ----
ggplot(df.mem.choices, aes(x = condition, y = choice.orig)) +
geom_bar(position = "dodge") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
#** data visualization ----
summary.mem = df.mem.choices %>%
group_by(condition) %>%
summarize(choice.orig.m = mean(choice.orig),
choice.orig.se = se.prop(choice.orig))
ggplot(summary.mem, aes(x = condition, y = choice.orig)) +
geom_col() +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
ggplot(summary.mem, aes(x = condition, y = choice.orig.m)) +
geom_col() +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20))
ggplot(summary.mem, aes(x = condition, y = choice.orig.m)) +
geom_col() +
geom_errorbar(aes(ymin = choice.orig.m - choice.orig.se,
ymax = choice.orig.m + choice.orig.se),
width = 0.2) +
theme_custom()
#** introspection ratings ----
df.mem.intro = df.mem %>%
filter(!is.na(introspect_rating))
summary.mem.intro.both = df.mem.intro %>%
group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.mem.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Test Version")
ggplot(summary.mem.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme_custom()
analysis.mem.intro.both = brm(introspect_rating ~ factor,
data = df.mem,
save_pars = save_pars(group = F))
df.mem.intro.experience = df.mem.intro %>%
filter(factor == 'Factor-Included')
mem.effectsizes <- df.mem.choices %>%
filter(factor == 'Factor-Included') %>%
group_by(subject, condition) %>%
summarize(mean_choice = mean(choice.orig), .groups = 'drop') %>%
pivot_wider(names_from = condition, values_from = mean_choice)
View(mem.effectsizes)
mem.effectsizes <- df.mem.choices %>%
filter(factor == 'experience') %>%
group_by(subject, condition) %>%
summarize(mean_choice = mean(choice.orig), .groups = 'drop') %>%
pivot_wider(names_from = condition, values_from = mean_choice)
View(mem.effectsizes)
mem.effectsizes <- df.mem.choices %>%
filter(factor == 'experience') %>%
group_by(subject, condition) %>%
summarize(mean_choice = mean(choice.orig), .groups = 'drop') %>%
pivot_wider(names_from = condition, values_from = mean_choice) %>%
mutate(effect_size = Sleep - NonSleep) %>%
select(-Sleep, -NonSleep)
View(mem.effectsizes)
df.mem.intro.experience = df.mem.intro.experience %>%
left_join(mem.effectsizes, by = 'subject') %>%
mutate(showed_effect = factor(effect_size > 0, c(T,F), c('Effect', 'No effect')),
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size))
df.mem.intro.experience$effect.size
df.mem.intro.experience = df.mem.intro %>%
filter(factor == 'Factor-Included')
mem.effectsizes <- df.mem.choices %>%
filter(factor == 'experience') %>%
group_by(subject, condition) %>%
summarize(mean_choice = mean(choice.orig), .groups = 'drop') %>%
pivot_wider(names_from = condition, values_from = mean_choice) %>%
mutate(effect_size = Sleep - NonSleep) %>%
select(-Sleep, -NonSleep)
df.mem.intro.experience = df.mem.intro.experience %>%
left_join(mem.effectsizes, by = 'subject')
df.mem.intro.experience
df.mem.intro.experience = df.mem.intro %>%
filter(factor == 'experience')
mem.effectsizes <- df.mem.choices %>%
filter(factor == 'experience') %>%
group_by(subject, condition) %>%
summarize(mean_choice = mean(choice.orig), .groups = 'drop') %>%
pivot_wider(names_from = condition, values_from = mean_choice) %>%
mutate(effect_size = Sleep - NonSleep) %>%
select(-Sleep, -NonSleep)
df.mem.intro.experience = df.mem.intro.experience %>%
left_join(mem.effectsizes, by = 'subject') %>%
mutate(showed_effect = factor(effect_size > 0, c(T,F), c('Effect', 'No effect')),
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size))
df.mem.intro.experience
View(df.mem.intro.experience)
# dichotomized
summary.mem.intro.experience = df.mem.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.mem.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom()
# continuous
ggplot(df.mem.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
summary.mem.intro.both = df.mem.intro %>%
group_by(factor) %>%
summarize(introspect.m = mean(introspect_rating), introspect.se = se(introspect_rating))
ggplot(summary.mem.intro.both, aes(x = factor, y = introspect.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = introspect.m - introspect.se, ymax = introspect.m + introspect.se), width = .2) +
theme_custom()
