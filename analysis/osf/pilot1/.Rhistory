# Attention Check 2
failed.attn2 <- df %>%
filter(task_name == 'attention check 3', auxiliary_info1 == 'Incorrect') %>%
pull(subject)
# exclude subjects who restarted & took it more than once
wrong.trial.num = df %>% group_by(subject) %>%
summarize(numTrials = n()) %>%
filter(numTrials > 76) %>%
pull(subject)
df <- df %>%
filter(subject %in% demo$subject,
!(subject %in% glitched),
!(subject %in% failed.attn1),
!(subject %in% failed.attn2),
!(subject %in% wrong.trial.num))
length(unique(df$subject)) #518 Participants
df$effect.size = NA
df$effect.size.fac = NA
# Anchoring ----------------------------------------------------
## do people show the effect?----
df.anchor = df %>%
filter(task_name == 'anchoring',
condition != 'High Anchor') %>% # we only ended up using the low anchor version of the antarctic question for the final study
mutate(condition = factor(condition),
choice = as.numeric(choice),
distance.from.anchor = abs(-45 - choice))
df.anchor.choices = df.anchor %>%
filter(!is.na(choice),
stimulus == 'Antarctic Temperature')
ggplot(df.anchor.choices, aes(x = choice)) +
geom_histogram() +
facet_wrap(~condition)
summary.anchor = df.anchor.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice),
distance.from.anchor.m = mean(distance.from.anchor),
distance.from.anchor.se = se(distance.from.anchor))
ggplot(summary.anchor, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
ggplot(summary.anchor, aes(x = condition, y = distance.from.anchor.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = distance.from.anchor.m - distance.from.anchor.se,
ymax = distance.from.anchor.m + distance.from.anchor.se),
width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition", y = "distance from anchor") +
theme_custom()+
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
ggplot(summary.anchor, aes(x = condition, y = distance.from.anchor.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = distance.from.anchor.m - distance.from.anchor.se,
ymax = distance.from.anchor.m + distance.from.anchor.se),
width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition", y = "distance from anchor") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
ggplot(summary.anchor, aes(x = condition, y = distance.from.anchor.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = distance.from.anchor.m - distance.from.anchor.se,
ymax = distance.from.anchor.m + distance.from.anchor.se),
width = .2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition", y = "distance from anchor") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
ggplot(summary.anchor, aes(x = condition, y = distance.from.anchor.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = distance.from.anchor.m - distance.from.anchor.se,
ymax = distance.from.anchor.m + distance.from.anchor.se),
width = .2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition", y = "distance from anchor") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
summary.anchor = df.anchor.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice), choice.se = se(choice),
distance.from.anchor.m = mean(distance.from.anchor),
count = n(),
distance.from.anchor.se = se(distance.from.anchor))
ggplot(summary.anchor, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
ggplot(summary.anchor, aes(x = condition, y = distance.from.anchor.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = distance.from.anchor.m - distance.from.anchor.se,
ymax = distance.from.anchor.m + distance.from.anchor.se),
width = .2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition", y = "distance from anchor") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
ggplot(summary.anchor, aes(x = condition, y = choice.m)) +
geom_col(fill = "lightblue") +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(x = "Condition") +
theme_custom()
ggplot(summary.anchor, aes(x = condition, y = distance.from.anchor.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = distance.from.anchor.m - distance.from.anchor.se,
ymax = distance.from.anchor.m + distance.from.anchor.se),
width = .2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme(axis.text = element_text(size=20), axis.title = element_text(size=20)) +
labs(title = "Anchor Effect",x = "Condition", y = "distance from anchor") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
a
ggplot(df.avail, aes(x = condition, y = percentage, fill = condition)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymin = percentageLower, ymax = percentageUpper),
position = position_dodge(width = 0.7),
width = 0.2) +
scale_fill_manual(
values = c("#F37121", "#4793AF"), # Assuming two conditions, adjust if needed
guide = "none"
) +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20), labels = function(x) paste0(x, "%")) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14)) +
labs(
title = "Availability Heuristic",
y = "Percentage who Chose 'List 1'",
x = "Condition"
) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
theme_custom()
summary.cause = df.cause %>%
group_by(condition) %>%
summarize(choice.m = mean(choice),
choice.se = se(choice),
count = n())
ggplot(summary.cause, aes(x = condition, y = choice.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
labs(title = "Abnormal Selection in Causal Inference", x = "Condition", y = "average causality rating") +
theme_custom() +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
summary.decoy = df.decoy %>%
group_by(factor) %>%
summarize(choice.target.m = mean(choice.target),
choice.target.se = se.prop(choice.target))
ggplot(summary.decoy, aes(x = factor, y = choice.target.m, fill=factor)) +
geom_col() +
geom_errorbar(aes(ymin = choice.target.m - choice.target.se,
ymax = choice.target.m + choice.target.se),
width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
labs(title = "Decoy Effect", x = "Condition", y = "Proportion Chose Brand N (Target)")+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
summary.decoy = df.decoy %>%
group_by(factor) %>%
summarize(choice.target.m = mean(choice.target),
choice.target.se = se.prop(choice.target),
count = n()))
summary.decoy = df.decoy %>%
group_by(factor) %>%
summarize(choice.target.m = mean(choice.target),
choice.target.se = se.prop(choice.target),
count = n())
ggplot(summary.decoy, aes(x = factor, y = choice.target.m, fill=factor)) +
geom_col() +
geom_errorbar(aes(ymin = choice.target.m - choice.target.se,
ymax = choice.target.m + choice.target.se),
width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
labs(title = "Decoy Effect", x = "Condition", y = "Proportion Chose Brand N (Target)")+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
analysis.decoy = brm(choice.target ~ condition,
df.decoy,
prior = default_priors,
family = 'bernoulli')
summary.belief <- df.belief.choices %>%
group_by(condition) %>%
summarize(choice.yes.m = mean(choice.yes),
choice.yes.se = se.prop(choice.yes),
count = n())
ggplot(summary.belief, aes(x = condition, y = choice.yes.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = choice.yes.m - choice.yes.se,
ymax = choice.yes.m + choice.yes.se),
width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
labs(title = "Belief Effect",x = "Condition", y = "Proportion Chose Yes, Valid")+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
df.mee.choices <- df.mee %>%
filter(factor == "experience", !is.na(choice)) %>%
mutate(condition = factor(condition, c(1,25), c('low', 'high')))
summary.mee = df.mee.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice),
choice.se = se(choice),
count = n())
ggplot(summary.mee, aes(x = condition, y = choice.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme_custom() +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
labs(title = "Mere Exposure Effect",x = "Number of repeats", y = "Mean Liking Rating")+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
## do we see the effect? ----
omission_data <- data %>%
filter(task_name == "omission principle") %>%
mutate(choice = as.numeric(choice))
omission_summary <- omission_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("commission", "omission"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(omission_summary, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Omission Principle", x = "Condition", y = "Forbidden to Obligatory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
# Recognition heuristic ----
## do we see the effect? ----
recognition_data <- data %>%
filter(task_name == "recognition: city") %>%
filter(factor == "experience") %>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable',
chose_recognizable_num = as.numeric(chose_recognizable))
recognition_count <- recognition_data %>%
count(auxiliary_info1)
ggplot(recognition_count, aes(x = auxiliary_info1, y = n, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
labs(title = "Recognition Effect for City Population", x = "Within experience", y = "Count") +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
ggplot(recognition_data, aes(x = auxiliary_info1, y = percentage, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
width = 0.2,
position = position_dodge(0.9)
) +
labs(
title = "Recognition Effect for City Population",
x = "Within experience",
y = "Percentage"
) +
geom_text(
aes(label = paste0("n=", n)),
position = position_dodge(0.9),
vjust = -0.5,
family = "Optima"
) +
theme_custom() +
scale_fill_manual(values = exp_control) +
guides(fill = FALSE) +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20), labels = function(x) paste0(x, "%")) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
recognition_data <- data %>%
filter(task_name == "recognition: city") %>%
filter(factor == "experience") %>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable',
chose_recognizable_num = as.numeric(chose_recognizable),
total = sum(n),
percentage = (n / total) * 100,
se_percentage = sqrt((percentage / 100) * (1 - (percentage / 100)) / total) * 100,
lower_ci = percentage -  se_percentage,
upper_ci = percentage + se_percentage
)
recognition_percentage <- recognition_data %>%
group_by(auxiliary_info1) %>%
mutate(
total = n(),
percentage = (n() / total) * 100,
se_percentage = sqrt((percentage / 100) * (1 - (percentage / 100)) / total) * 100,
lower_ci = percentage - se_percentage,
upper_ci = percentage + se_percentage
) %>%
ungroup()
ggplot(recognition_percentage, aes(x = auxiliary_info1, y = percentage, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
width = 0.2,
position = position_dodge(0.9)
) +
labs(
title = "Recognition Effect for City Population",
x = "Within experience",
y = "Percentage"
) +
geom_text(
aes(label = paste0("n=", n())),
position = position_dodge(0.9),
vjust = -0.5,
family = "Optima"
) +
theme_custom() +
scale_fill_manual(values = exp_control) +
guides(fill = FALSE) +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20), labels = function(x) paste0(x, "%")) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
recognition_percentage <- recognition_data %>%
group_by(auxiliary_info1) %>%
mutate(
total = n(),
percentage = (n() / total) * 100,
se_percentage = sqrt((percentage / 100) * (1 - (percentage / 100)) / total) * 100,
lower_ci = percentage - se_percentage,
upper_ci = percentage + se_percentage
) %>%
ungroup()
recognition_count_labels <- recognition_data %>%
count(auxiliary_info1)
recognition_percentage <- left_join(recognition_percentage, recognition_count_labels, by = "auxiliary_info1")
ggplot(recognition_percentage, aes(x = auxiliary_info1, y = percentage, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
width = 0.2,
position = position_dodge(0.9)
) +
labs(
title = "Recognition Effect for City Population",
x = "Within experience",
y = "Percentage"
) +
geom_text(
aes(label = paste0("n=", n.y)),
position = position_dodge(0.9),
vjust = -0.5,
family = "Optima"
) +
theme_custom() +
scale_fill_manual(values = exp_control) +
guides(fill = FALSE) +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20), labels = function(x) paste0(x, "%")) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
ggplot(recognition_percentage, aes(x = auxiliary_info1, y = percentage, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
width = 0.2,
position = position_dodge(0.9)
) +
labs(
title = "Recognition Effect for City Population",
x = "Within experience",
y = "Percentage"
) +
geom_text(
aes(label = paste0("n=", n.y)),
position = position_dodge(0.9),
vjust = -0.5,
family = "Optima"
) +
theme_custom() +
scale_fill_manual(values = exp_control) +
guides(fill = FALSE) +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20), labels = function(x) paste0(x, "%")) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
ggplot(recognition_percentage, aes(x = auxiliary_info1, y = percentage, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
width = 0.2,
position = position_dodge(0.9)
) +
labs(
title = "Recognition Effect for City Population",
x = "Within experience",
y = "Percentage"
) +
geom_text(
aes(label = paste0("n=", n.y)),
position = position_dodge(0.9),
vjust = -0.5,
family = "Optima"
) +
theme_custom() +
scale_fill_manual(values = exp_control) +
guides(fill = FALSE) +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20), labels = function(x) paste0(x, "%")) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
recognition_percentage <- recognition_data %>%
group_by(auxiliary_info1) %>%
mutate(
total = n(),
percentage = (n() / total) * 100,
se_percentage = sqrt((percentage / 100) * (1 - (percentage / 100)) / total) * 100,
lower_ci = percentage - se_percentage,
upper_ci = percentage + se_percentage
)
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
View(recognition_percentage)
recognition_count_labels <- recognition_data %>%
count(auxiliary_info1)
View(recognition_count_labels)
recognition_percentage <- left_join(recognition_percentage, recognition_count_labels, by = "auxiliary_info1")
View(recognition_percentage)
recognition_count_labels <- recognition_data %>%
count(auxiliary_info1)
View(recognition_count_labels)
recognition_percentage_summary <- recognition_summary %>%
group_by(auxiliary_info1) %>%
summarize(
Proportion = sum(n) / total_n,
SE = sqrt((Proportion * (1 - Proportion)) / total_n)
) %>%
mutate(
recognition_count_labels = auxiliary_info1
)
recognition_data <- data %>%
filter(task_name == "recognition") %>%
mutate(choice = as.numeric(choice))
recognition_summary <- recognition_data %>%
count(auxiliary_info1)
total_n <- sum(recognition_summary$n)
recognition_percentage_summary <- recognition_summary %>%
group_by(auxiliary_info1) %>%
summarize(
Proportion = sum(n) / total_n,
SE = sqrt((Proportion * (1 - Proportion)) / total_n)
) %>%
mutate(
recognition_count_labels = auxiliary_info1
)
recognition_summary <- recognition_summary %>%
group_by(auxiliary_info1) %>%
summarize(
Proportion = sum(n) / total_n,
SE = sqrt((Proportion * (1 - Proportion)) / total_n)
) %>%
mutate(
recognition_count_labels = auxiliary_info1
)
recognition_summary <- recognition_summary %>%
group_by(auxiliary_info1) %>%
summarize(
Proportion = sum(n) / total_n,
SE = sqrt((Proportion * (1 - Proportion)) / total_n),
count = n()
) %>%
mutate(
recognition_count_labels = auxiliary_info1
)
