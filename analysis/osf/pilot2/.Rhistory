tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot3_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
print(median(demographics$total_time))
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
# Get sample size pre-exclusion
length(unique(data$subject[data$version == 'pilot3a']))
length(unique(data$subject[data$version == 'pilot3b']))
data <- data %>%
filter(!subject %in% to_exclude,
!is.na(factor))
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
length(unique(data$subject[data$version == 'pilot3a']))
length(unique(data$subject[data$version == 'pilot3a' & data$factor == 'experience']))
length(unique(data$subject[data$version == 'pilot3a' & data$factor == 'control']))
length(unique(data$subject[data$version == 'pilot3b']))
# Affect heuristic ----
affect_data = data %>%
filter(task_name == "affect heuristic")%>%
mutate(choice = as.numeric(choice))
summary_affect_data <- affect_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("With passage", "without passage"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_affect_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "", x = "Group", y = "Benefit ratings") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = c("Experimental\n(Passage)", "Control\n(No passage)"))
affect_analysis = brm(choice ~ condition,
data = affect_data %>% mutate(choice = scale(choice),
condition = factor(condition, levels = c("without passage", "With passage"))),
save_pars = save_pars(group = F),
prior = default_priors,
seed=RANDOM_SEED)
View(affect_data)
affect_db = affect_data %>%
filter(factor == "experience") %>%
select(subject, choice)
num_rows = nrow(affect_db)
real.json = character(num_rows)
for (row.ind in 1:num_rows) {
real.json[row.ind] = toJSON(affect_db[row.ind, ])
}
real.json.towrite = paste0("affect_db = [", paste(real.json, collapse = ","), "];")
write(real.json.towrite, 'affect_db.js')
affect_db = affect_data %>%
filter(factor == "experience") %>%
select(subject, choice)
num_rows = nrow(affect_db)
real.json = character(num_rows)
for (row.ind in 1:num_rows) {
real.json[row.ind] = toJSON(affect_db[row.ind, ])
}
real.json.towrite = paste0("affect_db = ", real.json.content, ";")
affect_db = affect_data %>%
filter(factor == "experience") %>%
select(subject, choice)
num_rows = nrow(affect_db)
real.json = character(num_rows)
for (row.ind in 1:num_rows) {
real.json[row.ind] = toJSON(affect_db[row.ind, ])
}
real.json.towrite = paste0("affect_db = ", real.json, ";")
write(real.json.towrite, 'affect_db.js')
affect_db_json_content <- toJSON(affect_db, pretty = TRUE)
real.json.towrite = paste0("affect_db = ", affect_db_json_content, ";")
write(real.json.towrite, 'trials_db.js')
affect_db_json_content <- toJSON(affect_db, pretty = TRUE)
real.json.towrite = paste0("affect_db = ", affect_db_json_content, ";")
write(real.json.towrite, 'trials_db.js')
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
RANDOM_SEED = 123
set.seed(RANDOM_SEED)
# color palettes
exp_control <- c("#F37121", "#4793AF")
exp_neutral_control <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
# Load data ---------------------------------------------------------------
data <- read.csv('pilot2_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")),
introspect_rating = as.numeric(introspect_rating), # make numeric
introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating, # reverse-coded ones
introspect_rating),
introspect_rating = introspect_rating - 50 # center around midpoint of zero
)
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot2_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot2_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
print(median(demographics$total_time))
all_exclusions <- c(attention_exclude, tab_away_exclude)
to_exclude <- unique(all_exclusions)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects) #324
print(number_to_exclude) #115
#324-115 = 209
data <- data %>%
filter(!subject %in% to_exclude,
!is.na(factor),
!(subject == "2a47a77c48b523a9f73cf427d03a21f5" & factor == "control"),
!(subject == "b4ab5adb6171094fa050298cc896203d" & factor == "control"))
length(unique(data$subject)) #208 Participants
length(unique(data$subject[data$factor == 'experience'])) # 102 experience
length(unique(data$subject[data$factor == 'control'])) # 106 control
loadfonts(device = "pdf")
# Halo effect ----
## do we see the effect? ----
#Did subjects who were shown some attractive and
#some attractive faces think the attractive were more persuasive, with the subjects who only saw neutral faces calling in the middle?
halo_data <- data %>%
filter(task_name == "halo") %>%
mutate(choice = as.numeric(choice),
auxiliary_info1 = as.numeric(auxiliary_info1))
halo_data_choices = halo_data %>%
filter(stimulus != "") %>%
mutate(
condition = case_when(
grepl("img/U", stimulus) ~ "unattractive",
grepl("img/A", stimulus) ~ "attractive",
grepl("img/M", stimulus) ~ "average",
TRUE ~ condition
),
condition = factor(condition, c('attractive', 'average', 'unattractive'))
)
halo_summary <- halo_data_choices %>%
group_by(condition) %>%
filter(condition != "average") %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
mean_attractiveness = mean(auxiliary_info1, na.rm = T),
se_attractiveness = se(auxiliary_info1),
count = n()
)
# manipulation check
ggplot(halo_summary, aes(x = condition, y = mean_attractiveness, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_attractiveness - se_attractiveness, ymax = mean_attractiveness + se_attractiveness), width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
labs(title = "Average Persuasiveness by Condition", x = "Condition", y = "Average Persuasiveness") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
# actual effect
ggplot(halo_summary, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
theme_custom()+
scale_fill_manual(values = exp_control)+
labs(x="Within-subject condition", y = "Average persuasiveness rating")+
guides(fill = "none")+
scale_x_discrete(labels = c("Attractive\ntargets", "Unattractive\ntargets"))
# bayesian analysis
halo_analysis = brm(choice ~ condition + (1 | subject),
data = halo_data_choices %>%
filter(condition != "average") %>%
mutate(choice = scale(choice),
condition = factor(condition, c('unattractive', 'attractive'))),
prior = default_priors,
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95),
seed = RANDOM_SEED)
View(halo_data)
task_data_list <- list(
list(halo_data, "halo", list(subject, choice, stimulus)),
list(illusory_data, "illusory_truth", list(subject, choice, stimulus)),
list(omission_data, "omission", list(subject, choice)),
list(recognition_data, "recognition", list(subject, choice)),
list(reference_data, "reference_price", list(subject, choice)),
list(representativeness_data, "representativeness", list(subject, choice))
)
# Representativeness ----
## do we see the effect? ----
representativeness_data <- data %>%
filter(task_name == "rep") %>%
mutate(choice = as.numeric(choice))
# Reference price ----
## do we see the effect? ----
reference_data <- data %>%
filter(task_name == "reference price") %>%
mutate(choice_parsed = parse_number(choice)) %>%
filter(choice_parsed <= 40)
# Omission effect ----
## do we see the effect? ----
omission_data <- data %>%
filter(task_name == "omission principle") %>%
mutate(choice = as.numeric(choice))
# Illusory truth effect ---------------------------------------------------
## do we see the effect? ----
illusory_data <- data %>%
filter(task_name == "illusion of truth pt2") %>%
mutate(choice = as.numeric(choice),
seen_before = factor(condition %in% c('true_old', 'false_old'), c(T,F), c('Seen', 'Unseen')),
response_over_midpoint = choice > 50)
illusory_data_choices = illusory_data %>%
filter(stimulus != "")
# Halo effect ----
## do we see the effect? ----
#Did subjects who were shown some attractive and
#some attractive faces think the attractive were more persuasive, with the subjects who only saw neutral faces calling in the middle?
halo_data <- data %>%
filter(task_name == "halo") %>%
mutate(choice = as.numeric(choice),
auxiliary_info1 = as.numeric(auxiliary_info1))
task_data_list <- list(
list(halo_data, "halo", list(subject, choice, stimulus)),
list(illusory_data, "illusory_truth", list(subject, choice, stimulus)),
list(omission_data, "omission", list(subject, choice)),
list(recognition_data, "recognition", list(subject, choice)),
list(reference_data, "reference_price", list(subject, choice)),
list(representativeness_data, "representativeness", list(subject, choice))
)
task_data_list <- list(
#list(halo_data, "halo", list(subject, choice, stimulus)),
#list(illusory_data, "illusory_truth", list(subject, choice, stimulus)),
#list(omission_data, "omission", list(subject, choice)),
#list(recognition_data, "recognition", list(subject, choice)),
#list(reference_data, "reference_price", list(subject, choice)),
list(representativeness_data, "representativeness", list(subject, choice))
)
# Representativeness ----
## do we see the effect? ----
representativeness_data <- data %>%
filter(task_name == "rep") %>%
mutate(choice = as.numeric(choice))
representativeness_summary <- representativeness_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded"), labels = c("description", "no description"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
task_data_list <- list(
#list(halo_data, "halo", list(subject, choice, stimulus)),
#list(illusory_data, "illusory_truth", list(subject, choice, stimulus)),
#list(omission_data, "omission", list(subject, choice)),
#list(recognition_data, "recognition", list(subject, choice)),
#list(reference_data, "reference_price", list(subject, choice)),
list(representativeness_data, "representativeness", list(subject, choice))
)
View(representativeness_data)
task_data_list <- list(
#list(halo_data, "halo", list("subject", "choice", "stimulus")),
#list(illusory_data, "illusory_truth", list("subject", "choice", "stimulus")),
#list(omission_data, "omission", list("subject", "choice")),
#list(recognition_data, "recognition", list("subject", "choice")),
#list(reference_data, "reference_price", list("subject", "choice")),
list(representativeness_data, "representativeness", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = task_data_info[[3]]
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(db_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
task_data_list <- list(
#list(halo_data, "halo", list("subject", "choice", "stimulus")),
#list(illusory_data, "illusory_truth", list("subject", "choice", "stimulus")),
#list(omission_data, "omission", list("subject", "choice")),
#list(recognition_data, "recognition", list("subject", "choice")),
#list(reference_data, "reference_price", list("subject", "choice")),
list(representativeness_data, "representativeness", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = task_data_info[[3]]
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(to_select)
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(db_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
task_data_list <- list(
#list(halo_data, "halo", list("subject", "choice", "stimulus")),
#list(illusory_data, "illusory_truth", list("subject", "choice", "stimulus")),
#list(omission_data, "omission", list("subject", "choice")),
#list(recognition_data, "recognition", list("subject", "choice")),
#list(reference_data, "reference_price", list("subject", "choice")),
list(representativeness_data, "representativeness", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = task_data_info[[3]]
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of((to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
task_data_list <- list(
#list(halo_data, "halo", list("subject", "choice", "stimulus")),
#list(illusory_data, "illusory_truth", list("subject", "choice", "stimulus")),
#list(omission_data, "omission", list("subject", "choice")),
#list(recognition_data, "recognition", list("subject", "choice")),
#list(reference_data, "reference_price", list("subject", "choice")),
list(representativeness_data, "representativeness", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = task_data_info[[3]]
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(db_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
task_data_list <- list(
#list(halo_data, "halo", list("subject", "choice", "stimulus")),
#list(illusory_data, "illusory_truth", list("subject", "choice", "stimulus")),
#list(omission_data, "omission", list("subject", "choice")),
#list(recognition_data, "recognition", list("subject", "choice")),
#list(reference_data, "reference_price", list("subject", "choice")),
list(representativeness_data, "representativeness", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(db_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
task_data_list <- list(
#list(halo_data, "halo", list("subject", "choice", "stimulus")),
#list(illusory_data, "illusory_truth", list("subject", "choice", "stimulus")),
#list(omission_data, "omission", list("subject", "choice")),
#list(recognition_data, "recognition", list("subject", "choice")),
#list(reference_data, "reference_price", list("subject", "choice")),
list(representativeness_data, "representativeness", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
task_data_list <- list(
list(halo_data, "halo", list("subject", "choice", "stimulus")),
list(illusory_data, "illusory_truth", list("subject", "choice", "stimulus")),
list(omission_data, "omission", list("subject", "choice")),
list(recognition_data, "recognition", list("subject", "choice")),
list(reference_data, "reference_price", list("subject", "choice")),
list(representativeness_data, "representativeness", list("subject", "choice"))
)
# Recognition heuristic ----
## do we see the effect? ----
recognition_data <- data %>%
filter(task_name == "recognition: city") %>%
filter(factor == "experience") %>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable',
chose_recognizable_num = as.numeric(chose_recognizable))
# save for observer ----
task_data_list <- list(
list(halo_data, "halo", list("subject", "choice", "stimulus")),
list(illusory_data, "illusory_truth", list("subject", "choice", "stimulus")),
list(omission_data, "omission", list("subject", "choice")),
list(recognition_data, "recognition", list("subject", "choice")),
list(reference_data, "reference_price", list("subject", "choice")),
list(representativeness_data, "representativeness", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
