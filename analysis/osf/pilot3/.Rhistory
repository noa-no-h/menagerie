scale_y_continuous(labels = scales::percent_format(scale = 1)) +
labs(
title = "Percentage of Choices for Each Car",
x = "Car Choice",
y = "Percentage",
fill = "Car"
) +
theme_custom() +
guides(fill = FALSE) +
scale_fill_manual(values = exp_control) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
ggplot(primacy_graph_data, aes(x = choice, y = percent, fill = choice)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = percent - se, ymax = percent + se),
width = 0.2,
color = "black",
linewidth = 0.5
) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
labs(
title = "Percentage of Choices for Each Car",
x = "Car Choice",
y = "Percentage",
fill = "Car"
) +
theme_custom() +
guides(fill = FALSE) +
scale_fill_manual(values = exp_control) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
ggplot(primacy_graph_data, aes(x = choice, y = percent, fill = choice)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = percent - se, ymax = percent + se),
width = 0.2,
color = "black",
linewidth = 0.5
) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_y_continuous(labels = c("positive attributes first","negative attributes first")::percent_format(scale = 1)) +
ggplot(primacy_graph_data, aes(x = choice, y = percent, fill = choice)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = percent - se, ymax = percent + se),
width = 0.2,
color = "black",
linewidth = 0.5
) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
cale_x_discrete(labels = c("car1" = "positive attributes first", "car2" = "negative attributes first"))+
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
labs(
title = "Percentage of Choices for Each Car",
x = "Car Choice",
y = "Percentage chosen",
fill = "Car"
) +
theme_custom() +
guides(fill = FALSE) +
scale_fill_manual(values = exp_control) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
ggplot(primacy_graph_data, aes(x = choice, y = percent, fill = choice)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = percent - se, ymax = percent + se),
width = 0.2,
color = "black",
linewidth = 0.5
) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_x_discrete(labels = c("car1" = "positive attributes first", "car2" = "negative attributes first"))+
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
labs(
title = "Percentage of Choices for Each Car",
x = "Car Choice",
y = "Percentage chosen",
fill = "Car"
) +
theme_custom() +
guides(fill = FALSE) +
scale_fill_manual(values = exp_control) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
df.recognition = data %>%
filter(task_name == 'recognition: city') %>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable') %>%
group_by(factor) %>%
summarize(
n = n(),
p = mean(chose_recognizable),
se = sqrt(p * (1 - p) / n),
lower = p - se,
upper = p + se,
percentage = p * 100,
percentageLower = lower * 100,
percentageUpper = upper * 100
)
ggplot(df.recognition, aes(x = factor, y = percentage, fill = factor)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymin = percentageLower, ymax = percentageUpper),
position = position_dodge(width = 0.7),
width = 0.2) +
scale_fill_manual(
values = c("#F37121", "#4793AF"),
guide = "none"
) +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20), labels = function(x) paste0(x, "%")) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14)) +
labs(
title = "Recognition Heuristic",
y = "Percentage who Chose the Recognizable City",
x = "Condition"
) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
theme_custom()
recognition_data <- data %>%
filter(task_name == "recognition: city") %>%
filter(factor == "experience") %>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable',
chose_recognizable_num = as.numeric(chose_recognizable))
recognition_count <- recognition_data %>%
count(auxiliary_info1)
ggplot(recognition_count, aes(x = auxiliary_info1, y = n, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
labs(title = "Recognition Effect for City Population", x = "Within experience", y = "Count") +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
recognition_data <- data %>%
filter(task_name == "recognition: city")%>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable')
recognition_summary <- recognition_data %>%
count(auxiliary_info1, factor) %>%
pivot_wider(names_from = factor, values_from = n, values_fill = 0)
total_n <- sum(recognition_summary$n)
recognition_summary <- recognition_summary %>%
group_by(auxiliary_info1) %>%
summarize(
Proportion = sum(n) / total_n,
SE = sqrt((Proportion * (1 - Proportion)) / total_n),
count = n()
) %>%
mutate(
recognition_count_labels = auxiliary_info1
)
recognition_data <- data %>%
filter(task_name == "recognition: city") %>%
filter(factor == "experience") %>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable',
chose_recognizable_num = as.numeric(chose_recognizable))
recognition_count <- recognition_data %>%
count(auxiliary_info1)
ggplot(recognition_count, aes(x = auxiliary_info1, y = n, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
labs(title = "Recognition Effect for City Population", x = "Within experience", y = "Count") +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
recognition_data <- data %>%
filter(task_name == "recognition: city") %>%
filter(factor == "experience") %>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable',
chose_recognizable_num = as.numeric(chose_recognizable))
recognition_count <- recognition_data %>%
count(auxiliary_info1)
ggplot(recognition_count, aes(x = auxiliary_info1, y = n, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
labs(title = "Recognition Effect for City Population", x = "Within experience", y = "Count") +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
recognition_data <- data %>%
filter(task_name == "recognition: city") %>%
filter(factor == "experience") %>%
mutate(chose_recognizable = auxiliary_info1 == 'chose recognizable',
chose_recognizable_num = as.numeric(chose_recognizable))
recognition_summary <- recognition_data %>%
group_by(auxiliary_info1) %>%
summarise(n = n(), .groups = 'drop') %>%
mutate(
total_n = sum(n),
proportion = n / total_n,
percent = proportion * 100,
se_proportion = sqrt(proportion * (1 - proportion) / n),
se_percent = se_proportion * 100
)
ggplot(recognition_summary, aes(x = auxiliary_info1, y = percent, fill = auxiliary_info1)) +
geom_bar(stat = "identity", color = "black") +
geom_errorbar(
aes(ymin = percent - se_percent, ymax = percent + se_percent),
width = 0.25,
color = "black",
linewidth = 0.5
) +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9),
vjust = -0.5, # Adjust this if text overlaps with error bars too much
family = "Optima",
size = 3.5) +
scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, max(recognition_summary$percent + recognition_summary$se_percent, na.rm = TRUE) * 1.1), expand = c(0,0)) +
labs(
title = "Recognition Effect for City Population",
x = "Within experience",
y = "Percentage"
) +
theme_custom() +
scale_fill_manual(values = exp_control) +
guides(fill = FALSE) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14)) +
theme(
plot.title = element_text(hjust = 0.5, size = 16), # Added for completeness if theme_custom doesn't set it
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
ggplot(recognition_summary, aes(x = auxiliary_info1, y = percent, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = percent - se_percent, ymax = percent + se_percent),
width = 0.25,
color = "black",
linewidth = 0.5
) +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9),
vjust = -0.5, # Adjust this if text overlaps with error bars too much
family = "Optima",
size = 3.5) +
scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, max(recognition_summary$percent + recognition_summary$se_percent, na.rm = TRUE) * 1.1), expand = c(0,0)) +
labs(
title = "Recognition Effect for City Population",
x = "Within experience",
y = "Percentage"
) +
theme_custom() +
scale_fill_manual(values = exp_control) +
guides(fill = FALSE) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14)) +
theme(
plot.title = element_text(hjust = 0.5, size = 16), # Added for completeness if theme_custom doesn't set it
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
ggplot(recognition_summary, aes(x = auxiliary_info1, y = percent, fill = auxiliary_info1)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = percent - se_percent, ymax = percent + se_percent),
width = 0.25,
color = "black",
linewidth = 0.5
) +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9),
vjust = -0.5, # Adjust this if text overlaps with error bars too much
family = "Optima",
size = 3.5) +
scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, max(recognition_summary$percent + recognition_summary$se_percent, na.rm = TRUE) * 1.1), expand = c(0,0)) +
labs(
title = "Recognition Effect for City Population",
x = "Chose the Recognizable City",
y = "Percentage"
) +
theme_custom() +
scale_fill_manual(values = exp_control) +
guides(fill = FALSE) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14)) +
theme(
plot.title = element_text(hjust = 0.5, size = 16), # Added for completeness if theme_custom doesn't set it
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
# Reference price ----
## do we see the effect? ----
reference_data <- data %>%
filter(task_name == "reference price") %>%
mutate(choice_parsed = parse_number(choice)) %>%
filter(choice_parsed <= 40)
reference_summary <- reference_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("hotel", "motel"))) %>%
summarize(
mean_choice = mean(choice_parsed),
se_choice = se(choice_parsed),
count = n()
)
ggplot(reference_summary, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Amount Willing to Pay for Beer", x = "Condition", y = "Average Amount Willing to Pay (Dollars)") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
illusory_data <- data %>%
filter(task_name == "illusion of truth pt2") %>%
mutate(choice = as.numeric(choice),
seen_before = factor(condition %in% c('true_old', 'false_old'), c(T,F), c('Seen', 'Unseen')),
response_over_midpoint = choice > 50)
illusory_data_choices = illusory_data %>%
filter(stimulus != "")
illusory_summary = illusory_data_choices %>%
filter(factor == 'experience') %>%
group_by(seen_before) %>%
summarize(mean_choice = mean(choice),
se_choice = se(choice),
mean_response_over_midpoint = mean(response_over_midpoint),
se_response_over_midpoint = se.prop(response_over_midpoint))
ggplot(illusory_summary, aes(x = seen_before, y = mean_choice, fill = seen_before)) +
geom_col() +
geom_errorbar(aes(ymin = mean_choice - se_choice,
ymax = mean_choice + se_choice),
width = 0.2) +
theme_custom() +
labs(title = "Illusory Truth Effect", x = "Seen Before?", y = "Truth Rating") +
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
ggplot(illusory_summary_introspection_experience,
aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "illusory Introspection ratings", x = "Showed effect?", y = "Introspection rating") +
theme_custom() +
scale_fill_manual(values = effect_no) +
guides(fill = F)
illusory_summary = illusory_data_choices %>%
filter(factor == 'experience') %>%
group_by(seen_before) %>%
summarize(count = n(),
mean_choice = mean(choice),
se_choice = se(choice),
mean_response_over_midpoint = mean(response_over_midpoint),
se_response_over_midpoint = se.prop(response_over_midpoint))
ggplot(illusory_summary, aes(x = seen_before, y = mean_choice, fill = seen_before)) +
geom_col() +
geom_errorbar(aes(ymin = mean_choice - se_choice,
ymax = mean_choice + se_choice),
width = 0.2) +
theme_custom() +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
labs(title = "Illusory Truth Effect", x = "Seen Before?", y = "Truth Rating") +
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
# Omission effect ----
## do we see the effect? ----
omission_data <- data %>%
filter(task_name == "omission principle") %>%
mutate(choice = as.numeric(choice))
omission_summary <- omission_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("commission", "omission"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(omission_summary, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Omission Principle", x = "Condition", y = "Forbidden to Obligatory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
representativeness_data <- data %>%
filter(task_name == "rep") %>%
mutate(choice = as.numeric(choice))
representativeness_summary <- representativeness_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("Factor-Included", "Factor-Excluded"), labels = c("description", "no description"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(representativeness_summary, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Representativeness Heuristic", x = "Condition", y = "average likelihood of engineer") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = exp_control)+
guides(fill = "none")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
# Affect heuristic ----
affect_data = data %>%
filter(task_name == "affect heuristic")%>%
mutate(choice = as.numeric(choice))
summary_affect_data <- affect_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("With passage", "without passage"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_affect_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Affect", x = "Condition", y = "How beneficial is natural gas") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
ggplot(summary_affect_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Affect Heuristic", x = "Condition", y = "How beneficial is natural gas") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
hindsight_data = data %>%
filter(task_name == "hindsight effect")%>%
filter(stimulus != "comprehension") %>%
mutate(choice = as.numeric(choice))
summary_hindsight_data <- hindsight_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("knowledge of outcome", "no knowledge of outcome"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_hindsight_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Hindsight", x = "Condition", y = "Percent Likelihood of British Victory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
ggplot(summary_hindsight_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Hindsight Bias", x = "Condition", y = "Percent Likelihood of British Victory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
