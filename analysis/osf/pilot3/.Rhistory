left_join(survey_one %>% select(participantCode, condition, starts_with("initial_ratings_"), chosen_mug, initial_rating_chosen, NFC_category, self_reflection_category, self_insight_category, mug_category), by = "participantCode", relationship = "many-to-many") %>%
filter(!is.na(participantCode)) %>%
rename(final_rating = `Using this scale, please rate how much you now like the mug from the experiment`) %>%
mutate(final_rating = as.numeric(str_extract(final_rating, "\\d+$")))%>%
rename(mug_location = `Where is the mug currently? - Selected Choice`) %>%
rename(how_often_used = `How often have you used the mug this past week?`) %>%
rename(money = `Q28 - How much money would it take (hypothetically) to buy the mug from you?  (Please answer in dollars using the slider bar)`) %>%
mutate(money = as.numeric(money)) %>%
mutate(rating_difference = as.numeric(final_rating) - as.numeric(initial_rating_chosen)) %>%
# mutate(art_expertise = case_when(
#   `Approximately how many hours did you spend in art courses/trainings?` == "11-100 hours" ~ "expert",
#   TRUE ~ "novice"
# )) %>%
mutate(art_expertise = case_when(
`Approximately how many hours did you spend in art courses/trainings?` %in% c("more than 100 hours", "11-100 hours") ~ "expert",
TRUE ~ "novice"
))%>%
select(participantCode,starts_with("initial_ratings_"), art_expertise,`Approximately how many hours did you spend in art courses/trainings?`, mug_location, how_often_used, money, condition, chosen_mug, initial_rating_chosen, final_rating, rating_difference, NFC_category, self_reflection_category, self_insight_category, mug_category)%>%
filter(!is.na(condition ))
View(follow_up)
# mug choice by condition: low art expertise ----
art_novice_all_subjects_survey_one <- follow_up %>%
filter(art_expertise == "novice") %>%
rowwise() %>%
mutate(
average_rating_art = mean(c(initial_ratings_The_Scream, initial_ratings_Almond_Blossoms), na.rm = TRUE),
average_rating_non_art = mean(c(initial_ratings_Owls, `initial_ratings_Peli-cant`, initial_ratings_Always_Make_New_Mistakes), na.rm = TRUE)
) %>%
ungroup()
art_novice_summary_data <- art_novice_all_subjects_survey_one %>%
select(average_rating_art, average_rating_non_art, condition)%>%
pivot_longer(cols = starts_with("average_rating"),
names_to = "mug_type",
values_to = "rating") %>%
group_by(condition, mug_type) %>%
summarise(
mean_rating = mean(rating),
se_rating = se(rating),
n_rating = n()
)
art_novice_plot_data <- art_novice_summary_data %>%
mutate(mug_type = recode(mug_type,
"average_rating_art" = "Art",
"average_rating_non_art" = "Non-art"))
ggplot(art_novice_plot_data, aes(x = mug_type, y = mean_rating, color = condition, group = condition)) +
geom_line(aes(linetype = condition), size = 1) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = mean_rating - se_rating, ymax = mean_rating + se_rating), width = 0.2) +
geom_text(aes(label = paste("n =", n_rating), y = mean_rating),
hjust = 1.5, vjust = 0, family = "optima", size = 5) +
labs(title = "Mug Art Novice: Mean Ratings of Mug Type by Condition",
x = "Mug Type",
y = "Mean Rating") +
theme_custom() +
scale_y_continuous(limits = c(1, 9), breaks = 1:9) +
scale_color_brewer(palette = "Set1", direction = -1) +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 10))
View(survey_one)
correlation_sr_si <- cor(survey_one$self_reflection, survey_one$self_insight, method = "pearson")
correlation_sr_nfc <- cor(survey_one$self_reflection, survey_one$NFC, method = "pearson")
correlation_si_nfc <- cor(survey_one$self_insight, survey_one$NFC, method = "pearson")
print(paste("Correlation coefficient sr-si:", correlation_sr_si))
print(paste("Correlation coefficient sr-nfc:", correlation_sr_nfc))
print(paste("Correlation coefficient si-nfc:", correlation_si_nfc))
ggplot(df, aes(x = survey_one$self_reflection, y = survey_one$self_insight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self reflection vs self insight", x = "X values", y = "Y values") +
theme_minimal()
ggplot(study_one, aes(x = survey_one$self_reflection, y = survey_one$self_insight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self reflection vs self insight", x = "X values", y = "Y values") +
theme_minimal()
ggplot(survey_one, aes(x = survey_one$self_reflection, y = survey_one$self_insight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self reflection vs self insight", x = "X values", y = "Y values") +
theme_minimal()
ggplot(survey_one, aes(x = survey_one$self_reflection, y = survey_one$self_insight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self reflection vs self insight", x = "self-reflection", y = "self-insight") +
theme_minimal()
ggplot(survey_one, aes(x = self_reflection, y = self_insight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self reflection vs self insight", x = "self-reflection", y = "self-insight") +
theme_minimal()
ggplot(survey_one, aes(x = self_reflection, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self reflection vs need for cognition", x = "self-reflection", y = "NFC") +
theme_minimal()
ggplot(survey_one, aes(x = self_reflection, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self insight vs need for cognition", x = "self-reflection", y = "NFC") +
theme_minimal()
ggplot(survey_one, aes(x = self_reflection, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Optional regression line
labs(title = "Scatterplot of Self insight vs Need for Cognition",
x = "Self-Reflection", y = "NFC") +
theme_minimal() +
annotate("text", x = max(survey_one$self_reflection, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_sr_nfc, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_reflection, y = self_insight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self reflection vs self insight", x = "self-reflection", y = "self-insight") +
theme_minimal()+
annotate("text", x = max(survey_one$self_reflection, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_sr_si, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_reflection, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Optional regression line
labs(title = "Scatterplot of Self insight vs Need for Cognition",
x = "Self-Reflection", y = "NFC") +
theme_minimal() +
annotate("text", x = max(survey_one$self_reflection, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_sr_nfc, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_reflection, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self insight vs need for cognition", x = "self-reflection", y = "NFC") +
theme_minimal()+
annotate("text", x = max(survey_one$self_reflection, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_si_nfc, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_insight, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self insight vs need for cognition", x = "self-reflection", y = "NFC") +
theme_minimal()+
annotate("text", x = max(survey_one$self_insight, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_si_nfc, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_reflection, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Optional regression line
labs(title = "Scatterplot of Self insight vs Need for Cognition",
x = "Self-Reflection", y = "NFC") +
theme_minimal() +
annotate("text", x = max(survey_one$self_reflection, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_sr_nfc, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_reflection, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Optional regression line
labs(title = "Scatterplot of Self Reflection vs Need for Cognition",
x = "Self-Reflection", y = "NFC") +
theme_minimal() +
annotate("text", x = max(survey_one$self_reflection, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_sr_nfc, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_reflection, y = self_insight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self reflection vs self insight", x = "self-reflection", y = "self-insight") +
theme_minimal()+
annotate("text", x = max(survey_one$self_reflection, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_sr_si, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_reflection, y = self_insight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self reflection vs self insight", x = "self-reflection", y = "self-insight") +
theme_minimal()+
annotate("text", x = max(survey_one$self_reflection, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_sr_si, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_reflection, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Optional regression line
labs(title = "Scatterplot of Self Reflection vs Need for Cognition",
x = "Self-Reflection", y = "NFC") +
theme_minimal() +
annotate("text", x = max(survey_one$self_reflection, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_sr_nfc, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
ggplot(survey_one, aes(x = self_insight, y = NFC)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Optional regression line
labs(title = "Scatterplot of Self insight vs need for cognition", x = "self-reflection", y = "NFC") +
theme_minimal()+
annotate("text", x = max(survey_one$self_insight, na.rm = TRUE),
y = min(survey_one$NFC, na.rm = TRUE),
label = paste("r =", round(correlation_si_nfc, 3)),
hjust = 1, vjust = 0, size = 5, color = "red")
all_subjects_survey_one <- follow_up %>%
rowwise() %>%
mutate(
average_rating_all = mean(c(initial_ratings_Owls, initial_ratings_The_Scream, initial_ratings_Almond_Blossoms, `initial_ratings_Peli-cant`, initial_ratings_Always_Make_New_Mistakes)),
average_rating_not_chosen = mean(c(
if_else(chosen_mug != "Always_Make_New_Mistakes", initial_ratings_Always_Make_New_Mistakes, NA_real_),
if_else(chosen_mug != "Owls", initial_ratings_Owls, NA_real_),
if_else(chosen_mug != "The_Scream", initial_ratings_The_Scream, NA_real_),
if_else(chosen_mug != "Almond_Blossoms", initial_ratings_Almond_Blossoms, NA_real_),
if_else(chosen_mug != "Peli-cant", `initial_ratings_Peli-cant`, NA_real_)
), na.rm = TRUE),
highest_rating = max(c(initial_ratings_Owls, initial_ratings_The_Scream, initial_ratings_Always_Make_New_Mistakes, initial_ratings_Almond_Blossoms, `initial_ratings_Peli-cant`), na.rm = TRUE),
chosen_is_highest = if_else(chosen_mug == "No_mug",
"No mug",
if_else(
(chosen_mug == "Owls" && initial_ratings_Owls == highest_rating) ||
(chosen_mug == "The_Scream" && initial_ratings_The_Scream == highest_rating) ||
(chosen_mug == "Always_Make_New_Mistakes" && initial_ratings_Always_Make_New_Mistakes == highest_rating) ||
(chosen_mug == "Almond_Blossoms" && initial_ratings_Almond_Blossoms == highest_rating) ||
(chosen_mug == "Peli-cant" && `initial_ratings_Peli-cant` == highest_rating),
"Yes", "No"
)
)
) %>%
ungroup() %>%
mutate(chosen_is_highest = factor(chosen_is_highest, levels = c("Yes", "No", "No mug")))
ggplot(data = all_subjects_survey_one, aes(x = chosen_is_highest, fill = chosen_is_highest)) +
geom_bar() +  # Adding color for aesthetics
labs(title = "Chosen Mug Highest Rated?",
x = "Was Chosen Mug Highest Rated?",
y = "Count") +
theme_custom() +
scale_fill_brewer(palette = "Set2")+
guides(fill = FALSE, color = FALSE)
# Calculate counts for each bar
count_data <- all_subjects_survey_one %>%
count(chosen_is_highest)
ggplot(data = all_subjects_survey_one, aes(x = chosen_is_highest, fill = chosen_is_highest)) +
geom_bar() +  # Adding color for aesthetics
geom_text(data = count_data, aes(label = n, y = n), vjust = -0.5, size = 5, family = "Optima") + # Adding counts above bars
labs(title = "Chosen Mug Highest Rated?",
x = "Was Chosen Mug Highest Rated?",
y = "Count") +
theme_custom() +
scale_fill_brewer(palette = "Set2") +
guides(fill = FALSE, color = FALSE)
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
# color palettes
exp_control <- c("#F37121", "#4793AF")
exp_neutral_control <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# Load data ---------------------------------------------------------------
data <- read.csv('pilot3_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")))
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot3_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot3_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
data <- data %>%
filter(!subject %in% to_exclude)
#font_import(pattern = "Optima", prompt = FALSE)
loadfonts(device = "pdf")
View(data)
print(median(demographics$total_time))
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
# color palettes
exp_control <- c("#F37121", "#4793AF")
exp_neutral_control <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# Load data ---------------------------------------------------------------
data <- read.csv('pilot2_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")),
introspect_rating = as.numeric(introspect_rating), # make numeric
introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating, # reverse-coded ones
introspect_rating),
introspect_rating = introspect_rating - 50 # center around midpoint of zero
)
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot2_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot2_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
print(median(demographics$total_time))
print(median(demographics$total_time))
demographics <- read.csv('pilot3_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
setwd(here())
demographics <- read.csv('pilot3_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
print(median(demographics$total_time))
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
# color palettes
exp_control <- c("#F37121", "#4793AF")
exp_neutral_control <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# Load data ---------------------------------------------------------------
data <- read.csv('pilot2_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")),
introspect_rating = as.numeric(introspect_rating), # make numeric
introspect_rating = if_else(
introspect_rating != "" & task_name %in% c("associative memory", "availability",
"decoy effect", "hindsight bias",
"omission principle", "reference price",
"status_quo", "sunk_cost effect"),
100 - introspect_rating, # reverse-coded ones
introspect_rating),
introspect_rating = introspect_rating - 50 # center around midpoint of zero
)
View(data)
unique(data$task_name)
data <- read.csv('pilot2_data.csv')
View(data)
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
# color palettes
exp_control <- c("#F37121", "#4793AF")
exp_neutral_control <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# Load data ---------------------------------------------------------------
data <- read.csv('pilot3_data.csv') %>%
filter(subject != "") %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")))
subjects_all = data %>%
pull(subject) %>%
unique()
View(data)
