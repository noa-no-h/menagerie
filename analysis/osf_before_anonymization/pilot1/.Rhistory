scale_x_discrete(labels = NULL) +
scale_y_continuous(limits = c(-50, 50)) +
labs(x = '', y = 'Self-reported bias') +
geom_hline(yintercept = 0, color = 'white', linetype = 'dashed')
test
20.6+1.96*1.2
20.6-1.96*1.2
summary(all_analysis_introspection_experience_dichotomous)
hdi(all_analysis_introspection_experience_dichotomous)
summary(all_analysis_introspection_experience_continuous)
hdi(all_analysis_introspection_experience_continuous)
rm(list=ls())
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf_before_anonymization/pilot4/pilot4_output.rdata")
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'RColorBrewer', 'afex', 'this.path', 'brms', 'bayestestR')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
ggplot(df.byheuristic %>% filter(heuristic_name != 'DRM effect'), aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(heuristic_name != 'DRM effect'), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic %>% filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias'))), aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias'))), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
analysis.byheuristic = brm(mean_prediction ~ actual_cor,
df.byheuristic.filt %>% mutate(mean_prediction = scale(mean_prediction),
actual_cor = scale(actual_cor)),
prior = set_prior("normal(0,1)", class = 'b'),
save_pars = save_pars(group = F))
summary(analysis.byheuristic)
hdi(analysis.byheuristic)
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point() +
geom_smooth(method = 'lm')
df.byheuristic.filt
df.byheuristic.filt$actual_cor
all_bytask_introspection_experience = all_data_introspection_experience %>%
group_by(task_name) %>%
summarize(task_cor = cor(introspect_rating, effect_size_range, use = 'pairwise.complete.obs'))
df.byheuristic.filt = df.byheuristic %>%
filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias')))
df.byheuristic.filt$actual_cor = all_bytask_introspection_experience$task_cor
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point() +
geom_smooth(method = 'lm')
analysis.byheuristic = brm(mean_prediction ~ actual_cor,
df.byheuristic.filt %>% mutate(mean_prediction = scale(mean_prediction),
actual_cor = scale(actual_cor)),
prior = set_prior("normal(0,1)", class = 'b'),
save_pars = save_pars(group = F))
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point(size = 3, color = 'white') +
geom_smooth(method = 'lm') +
theme_black() +
labs(x = '')
summary(analysis.byheuristic)
hdi(analysis.byheuristic)
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point(size = 3, color = 'white') +
geom_smooth(method = 'lm') +
theme_black() +
labs(x = '')
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point(size = 3, color = 'white') +
geom_smooth(method = 'lm') +
theme_black() +
labs(x = 'Task-level correlation\nb/w self-reported and observed bias magnitudes')
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point(size = 3, color = 'white') +
geom_smooth(method = 'lm') +
theme_black() +
labs(x = 'Task-level correlation b/w\nself-reported and observed bias magnitudes')
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point(size = 3, color = 'white') +
geom_smooth(method = 'lm') +
theme_black() +
labs(x = 'Task-level correlation b/w\nself-reported and observed bias magnitudes',
y = 'Predicted likelihood of awareness')
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point(size = 3, color = 'white') +
geom_smooth(method = 'lm') +
theme_black() +
labs(x = 'Task-level correlation b/w\nself-reported and observed bias magnitudes',
y = 'Predicted likelihood\nof awareness')
ggplot(df.byheuristic %>% filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias'))), aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias'))), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = mean_prediction)) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction') +
scale_x_discrete(labels = NULL)
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction') +
scale_x_discrete(labels = NULL, breaks = NULL)
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Task-level correlation b/w\nself-reported and observed bias magnitudes') +
scale_x_discrete(labels = NULL, breaks = NULL)
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Task-level correlation b/w\nself-reported and observed bias magnitudes') +
scale_x_discrete(labels = NULL, breaks = NULL) +
scale_y_continuous(breaks = c(0, .6))
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Task-level correlation b/w\nself-reported and observed bias magnitudes') +
scale_x_discrete(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(0, .6), breaks = c(0, .6))
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y='') +
scale_x_discrete(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(0, .6), breaks = c(0, .6))
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y='') +
#scale_x_discrete(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(0, .6), breaks = c(0, .6))
ggplot(df.byheuristic %>% filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias'))), aes(x = heuristic_name, y = mean_prediction)) +
geom_jitter(data = df.long %>% filter(!(heuristic_name %in% c('DRM effect', 'Hindsight bias', 'Status quo bias', 'Sunk cost bias'))), aes(y = heuristic_prediction),
width = 0, alpha = 0.5, height = 0.2,
color = 'white') +
geom_point(size = 5, color = 'red') +
geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
ymax = mean_prediction + 1.96*se_prediction),
width = 0.2, color = 'red') +
theme_black() +
geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y = 'Prediction')
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point(size = 3, color = 'white') +
geom_smooth(method = 'lm') +
theme_black() +
labs(x = 'Task-level correlation b/w\nself-reported and observed bias magnitudes',
y = 'Predicted likelihood\nof awareness')
ggplot(df.byheuristic.filt, aes(x = actual_cor, y = mean_prediction)) +
geom_point(size = 3, color = 'white') +
geom_smooth(method = 'lm') +
theme_black() +
labs(x = 'Task-level awareness',
y = 'Predicted likelihood\nof awareness')
ggplot(df.byheuristic.filt, aes(x = mean_prediction, y = actual_cor)) +
geom_point(size = 3, color = 'white') +
geom_smooth(method = 'lm') +
theme_black() +
labs(y = 'Task-level awareness',
x = 'Predicted likelihood\nof awareness')
rm(list=ls())
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf_before_anonymization/pilot1/pilot1_output.rdata")
ggplot(all_data_introspection_experience,
aes(x = effect_size_range, y = introspect_rating)) +
geom_point(alpha=0.5, color = 'white') +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nObserved bias magnitude', y = 'Self-reported bias') +
scale_y_continuous(limits = c(1,9), breaks = c(1,5,9))
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# color palettes
exp_control <- c("#F37121", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
ggplot(all_data_introspection_experience,
aes(x = effect_size_range, y = introspect_rating)) +
geom_point(alpha=0.5, color = 'white') +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nObserved bias magnitude', y = 'Self-reported bias') +
scale_y_continuous(limits = c(1,9), breaks = c(1,5,9))
all_data_introspection_experience = all_data_introspection_experience %>%
mutate(introspect_rating = (introspect_rating + 10) / 10)
ggplot(all_data_introspection_experience,
aes(x = effect_size_range, y = introspect_rating)) +
geom_point(alpha=0.5, color = 'white') +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nObserved bias magnitude', y = 'Self-reported bias') +
scale_y_continuous(limits = c(1,9), breaks = c(1,5,9))
ggplot(all_bysubject_introspection_experience, aes(x = subject_cor)) +
geom_histogram(color = 'white') +
theme_black() +
labs(x = 'Participant-level correlation between\nself-reported and observed bias magnitudes',
y = 'Number of subjects') +
geom_vline(xintercept = mean(all_bysubject_introspection_experience$subject_cor, na.rm = T), color = 'red') +
geom_vline(xintercept = mean(all_bysubject_introspection_experience$subject_cor, na.rm = T) - se(all_bysubject_introspection_experience$subject_cor), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = mean(all_bysubject_introspection_experience$subject_cor, na.rm = T) + se(all_bysubject_introspection_experience$subject_cor), color = 'red', linetype = 'dashed') +
scale_y_continuous(labels = c(), expand = expansion(mult = c(0, 0.05)))
rm(list=ls())
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf_before_anonymization/pilot2/pilot2_output.rdata")
ggplot(all_data_introspection_experience,
aes(x = effect_size_range, y = introspect_rating)) +
geom_point(alpha=0.5, color = 'white') +
geom_smooth(method='lm') +
theme_black() +
labs(x = 'Observed\nbias magnitude',
y = 'Self-reported bias')
ggplot(all_data_introspection_experience,
aes(x = effect_size_range, y = introspect_rating)) +
geom_point(alpha=0.5, color = 'white') +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nObserved\nbias magnitude',
y = 'Self-reported bias')
rm(list=ls())
load("/Users/am9578/My Drive/Psychology/Projects/menagerie/noa_git/menagerie/analysis/osf_before_anonymization/pilot4/pilot4_output.rdata")
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y='') +
#scale_x_discrete(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(0, 1), breaks = c(0, 1))
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y='') +
#scale_x_discrete(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.5, 1))
ggplot(df.byheuristic.filt, aes(x = heuristic_name, y = actual_cor)) +
geom_point(size = 5, color = 'red') +
#geom_errorbar(aes(ymin = mean_prediction - 1.96*se_prediction,
#                  ymax = mean_prediction + 1.96*se_prediction),
#              width = 0.2, color = 'red') +
theme_black() +
#geom_hline(yintercept = 4, linetype = 'dashed', color = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
#scale_y_continuous(limits = c(1,7), breaks = c(1,4,7), labels = c('Extremely unlikely', 'Neither likely\nnor unlikely', 'Extremely likely')) +
labs(x = '', y='') +
#scale_x_discrete(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.5, 1))
cor.test(all_data_introspection_experience$introspect_rating, all_data_introspection_experience$effect_size_range)
test = cor.test(all_data_introspection_experience$introspect_rating, all_data_introspection_experience$effect_size_range)
test$conf.int
(test$parameter - test$conf.int)
test$statistic
(test$estimate - test$conf.int)
(test$estimate - test$conf.int[1])
(test$estimate - test$conf.int[1]) / 1.96
test$estimate
test$conf.int
