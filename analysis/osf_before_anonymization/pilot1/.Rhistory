filter(factor == 'experience') %>%
mutate(effect_size = choice.binary,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice.binary, c(T,F), c('Effect', 'No effect')))
# dichotomized
summary.avail.intro.experience <- df.avail.intro.experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary.avail.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = effect_no)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
analysis.avail.intro.experience = brm(introspect_rating ~ showed_effect,
df.avail.intro.experience %>% mutate(introspect_rating = scale(introspect_rating)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.avail.intro.experience)
check_divergences(analysis.avail.intro.experience$fit)
summary(analysis.avail.intro.experience)
hdi(analysis.avail.intro.experience)
# Abnormal selection in causal inference -------------------------------------------------------------
## do people show the effect? ----
df.cause = df %>% filter(task_name == 'causal inference') %>%
mutate(choice = as.numeric(choice))
summary.cause = df.cause %>%
group_by(condition) %>%
summarize(choice.m = mean(choice),
choice.se = se(choice),
count = n())
ggplot(summary.cause, aes(x = condition, y = choice.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
labs(title = "Abnormal Selection in Causal Inference", x = "Condition", y = "average causality rating") +
theme_custom() +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
analysis.cause = brm(choice ~ condition,
df.cause,
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.cause)
check_divergences(analysis.cause$fit)
summary(analysis.cause)
hdi(analysis.cause)
## are people aware of the effect? ----
df.cause.intro <- df.cause %>% filter(!is.na(introspect_rating))
cause.mean.control.response = mean(df.cause$choice[df.cause$factor == 'control'])
df.cause.intro.experience = df.cause %>%
filter(factor == 'experience') %>%
mutate(effect_size = choice,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice > cause.mean.control.response, c(T,F), c('Effect', 'No effect')))
# dichotomized
summary.cause.intro.experience <- df.cause.intro.experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary.cause.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = effect_no)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
analysis.cause.intro.experience.dichotomized = brm(introspect_rating ~ showed_effect,
df.cause.intro.experience %>% mutate(introspect_rating = scale(introspect_rating)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.cause.intro.experience.dichotomized)
check_divergences(analysis.cause.intro.experience.dichotomized$fit)
summary(analysis.cause.intro.experience.dichotomized)
hdi(analysis.cause.intro.experience.dichotomized)
# continuous
ggplot(df.cause.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
analysis.cause.intro.experience.continuous = brm(introspect_rating ~ effect_size,
df.cause.intro.experience %>% mutate(introspect_rating = scale(introspect_rating),
effect_size = scale(effect_size)),
prior = default_priors,
save_pars = save_pars(group = F))
summary(analysis.cause.intro.experience.continuous)
hdi(analysis.cause.intro.experience.continuous)
# Decoy Effect -------------------------------------------------------------
## do people show the effect? ----
df.decoy = df %>%
filter(task_name == 'decoy effect') %>%
mutate(choice.target = choice == 'Brand N (Target)')
summary.decoy = df.decoy %>%
group_by(factor) %>%
summarize(choice.target.m = mean(choice.target),
choice.target.se = se.prop(choice.target),
count = n())
ggplot(summary.decoy, aes(x = factor, y = choice.target.m, fill=factor)) +
geom_col() +
geom_errorbar(aes(ymin = choice.target.m - choice.target.se,
ymax = choice.target.m + choice.target.se),
width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
labs(title = "Decoy Effect", x = "Condition", y = "Proportion Chose Brand N (Target)")+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
analysis.decoy = brm(choice.target ~ condition,
df.decoy,
prior = default_priors,
family = 'bernoulli')
summarise_draws(analysis.decoy)
check_divergences(analysis.decoy$fit)
summary(analysis.decoy)
hdi(analysis.decoy)
## are people aware of the effect? ----
df.decoy.intro <- df.decoy %>%
filter(!is.na(introspect_rating))
df.decoy.intro.experience = df.decoy %>%
filter(factor == 'experience') %>%
mutate(effect_size = choice.target,
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size),
showed_effect = factor(choice.target, c(T,F), c('Effect', 'No effect')))
# dichotomized
summary.decoy.intro.experience <- df.decoy.intro.experience %>%
group_by(showed_effect) %>%
summarize(
mean_introspect_rating = mean(as.numeric(introspect_rating), na.rm = TRUE),
se_introspect_rating = se(introspect_rating)
)
ggplot(summary.decoy.intro.experience, aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect", y = "introspection rating") +
theme_custom()+
scale_fill_manual(values = effect_no)+
guides(fill = FALSE)+
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
analysis.decoy.intro.experience.dichotomized = brm(introspect_rating ~ showed_effect,
df.decoy.intro.experience %>% mutate(introspect_rating = scale(introspect_rating)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.decoy.intro.experience.dichotomized)
check_divergences(analysis.decoy.intro.experience.dichotomized$fit)
summary(analysis.decoy.intro.experience.dichotomized)
hdi(analysis.decoy.intro.experience.dichotomized)
# Belief ------------------------------------------------------------------
## do people show the effect? ----
df.belief <- df %>%
filter(task_name == 'belief') %>%
mutate(choice.yes = choice == 'Yes')
df.belief.choices = df.belief %>%
filter(factor == "experience", !is.na(choice), !is.na(condition))
summary.belief <- df.belief.choices %>%
group_by(condition) %>%
summarize(choice.yes.m = mean(choice.yes),
choice.yes.se = se.prop(choice.yes),
count = n())
ggplot(summary.belief, aes(x = condition, y = choice.yes.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = choice.yes.m - choice.yes.se,
ymax = choice.yes.m + choice.yes.se),
width = 0.2) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
labs(title = "Belief Effect",x = "Condition", y = "Proportion Chose Yes, Valid")+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
analysis.belief = brm(choice.yes ~ condition,
df.belief.choices,
prior = default_priors,
family = 'bernoulli')
summarise_draws(analysis.belief)
check_divergences(analysis.belief$fit)
summary(analysis.belief)
hdi(analysis.belief)
## are people aware of the effect? ----
df.belief.intro = df.belief %>%
filter(!is.na(introspect_rating))
df.belief.intro.experience = df.belief.intro %>%
filter(factor == 'experience')
belief.effectsizes <- df.belief.choices %>%
filter(factor == 'experience') %>%
group_by(subject, condition) %>%
summarize(mean_choice = mean(choice.yes), .groups = 'drop') %>%
pivot_wider(names_from = condition, values_from = mean_choice) %>%
mutate(effect_size = Believable - Unbelievable) %>%
select(-Believable, -Unbelievable)
df.belief.intro.experience = df.belief.intro.experience %>%
left_join(belief.effectsizes, by = 'subject') %>%
mutate(showed_effect = factor(effect_size > 0, c(T,F), c('Effect', 'No effect')),
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size))
# dichotomized
summary.belief.intro.experience = df.belief.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.belief.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom() +
scale_fill_manual(values = effect_no) +
guides(fill = F)
analysis.belief.intro.experience.dichotomized = brm(introspect_rating ~ showed_effect,
df.belief.intro.experience %>% mutate(introspect_rating = scale(introspect_rating)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.belief.intro.experience.dichotomized)
check_divergences(analysis.belief.intro.experience.dichotomized$fit)
summary(analysis.belief.intro.experience.dichotomized)
hdi(analysis.belief.intro.experience.dichotomized)
# continuous
ggplot(df.belief.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
analysis.belief.intro.experience.continuous = brm(introspect_rating ~ effect_size,
df.belief.intro.experience %>% mutate(introspect_rating = scale(introspect_rating),
effect_size = scale(effect_size)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.belief.intro.experience.continuous)
check_divergences(analysis.belief.intro.experience.continuous$fit)
summary(analysis.belief.intro.experience.continuous)
hdi(analysis.belief.intro.experience.continuous)
# Mere exposure ------------------------------------------------------
## do people show the effect? ----
df.mee = df %>%
filter(task_name == 'mere exposure') %>%
mutate(choice = as.numeric(choice))
df.mee.choices <- df.mee %>%
filter(factor == "experience", !is.na(choice)) %>%
mutate(condition = factor(condition, c(1,25), c('low', 'high')))
summary.mee = df.mee.choices %>%
group_by(condition) %>%
summarize(choice.m = mean(choice),
choice.se = se(choice),
count = n())
ggplot(summary.mee, aes(x = condition, y = choice.m, fill = condition)) +
geom_col() +
geom_errorbar(aes(ymin = choice.m - choice.se, ymax = choice.m + choice.se), width = .2) +
theme_custom() +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
labs(title = "Mere Exposure Effect",x = "Number of repeats", y = "Mean Liking Rating")+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)
analysis.mee = brm(choice ~ condition + (condition | subject),
df.mee.choices %>% mutate(choice = scale(choice)),
prior = default_priors,
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95))
summarise_draws(analysis.mee)
check_divergences(analysis.mee$fit)
summary(analysis.mee)
hdi(analysis.mee)
## are people aware of the effect? ---------------------------------------------------
df.mee.intro <- df.mee %>% filter(!is.na(introspect_rating))
df.mee.intro.experience = df.mee.intro %>%
filter(factor == 'experience')
mee.effectsizes <- df.mee.choices %>%
filter(factor == 'experience') %>%
group_by(subject, condition) %>%
summarize(mean_choice = mean(choice), .groups = 'drop') %>%
pivot_wider(names_from = condition, values_from = mean_choice) %>%
mutate(effect_size = high - low) %>%
select(-high, -low)
df.mee.intro.experience = df.mee.intro.experience %>%
left_join(mee.effectsizes, by = 'subject') %>%
mutate(showed_effect = factor(effect_size > 0, c(T,F), c('Effect', 'No effect')),
effect_size_std = scale(effect_size), effect_size_range = range01(effect_size))
# dichotomized
summary.mee.intro.experience = df.mee.intro.experience %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating, na.rm = T),
se_introspect_rating = se(introspect_rating),
)
ggplot(summary.mee.intro.experience,
aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(x = "Showed effect?", y = "Introspection rating") +
theme_custom() +
scale_fill_manual(values = effect_no) +
guides(fill = F)
analysis.mee.intro.experience.dichotomized = brm(introspect_rating ~ showed_effect,
df.mee.intro.experience %>% mutate(introspect_rating = scale(introspect_rating)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.mee.intro.experience.dichotomized)
check_divergences(analysis.mee.intro.experience.dichotomized$fit)
summary(analysis.mee.intro.experience.dichotomized)
hdi(analysis.mee.intro.experience.dichotomized)
# continuous
ggplot(df.mee.intro.experience, aes(x = effect_size, y = introspect_rating)) +
geom_point() +
geom_smooth(method='lm') +
theme_custom()+
labs(x = "Effect size", y = "Introspection rating")
analysis.mee.intro.experience.continuous = brm(introspect_rating ~ effect_size,
df.mee.intro.experience %>% mutate(introspect_rating = scale(introspect_rating),
effect_size = scale(effect_size)),
prior = default_priors,
save_pars = save_pars(group = F))
summarise_draws(analysis.mee.intro.experience.continuous)
check_divergences(analysis.mee.intro.experience.continuous$fit)
summary(analysis.mee.intro.experience.continuous)
hdi(analysis.mee.intro.experience.continuous)
# Aggregating across all tasks -----------------------------------------------------------
all_list_introspection_experience = list(df.anchor.intro.experience,
df.avail.intro.experience,
df.cause.intro.experience,
df.decoy.intro.experience,
df.belief.intro.experience,
df.mee.intro.experience)
all_data_introspection_experience = all_list_introspection_experience[[1]] %>%
select(subject, task_name, introspect_rating, effect_size, effect_size_range, showed_effect)
for (i in 2:length(all_list_introspection_experience)) {
all_data_introspection_experience = all_data_introspection_experience %>%
rbind(all_list_introspection_experience[[i]] %>%
select(subject, task_name, introspect_rating, effect_size, effect_size_range, showed_effect))
}
all_list_introspection_experience = list(df.anchor.intro.experience,
df.avail.intro.experience,
df.cause.intro.experience,
df.decoy.intro.experience,
df.belief.intro.experience,
df.mee.intro.experience)
all_data_introspection_experience = bind_rows(all_list_introspection_experience) %>%
select(subject, task_name, introspect_rating, effect_size, effect_size_range, showed_effect)
for (i in 1:length(all_list_introspection_experience)) {
df_name = paste("Data frame", i) # Or some identifier if you have names
current_df = all_list_introspection_experience[[i]]
# Check column names
print(paste(df_name, "columns:"))
print(colnames(current_df))
# Check dimensions
print(paste(df_name, "dimensions:", nrow(current_df), "rows,", ncol(current_df), "cols"))
# Check if all desired columns are present
required_cols = c("subject", "task_name", "introspect_rating", "effect_size", "effect_size_range", "showed_effect")
missing_cols = setdiff(required_cols, colnames(current_df))
if (length(missing_cols) > 0) {
print(paste(df_name, "is missing the following required columns:", paste(missing_cols, collapse = ", ")))
}
print("---") # Separator
}
# Define the columns you expect to be in each data frame for your final select
required_cols_for_final_select = c("subject", "task_name", "introspect_rating", "effect_size", "effect_size_range", "showed_effect")
cat("--- Checking Data Frame Structures ---\n")
for (i in 1:length(all_list_introspection_experience)) {
# Get the data frame and a name for printing
current_df = all_list_introspection_experience[[i]]
df_name = if (is.null(names(all_list_introspection_experience))) {
paste("Data frame", i) # If the list is unnamed, use index
} else {
names(all_list_introspection_experience)[i] # If named, use the name
}
cat(paste0("\nChecking ", df_name, ":\n"))
# --- Check for missing required columns ---
cols_in_df = colnames(current_df)
missing_cols_from_required = setdiff(required_cols_for_final_select, cols_in_df)
if (length(missing_cols_from_required) > 0) {
cat(paste0("  - MISSING required columns: ", paste(missing_cols_from_required, collapse = ", "), "\n"))
} else {
cat("  - All required columns are present.\n")
}
# --- Check type of the 'choice' column (source of bind_rows error) ---
if ("choice" %in% cols_in_df) {
cat(paste0("  - 'choice' column type: ", class(current_df$choice), "\n"))
# Optional: Check for non-standard types if class() returns 'list' or similar
if (!is.atomic(current_df$choice) && !inherits(current_df$choice, "factor")) {
cat("    WARNING: 'choice' column type is not atomic or factor - might cause issues.\n")
}
} else {
cat("  - 'choice' column is NOT present.\n")
}
# Optional: Add checks for other columns if needed
cat("------------------------------------\n")
}
all_summary_introspection_experience = all_data_introspection_experience %>%
filter(!is.na(showed_effect)) %>%
group_by(showed_effect) %>%
summarize(mean_introspect_rating = mean(introspect_rating),
se_introspect_rating = se(introspect_rating))
ggplot(all_summary_introspection_experience,
aes(x = showed_effect, y = mean_introspect_rating, fill = showed_effect)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_introspect_rating - se_introspect_rating, ymax = mean_introspect_rating + se_introspect_rating), width = 0.2) +
labs(title = "", x = "Influenced by heuristic?", y = "Influence rating") +
theme_custom() +
scale_fill_manual(values = effect_no) +
scale_x_discrete(labels = c('Yes', 'No')) +
guides(fill = "none")
all_analysis_introspection_experience_dichotomous = brm(introspect_rating ~ showed_effect + (1 | subject) + (1 | task_name),
all_data_introspection_experience %>% mutate(introspect_rating = scale(introspect_rating),
showed_effect = relevel(showed_effect, ref = 'No effect')),
prior = default_priors,
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95))
summarise_draws(all_analysis_introspection_experience_dichotomous)
check_divergences(all_analysis_introspection_experience_dichotomous$fit)
summary(all_analysis_introspection_experience_dichotomous)
hdi(all_analysis_introspection_experience_dichotomous)
## continuous
ggplot(all_data_introspection_experience,
aes(x = effect_size_range, y = introspect_rating)) +
geom_point(alpha=0.5) +
geom_smooth(method='lm') +
theme_custom() +
labs(x = 'Influence magnitude', y = 'Influence rating')
all_analysis_introspection_experience_continuous = brm(introspect_rating ~ effect_size_range + (1 | subject) + (effect_size_range | task_name),
all_data_introspection_experience %>% mutate(introspect_rating = scale(introspect_rating),
effect_size_range = scale(effect_size_range)),
prior = default_priors,
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95))
summarise_draws(all_analysis_introspection_experience_continuous)
check_divergences(all_analysis_introspection_experience_dichotomous$fit)
summary(all_analysis_introspection_experience_continuous)
hdi(all_analysis_introspection_experience_continuous)
## continuous, standardized within
all_data_introspection_experience = all_data_introspection_experience %>%
group_by(subject) %>%
mutate(effect_size_range_within = scale(effect_size_range),
introspect_rating_within = scale(introspect_rating)) %>%
ungroup()
ggplot(all_data_introspection_experience,
aes(x = effect_size_range_within, y = introspect_rating_within)) +
geom_point(alpha=0.5) +
geom_smooth(method='lm') +
theme_custom()
all_analysis_introspection_experience_continuous_within = brm(introspect_rating_within ~ effect_size_range_within + (1 | subject) + (effect_size_range_within | task_name),
all_data_introspection_experience %>% mutate(introspect_rating_within = scale(introspect_rating_within),
effect_size_range_within = scale(effect_size_range_within)),
prior = default_priors,
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95))
ggplot(all_data_introspection_experience,
aes(x = effect_size_range, y = introspect_rating)) +
geom_point(alpha=0.5) +
geom_smooth(method='lm') +
theme_custom() +
labs(x = 'Influence magnitude', y = 'Influence rating')
all_analysis_introspection_experience_continuous = brm(introspect_rating ~ effect_size_range + (1 | subject) + (effect_size_range | task_name),
all_data_introspection_experience %>% mutate(introspect_rating = scale(introspect_rating),
effect_size_range = scale(effect_size_range)),
prior = default_priors,
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95))
summarise_draws(all_analysis_introspection_experience_continuous)
check_divergences(all_analysis_introspection_experience_dichotomous$fit)
summary(all_analysis_introspection_experience_continuous)
hdi(all_analysis_introspection_experience_continuous)
all_data_introspection_experience = all_data_introspection_experience %>%
group_by(subject) %>%
mutate(effect_size_range_within = scale(effect_size_range),
introspect_rating_within = scale(introspect_rating)) %>%
ungroup()
ggplot(all_data_introspection_experience,
aes(x = effect_size_range_within, y = introspect_rating_within)) +
geom_point(alpha=0.5) +
geom_smooth(method='lm') +
theme_custom()
all_analysis_introspection_experience_continuous_within = brm(introspect_rating_within ~ effect_size_range_within + (1 | subject) + (effect_size_range_within | task_name),
all_data_introspection_experience %>% mutate(introspect_rating_within = scale(introspect_rating_within),
effect_size_range_within = scale(effect_size_range_within)),
prior = default_priors,
save_pars = save_pars(group = F),
cores = 4,
control = list(adapt_delta = 0.95))
all_data_introspection_experience = all_data_introspection_experience %>%
group_by(subject) %>%
mutate(effect_size_range_within = scale(effect_size_range),
introspect_rating_within = scale(introspect_rating)) %>%
ungroup()
ggplot(all_data_introspection_experience,
aes(x = effect_size_range_within, y = introspect_rating_within)) +
geom_point(alpha=0.5) +
geom_smooth(method='lm') +
theme_custom()
all_analysis_introspection_experience_continuous_within = brm(introspect_rating_within ~ effect_size_range_within + (1 | subject) + (effect_size_range_within | task_name),
control = list(adapt_delta = 0.95))
# for use in pilot 4 analysis
all_data_introspection_experience_pilot1 = all_data_introspection_experience
save(all_data_introspection_experience_pilot1, file = 'pilot1_alltasks.rdata')
# save all analyses
save.image("pilot1_output1.rdata")
