---
title: "R Notebook"
ls()
install.packages("rmarkdown")
rmarkdown::render("2.final_clean.Rmd")
ls
rmarkdown::render("2.final_clean.Rmd")
list.files()
rmarkdown::render("Downloads/2.final_clean.Rmd")
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior', 'parallel', 'doParallel')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
# color palettes
exp_control <- c("#F37121", "#4793AF")
exp_neutral_control <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# Load data ---------------------------------------------------------------
data <- read.csv('pilot3_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")))
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot3_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot3_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
print(median(demographics$total_time))
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
# Get sample size pre-exclusion
length(unique(data$subject[data$version != 'pilot3b']))
length(unique(data$subject[data$version == 'pilot3b']))
data <- data %>%
filter(!subject %in% to_exclude,
!is.na(factor),
!(subject == "62d06d1b651d6922f62fab9b" & factor == "control"),
!(subject == "672cbd3e4db513bd8523d57f" & factor == "control"))
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
length(unique(data$subject[data$version != 'pilot3b']))
length(unique(data$subject[data$version != 'pilot3b' & data$factor == 'experience']))
length(unique(data$subject[data$version != 'pilot3b' & data$factor == 'control']))
length(unique(data$subject[data$version == 'pilot3b']))
# Affect heuristic ----
affect_data = data %>%
filter(task_name == "affect heuristic")%>%
mutate(choice = as.numeric(choice))%>%
mutate(auxiliary_info1 = as.numeric(auxiliary_info1))
summary_affect_data <- affect_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("With passage", "without passage"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
view(affect_data)
