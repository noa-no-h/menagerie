---
title: "R Notebook"
ls()
install.packages("rmarkdown")
rmarkdown::render("2.final_clean.Rmd")
ls
rmarkdown::render("2.final_clean.Rmd")
list.files()
rmarkdown::render("Downloads/2.final_clean.Rmd")
# Setup -------------------------------------------------------------------
if (!require('pacman')) {
install.packages('pacman')
require('pacman')
}
pkg.names = c('ggplot2', 'tidyverse', 'RColorBrewer', 'extrafont',
'this.path', 'brms', 'bayestestR', 'rstan', 'posterior', 'parallel', 'doParallel')
p_load(char = pkg.names)
setwd(here())
set.seed(123)
# color palettes
exp_control <- c("#F37121", "#4793AF")
exp_neutral_control <- c("#F37121", "#D3D3D3", "#4793AF")
effect_no <- c("#e74c3c", "#D3D3D3")
theme_custom <- function() {
theme_minimal(base_family = "Optima") +
theme(
axis.text.x = element_text(size = 15, margin = margin(t = 0, r = 0, b = 0, l = 1)),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15),
aspect.ratio = 1,  # Set the aspect ratio here
panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
dodge <- position_dodge(width=0.9)
default_priors <- set_prior("normal(0,1)", class = 'b')
# Load data ---------------------------------------------------------------
data <- read.csv('pilot3_data.csv') %>%
arrange(subject, task_name) %>%
mutate(factor = factor(factor, c("Factor-Included", "Factor-Excluded"), c("experience", "control")))
subjects_all = data %>%
pull(subject) %>%
unique()
#find subjects who need to be excluded
attention_exclude <- data %>%
filter((`task_name` == "attention check 2" & `auxiliary_info1` == "Failure") |
(`task_name` == "attention check 3" & `auxiliary_info1` == "Incorrect")) %>%
pull(subject)
events <- read.csv('pilot3_browser_events.csv') %>%
arrange(subject)
events_subj <- events %>%
filter(browser_event == "blur") %>%
group_by(subject) %>%
summarize(blurs = n())
ggplot(events_subj, aes(x = blurs)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Blur Histogram", x = "Number of Blurs", y = "Count") +
theme_custom()
tab_away_exclude <- events_subj %>%
filter(blurs > 20) %>%
pull(subject)
demographics <- read.csv('pilot3_demographics.csv') %>%
arrange(subject) %>%
mutate(total_time = total_time/60000)
ggplot(demographics, aes(x = total_time)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Time Histogram", x = "Minutes", y = "Count") +
theme_custom()
print(median(demographics$total_time))
to_exclude <- union(attention_exclude, tab_away_exclude)
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
# Get sample size pre-exclusion
length(unique(data$subject[data$version != 'pilot3b']))
length(unique(data$subject[data$version == 'pilot3b']))
data <- data %>%
filter(!subject %in% to_exclude,
!is.na(factor),
!(subject == "62d06d1b651d6922f62fab9b" & factor == "control"),
!(subject == "672cbd3e4db513bd8523d57f" & factor == "control"))
number_subjects <- n_distinct(data$subject)
number_to_exclude <- length(to_exclude)
print(number_subjects)
print(number_to_exclude)
length(unique(data$subject[data$version != 'pilot3b']))
length(unique(data$subject[data$version != 'pilot3b' & data$factor == 'experience']))
length(unique(data$subject[data$version != 'pilot3b' & data$factor == 'control']))
length(unique(data$subject[data$version == 'pilot3b']))
# Affect heuristic ----
affect_data = data %>%
filter(task_name == "affect heuristic")%>%
mutate(choice = as.numeric(choice))
summary_affect_data <- affect_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("With passage", "without passage"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_affect_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Affect Heuristic", x = "Condition", y = "How beneficial is natural gas") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
affect_analysis = brm(choice ~ factor,
data = affect_data %>% mutate(choice = scale(choice)),
save_pars = save_pars(group = F),
prior = default_priors)
summarise_draws(affect_analysis)
check_divergences(affect_analysis$fit)
summary(affect_analysis)
hdi(affect_analysis)
# Power analysis (b/c affect heuristic is the smallest effect size)
run_power_analysis = F # change this to T to run the power analysis yourself
if (run_power_analysis) {
sample_sizes = c(150, 200)
num_runs_per = 100
numCores = 5
registerDoParallel(numCores)
results_all = vector(mode = 'list', length = length(sample_sizes))
for (i in 1:length(sample_sizes)) {
sample_size = sample_sizes[i]
new_data_template = affect_data %>%
distinct(subject) %>%
slice_sample(n = sample_size, replace = T) %>%
group_by(subject) %>%
mutate(instance = row_number()) %>%
ungroup() %>%
left_join(affect_data, by = 'subject') %>%
mutate(subject = str_c(subject, instance, sep = "_"))
post_draws = posterior_predict(affect_analysis,
newdata = new_data_template,
ndraws = num_runs_per,
allow_new_levels = T)
results = foreach(j = 1:num_runs_per, .combine = "rbind") %dopar% {
new_data = new_data_template
new_data$introspect_rating = t(post_draws)[,j]
power_analysis = brm(choice ~ factor,
data = new_data %>% mutate(choice = scale(choice)),
save_pars = save_pars(group = F),
prior = default_priors)
power_analysis_hdi = bayestestR::hdi(power_analysis)
coef_estimate = summary(power_analysis)$fixed$Estimate[2]
hdi_high = power_analysis_hdi$CI_high[2]
hdi_low = power_analysis_hdi$CI_low[2]
list(coef_estimate, hdi_low, hdi_high)
}
results_df <- as.data.frame(results)
results_df = data.frame(lapply(results_df, unlist))
colnames(results_df) <- c("coef_estimate", "hdi_low", "hdi_high")
rownames(results_df) <- paste0("Run_", 1:num_runs_per)
results_all[[i]] = results_df %>%
mutate(hdi_width = hdi_high - hdi_low,
hdi_significant = hdi_low > .05)
}
}
# Hindsight ----
hindsight_data = data %>%
filter(task_name == "hindsight effect")%>%
filter(stimulus != "comprehension") %>%
mutate(choice = as.numeric(choice))
summary_hindsight_data <- hindsight_data %>%
group_by(condition) %>%
mutate(condition = factor(condition, levels = c("knowledge of outcome", "no knowledge of outcome"))) %>%
summarize(
mean_choice = mean(choice),
se_choice = se(choice),
count = n()
)
ggplot(summary_hindsight_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice), width = 0.2) +
labs(title = "Hindsight Bias", x = "Condition", y = "Percent Likelihood of British Victory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom()+
scale_fill_manual(values = exp_control)+
guides(fill = FALSE)+   scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
ggplot(summary_hindsight_data, aes(x = condition, y = mean_choice, fill = condition)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +  # Bar chart with transparency
geom_errorbar(aes(ymin = mean_choice - se_choice, ymax = mean_choice + se_choice),
width = 0.2) +  # Error bars
geom_jitter(data = hindsight_data, aes(x = condition, y = choice),
width = 0.2, alpha = 0.6, color = "black", size = 2) +  # Individual data points
labs(title = "Hindsight", x = "Condition", y = "Percent Likelihood of British Victory") +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
theme_custom() +
scale_fill_manual(values = exp_control) +
guides(fill = FALSE) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 14))
t_test_result <- t.test(choice ~ condition, data = hindsight_data, var.equal = TRUE)
print(t_test_result$p.value)
# p = 0.0108
hindsight_analysis = brm(choice ~ factor,
data = hindsight_data %>% mutate(choice = scale(choice)),
save_pars = save_pars(group = F),
prior = default_priors)
summary(hindsight_analysis)
hdi(hindsight_analysis)
# Order effect ----
primacy_data <- data %>%
filter(version == 'pilot3b', task_name == "primacy order", choice %in% c('car1', 'car2')) %>%
mutate(factor = recode(factor, "F" = "Factor-Included"),
car_1_or_2 = ifelse(choice == "car1", 1, 0))
primacy_graph_data <- primacy_data %>%
group_by(choice) %>%
summarise(count = n()) %>%
mutate(
total_count = sum(count),
proportion = count / total_count,
percent = proportion * 100,
se = sqrt(proportion * (1 - proportion) / count) * 100
)
ggplot(primacy_graph_data, aes(x = choice, y = percent, fill = choice)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = percent - se, ymax = percent + se),
width = 0.2,
color = "black",
linewidth = 0.5
) +
geom_text(aes(label = paste0("n=", count)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_x_discrete(labels = c("car1" = "positive attributes first", "car2" = "negative attributes first"))+
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
labs(
title = "Percentage of Choices for Each Car",
x = "Car Choice",
y = "Percentage chosen",
fill = "Car"
) +
theme_custom() +
guides(fill = FALSE) +
scale_fill_manual(values = exp_control) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
primacy_analysis = brm(car_1_or_2 ~ 1,
primacy_data,
family = 'bernoulli',
save_pars = save_pars(group = F))
summary(primacy_analysis)
hdi(primacy_analysis)
summarise_draws(primacy_analysis)
check_divergences(primacy_analysis$fit)
# Status quo ----
#When subjects were told the status quo,
#were they more likely to recommend the 70/30 allocation?
status_quo_data = data %>%
filter(task_name == "status_quo") %>%
filter(stimulus != "comprehension") %>%
mutate(choice = ifelse(auxiliary_info1 == "Allocate 50% to auto safety and 50% to highway safety status quo: 50/50",
"status quo",
choice))%>%
mutate(choice_binary = as.numeric(choice == "status quo"))%>%
group_by(factor) %>%
summarize(
n = n(),
p = mean(choice_binary),
se = sqrt(p * (1 - p) / n),
lower = p - se,
upper = p + se,
percentage = p * 100,
percentageLower = lower * 100,
percentageUpper = upper * 100
)
ggplot(status_quo_data, aes(x = factor, y = percentage, fill = factor)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymin = percentageLower, ymax = percentageUpper),
position = position_dodge(width = 0.7),
width = 0.2) +
scale_fill_manual(
values = c("#F37121", "#4793AF"),
guide = "none"
) +
geom_text(aes(label = paste0("n=", n)),
position = position_dodge(0.9), vjust = -0.5,
family = "Optima") +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20), labels = function(x) paste0(x, "%")) +
scale_x_discrete(labels = c("Status Quo Given", "Status Quo Not Given")) + # Changed the labels here
labs(
title = "Status Quo Bias",
y = "Percentage who Chose 50/50 Allocation",
x = "Condition"
) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
theme_custom()
status_quo_analysis = brm(choice_binary ~ condition,
data = status_quo_data,
family = 'bernoulli',
save_pars = save_pars(group = F),
prior = default_priors)
library(jsonlite)
task_data_list <- list(
list(affect_data, "halo", list("subject", "choice")),
list(hindsight_data, "illusory_truth", list("subject", "choice")),
list(order_data, "omission", list("subject", "choice")),
list(status_quo_data, "recognition", list("subject", "choice")),
list(sunk_cost_data, "reference_price", list("subject", "choice")),
)
task_data_list <- list(
list(affect_data, "affect", list("subject", "choice")),
list(hindsight_data, "hindsight", list("subject", "choice")),
list(primacy_data, "primacy", list("subject", "choice")),
list(status_quo_data, "status_quo", list("subject", "choice")),
list(sunk_cost_data, "sunk_cost", list("subject", "choice")),
)
# Sunk cost ----
sunk_cost_data = data %>%
filter(task_name == "sunk_cost2 effect") %>%
mutate(switched = choice == "Don't Continue Investing") %>%
group_by(factor) %>%
summarize(
n = n(),
p = mean(switched),
se = sqrt(p * (1 - p) / n),
lower = p - se,
upper = p + se,
percentage = p * 100,
percentageLower = lower * 100,
percentageUpper = upper * 100
)
task_data_list <- list(
list(affect_data, "affect", list("subject", "choice")),
list(hindsight_data, "hindsight", list("subject", "choice")),
list(primacy_data, "primacy", list("subject", "choice")),
list(status_quo_data, "status_quo", list("subject", "choice")),
list(sunk_cost_data, "sunk_cost", list("subject", "choice")),
)
task_data_list <- list(
list(affect_data, "affect", list("subject", "choice")),
list(hindsight_data, "hindsight", list("subject", "choice")),
list(primacy_data, "primacy", list("subject", "choice")),
list(status_quo_data, "status_quo", list("subject", "choice")),
list(sunk_cost_data, "sunk_cost", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
task_data_list <- list(
#list(affect_data, "affect", list("subject", "choice")),
#list(hindsight_data, "hindsight", list("subject", "choice")),
#list(primacy_data, "primacy", list("subject", "choice")),
#list(status_quo_data, "status_quo", list("subject", "choice")),
list(sunk_cost_data, "sunk_cost", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
view(sunk_cost_data)
# Sunk cost ----
sunk_cost_data = data %>%
filter(task_name == "sunk_cost2 effect") %>%
mutate(switched = choice == "Don't Continue Investing") %>%
group_by(factor)
task_data_list <- list(
#list(affect_data, "affect", list("subject", "choice")),
#list(hindsight_data, "hindsight", list("subject", "choice")),
#list(primacy_data, "primacy", list("subject", "choice")),
#list(status_quo_data, "status_quo", list("subject", "choice")),
list(sunk_cost_data, "sunk_cost", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
task_data_list <- list(
list(affect_data, "affect", list("subject", "choice")),
list(hindsight_data, "hindsight", list("subject", "choice")),
list(primacy_data, "primacy", list("subject", "choice")),
list(status_quo_data, "status_quo", list("subject", "choice")),
list(sunk_cost_data, "sunk_cost", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
status_quo_data = data %>%
filter(task_name == "status_quo") %>%
filter(stimulus != "comprehension") %>%
mutate(choice = ifelse(auxiliary_info1 == "Allocate 50% to auto safety and 50% to highway safety status quo: 50/50",
"status quo",
choice))%>%
mutate(choice_binary = as.numeric(choice == "status quo"))%>%
group_by(factor)
task_data_list <- list(
list(affect_data, "affect", list("subject", "choice")),
list(hindsight_data, "hindsight", list("subject", "choice")),
list(primacy_data, "primacy", list("subject", "choice")),
list(status_quo_data, "status_quo", list("subject", "choice")),
list(sunk_cost_data, "sunk_cost", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, " = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
view(affect_data)
task_data_list <- list(
list(affect_data, "affect", list("subject", "choice", "auxiliary_info1")))
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, "_db = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
affect_data = data %>%
filter(task_name == "affect heuristic")%>%
mutate(choice = as.numeric(choice))%>%
mutate(auxiliary_info1 = as.numeric(auxiliary_info1))
task_data_list <- list(
list(affect_data, "affect", list("subject", "choice", "auxiliary_info1")))
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, "_db = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
view(hindsight_data)
library(jsonlite)
task_data_list <- list(
list(affect_data, "affect", list("subject", "choice", "auxiliary_info1")),
list(hindsight_data, "hindsight", list("subject", "choice", "auxiliary_info1")),
list(primacy_data, "primacy", list("subject", "choice")),
list(status_quo_data, "status_quo", list("subject", "choice")),
list(sunk_cost_data, "sunk_cost", list("subject", "choice"))
)
for (task_data_info in task_data_list) {
task_data = task_data_info[[1]]
task_name = task_data_info[[2]]
to_select = unlist(task_data_info[[3]])
filtered_task_data = task_data %>%
filter(factor == "experience") %>%
select(all_of(to_select))
db_json <- toJSON(filtered_task_data, pretty = TRUE)
json_towrite = paste0(task_name, "_db = ", db_json, ";")
write(json_towrite, paste0(task_name, "_db.js"))
}
